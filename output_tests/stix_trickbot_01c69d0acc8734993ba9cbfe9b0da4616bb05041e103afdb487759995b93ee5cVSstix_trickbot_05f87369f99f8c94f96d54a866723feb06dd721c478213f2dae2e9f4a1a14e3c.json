Comparing stix_trickbot_01c69d0acc8734993ba9cbfe9b0da4616bb05041e103afdb487759995b93ee5c.json to stix_trickbot_05f87369f99f8c94f96d54a866723feb06dd721c478213f2dae2e9f4a1a14e3c.json
Graphs are 53.75201400349893 percent similar
Objects successfuly analyed and added to a list:
{100: [IPv4Address(type='ipv4-addr', spec_version='2.1', id='ipv4-addr--374164ff-2d60-578e-b97b-33bb45a96bcc', value='103.36.79.3', defanged=False), IPv4Address(type='ipv4-addr', spec_version='2.1', id='ipv4-addr--374164ff-2d60-578e-b97b-33bb45a96bcc', value='103.36.79.3', defanged=False), IPv4Address(type='ipv4-addr', spec_version='2.1', id='ipv4-addr--21183ea0-511f-574e-b703-14f876792076', value='127.0.0.4', defanged=False), IPv4Address(type='ipv4-addr', spec_version='2.1', id='ipv4-addr--21183ea0-511f-574e-b703-14f876792076', value='127.0.0.4', defanged=False), DomainName(type='domain-name', spec_version='2.1', id='domain-name--3c767790-f9aa-550f-b99d-5b2586e3cb0f', value='api.ip.sb.cdn.cloudflare.net', defanged=False), DomainName(type='domain-name', spec_version='2.1', id='domain-name--3c767790-f9aa-550f-b99d-5b2586e3cb0f', value='api.ip.sb.cdn.cloudflare.net', defanged=False), DomainName(type='domain-name', spec_version='2.1', id='domain-name--f80a723d-c1b3-573d-93c9-a7c49d7639e2', value='104.26.13.31', defanged=False), DomainName(type='domain-name', spec_version='2.1', id='domain-name--f80a723d-c1b3-573d-93c9-a7c49d7639e2', value='104.26.13.31', defanged=False), DomainName(type='domain-name', spec_version='2.1', id='domain-name--b8af0258-507d-5063-90ac-09f622006893', value='104.26.12.31', defanged=False), DomainName(type='domain-name', spec_version='2.1', id='domain-name--b8af0258-507d-5063-90ac-09f622006893', value='104.26.12.31', defanged=False), DomainName(type='domain-name', spec_version='2.1', id='domain-name--2df4a7ea-f13f-5a4e-b08d-b88c27c86592', value='172.67.75.172', defanged=False), DomainName(type='domain-name', spec_version='2.1', id='domain-name--2df4a7ea-f13f-5a4e-b08d-b88c27c86592', value='172.67.75.172', defanged=False), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--22470710-10ba-45f4-9d6e-4a7a379e85bc', created='2022-08-29T19:11:44.034248Z', modified='2022-08-29T19:11:44.034248Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--dc55d93e-5c77-4ed7-8aca-83a0fb1f97e2', created='2022-08-29T19:13:57.323494Z', modified='2022-08-29T19:13:57.323494Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--46c753bf-b3dc-430a-acb5-c2dc0681fe98', created='2022-08-29T19:11:44.034763Z', modified='2022-08-29T19:11:44.034763Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--0cb13a0a-7806-44f6-8462-dc76d17a268e', created='2022-08-29T19:13:57.326743Z', modified='2022-08-29T19:13:57.326743Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--f706a1f6-18b7-4327-99be-7207d21f039b', created='2022-08-29T19:11:44.035155Z', modified='2022-08-29T19:11:44.035155Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--ca37475f-2aaf-4844-82fa-b9c7f537171c', created='2022-08-29T19:13:57.325275Z', modified='2022-08-29T19:13:57.325275Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cff7bb63-646f-41b5-9331-cacc0e29f425', created='2022-08-29T19:11:44.036489Z', modified='2022-08-29T19:11:44.036489Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--166e15ba-fe10-4135-920d-4ec78d85ad2e', created='2022-08-29T19:13:57.330634Z', modified='2022-08-29T19:13:57.330634Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), Malware(type='malware', spec_version='2.1', id='malware--31c8472c-12e7-4cd5-8b4d-82ff143943e8', created='2022-08-29T19:11:44.055542Z', modified='2022-08-29T19:11:44.055542Z', name='trickbot', malware_types=['trojan'], is_family=True, revoked=False), Malware(type='malware', spec_version='2.1', id='malware--ac500f39-cd90-464d-84e5-a935657e2e85', created='2022-08-29T19:13:57.366543Z', modified='2022-08-29T19:13:57.366543Z', name='trickbot', malware_types=['trojan'], is_family=True, revoked=False)], 88: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--22470710-10ba-45f4-9d6e-4a7a379e85bc', created='2022-08-29T19:11:44.034248Z', modified='2022-08-29T19:11:44.034248Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--bfcb6d00-70cb-4586-9029-818aae5789fc', created='2022-08-29T19:13:57.324516Z', modified='2022-08-29T19:13:57.324516Z', name='Remote System Discovery MITRE T1018', description='Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network.  ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1018/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--22470710-10ba-45f4-9d6e-4a7a379e85bc', created='2022-08-29T19:11:44.034248Z', modified='2022-08-29T19:11:44.034248Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--656307a0-7a8f-443c-8943-e21250cd287e', created='2022-08-29T19:13:57.331436Z', modified='2022-08-29T19:13:57.331436Z', name='PowerShell MITRE T1059', description="Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--f706a1f6-18b7-4327-99be-7207d21f039b', created='2022-08-29T19:11:44.035155Z', modified='2022-08-29T19:11:44.035155Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--7a568a6d-4c10-4afb-9c48-4adaa57ede38', created='2022-08-29T19:13:57.326006Z', modified='2022-08-29T19:13:57.326006Z', name='Non-Application Layer Protocol MITRE T1095', description='Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1095/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--f706a1f6-18b7-4327-99be-7207d21f039b', created='2022-08-29T19:11:44.035155Z', modified='2022-08-29T19:11:44.035155Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--656307a0-7a8f-443c-8943-e21250cd287e', created='2022-08-29T19:13:57.331436Z', modified='2022-08-29T19:13:57.331436Z', name='PowerShell MITRE T1059', description="Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--56dec6c8-4bc6-4989-9ab8-9368ca73afab', created='2022-08-29T19:11:44.035521Z', modified='2022-08-29T19:11:44.035521Z', name='Native API MITRE T1106', description='Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1106/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--1cda628f-173e-4c34-83e7-9fd04d9c1191', created='2022-08-29T19:13:57.3275Z', modified='2022-08-29T19:13:57.3275Z', name='Scripting MITRE T1064', description='This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1064/')])], 93: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--22470710-10ba-45f4-9d6e-4a7a379e85bc', created='2022-08-29T19:11:44.034248Z', modified='2022-08-29T19:11:44.034248Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--ca37475f-2aaf-4844-82fa-b9c7f537171c', created='2022-08-29T19:13:57.325275Z', modified='2022-08-29T19:13:57.325275Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--f706a1f6-18b7-4327-99be-7207d21f039b', created='2022-08-29T19:11:44.035155Z', modified='2022-08-29T19:11:44.035155Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--dc55d93e-5c77-4ed7-8aca-83a0fb1f97e2', created='2022-08-29T19:13:57.323494Z', modified='2022-08-29T19:13:57.323494Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--f706a1f6-18b7-4327-99be-7207d21f039b', created='2022-08-29T19:11:44.035155Z', modified='2022-08-29T19:11:44.035155Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--bfcb6d00-70cb-4586-9029-818aae5789fc', created='2022-08-29T19:13:57.324516Z', modified='2022-08-29T19:13:57.324516Z', name='Remote System Discovery MITRE T1018', description='Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network.  ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1018/')])], 89: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--22470710-10ba-45f4-9d6e-4a7a379e85bc', created='2022-08-29T19:11:44.034248Z', modified='2022-08-29T19:11:44.034248Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--7a568a6d-4c10-4afb-9c48-4adaa57ede38', created='2022-08-29T19:13:57.326006Z', modified='2022-08-29T19:13:57.326006Z', name='Non-Application Layer Protocol MITRE T1095', description='Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1095/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--22470710-10ba-45f4-9d6e-4a7a379e85bc', created='2022-08-29T19:11:44.034248Z', modified='2022-08-29T19:11:44.034248Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--166e15ba-fe10-4135-920d-4ec78d85ad2e', created='2022-08-29T19:13:57.330634Z', modified='2022-08-29T19:13:57.330634Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--46c753bf-b3dc-430a-acb5-c2dc0681fe98', created='2022-08-29T19:11:44.034763Z', modified='2022-08-29T19:11:44.034763Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5370cf37-a6ab-45a6-a7c1-6592dc3c4434', created='2022-08-29T19:13:57.328512Z', modified='2022-08-29T19:13:57.328512Z', name='Application Window Discovery MITRE T1010', description='Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1010/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--f706a1f6-18b7-4327-99be-7207d21f039b', created='2022-08-29T19:11:44.035155Z', modified='2022-08-29T19:11:44.035155Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--166e15ba-fe10-4135-920d-4ec78d85ad2e', created='2022-08-29T19:13:57.330634Z', modified='2022-08-29T19:13:57.330634Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cff7bb63-646f-41b5-9331-cacc0e29f425', created='2022-08-29T19:11:44.036489Z', modified='2022-08-29T19:11:44.036489Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--dc55d93e-5c77-4ed7-8aca-83a0fb1f97e2', created='2022-08-29T19:13:57.323494Z', modified='2022-08-29T19:13:57.323494Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cff7bb63-646f-41b5-9331-cacc0e29f425', created='2022-08-29T19:11:44.036489Z', modified='2022-08-29T19:11:44.036489Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--ca37475f-2aaf-4844-82fa-b9c7f537171c', created='2022-08-29T19:13:57.325275Z', modified='2022-08-29T19:13:57.325275Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cff7bb63-646f-41b5-9331-cacc0e29f425', created='2022-08-29T19:11:44.036489Z', modified='2022-08-29T19:11:44.036489Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5370cf37-a6ab-45a6-a7c1-6592dc3c4434', created='2022-08-29T19:13:57.328512Z', modified='2022-08-29T19:13:57.328512Z', name='Application Window Discovery MITRE T1010', description='Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1010/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--4a420032-a2c4-44fa-b960-37ec86805e4e', created='2022-08-29T19:11:44.038214Z', modified='2022-08-29T19:11:44.038214Z', name='System Information Discovery MITRE T1082', description='An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information. System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1082/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--ca37475f-2aaf-4844-82fa-b9c7f537171c', created='2022-08-29T19:13:57.325275Z', modified='2022-08-29T19:13:57.325275Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')])], 84: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--22470710-10ba-45f4-9d6e-4a7a379e85bc', created='2022-08-29T19:11:44.034248Z', modified='2022-08-29T19:11:44.034248Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--0cb13a0a-7806-44f6-8462-dc76d17a268e', created='2022-08-29T19:13:57.326743Z', modified='2022-08-29T19:13:57.326743Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--22470710-10ba-45f4-9d6e-4a7a379e85bc', created='2022-08-29T19:11:44.034248Z', modified='2022-08-29T19:11:44.034248Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5370cf37-a6ab-45a6-a7c1-6592dc3c4434', created='2022-08-29T19:13:57.328512Z', modified='2022-08-29T19:13:57.328512Z', name='Application Window Discovery MITRE T1010', description='Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1010/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--46c753bf-b3dc-430a-acb5-c2dc0681fe98', created='2022-08-29T19:11:44.034763Z', modified='2022-08-29T19:11:44.034763Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--dc55d93e-5c77-4ed7-8aca-83a0fb1f97e2', created='2022-08-29T19:13:57.323494Z', modified='2022-08-29T19:13:57.323494Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--46c753bf-b3dc-430a-acb5-c2dc0681fe98', created='2022-08-29T19:11:44.034763Z', modified='2022-08-29T19:11:44.034763Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--7a568a6d-4c10-4afb-9c48-4adaa57ede38', created='2022-08-29T19:13:57.326006Z', modified='2022-08-29T19:13:57.326006Z', name='Non-Application Layer Protocol MITRE T1095', description='Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1095/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--56dec6c8-4bc6-4989-9ab8-9368ca73afab', created='2022-08-29T19:11:44.035521Z', modified='2022-08-29T19:11:44.035521Z', name='Native API MITRE T1106', description='Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1106/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5370cf37-a6ab-45a6-a7c1-6592dc3c4434', created='2022-08-29T19:13:57.328512Z', modified='2022-08-29T19:13:57.328512Z', name='Application Window Discovery MITRE T1010', description='Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1010/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--562af082-b017-4688-9441-439b09541341', created='2022-08-29T19:11:44.036084Z', modified='2022-08-29T19:11:44.036084Z', name='Security Software Discovery MITRE T1518', description='Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1518/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--7a568a6d-4c10-4afb-9c48-4adaa57ede38', created='2022-08-29T19:13:57.326006Z', modified='2022-08-29T19:13:57.326006Z', name='Non-Application Layer Protocol MITRE T1095', description='Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1095/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--562af082-b017-4688-9441-439b09541341', created='2022-08-29T19:11:44.036084Z', modified='2022-08-29T19:11:44.036084Z', name='Security Software Discovery MITRE T1518', description='Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1518/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--1cda628f-173e-4c34-83e7-9fd04d9c1191', created='2022-08-29T19:13:57.3275Z', modified='2022-08-29T19:13:57.3275Z', name='Scripting MITRE T1064', description='This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1064/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--562af082-b017-4688-9441-439b09541341', created='2022-08-29T19:11:44.036084Z', modified='2022-08-29T19:11:44.036084Z', name='Security Software Discovery MITRE T1518', description='Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1518/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--656307a0-7a8f-443c-8943-e21250cd287e', created='2022-08-29T19:13:57.331436Z', modified='2022-08-29T19:13:57.331436Z', name='PowerShell MITRE T1059', description="Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cff7bb63-646f-41b5-9331-cacc0e29f425', created='2022-08-29T19:11:44.036489Z', modified='2022-08-29T19:11:44.036489Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--2f04de30-2a24-4aed-ac85-9e72f7d5be04', created='2022-08-29T19:13:57.329874Z', modified='2022-08-29T19:13:57.329874Z', name='Command and Scripting Interpreter MITRE T1059', description='Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cca419f1-98fa-46ae-8da3-180f684f141a', created='2022-08-29T19:11:44.036905Z', modified='2022-08-29T19:11:44.036905Z', name='Disable or Modify Tools MITRE T1562', description='Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1562/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--7a568a6d-4c10-4afb-9c48-4adaa57ede38', created='2022-08-29T19:13:57.326006Z', modified='2022-08-29T19:13:57.326006Z', name='Non-Application Layer Protocol MITRE T1095', description='Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1095/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5630f98c-ff1b-450c-9c19-d5d671d941e7', created='2022-08-29T19:11:44.037777Z', modified='2022-08-29T19:11:44.037777Z', name='Encrypted Channel MITRE T1573', description='Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1573/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--dc55d93e-5c77-4ed7-8aca-83a0fb1f97e2', created='2022-08-29T19:13:57.323494Z', modified='2022-08-29T19:13:57.323494Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5630f98c-ff1b-450c-9c19-d5d671d941e7', created='2022-08-29T19:11:44.037777Z', modified='2022-08-29T19:11:44.037777Z', name='Encrypted Channel MITRE T1573', description='Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1573/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--7a568a6d-4c10-4afb-9c48-4adaa57ede38', created='2022-08-29T19:13:57.326006Z', modified='2022-08-29T19:13:57.326006Z', name='Non-Application Layer Protocol MITRE T1095', description='Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1095/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5630f98c-ff1b-450c-9c19-d5d671d941e7', created='2022-08-29T19:11:44.037777Z', modified='2022-08-29T19:11:44.037777Z', name='Encrypted Channel MITRE T1573', description='Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1573/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5370cf37-a6ab-45a6-a7c1-6592dc3c4434', created='2022-08-29T19:13:57.328512Z', modified='2022-08-29T19:13:57.328512Z', name='Application Window Discovery MITRE T1010', description='Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1010/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5630f98c-ff1b-450c-9c19-d5d671d941e7', created='2022-08-29T19:11:44.037777Z', modified='2022-08-29T19:11:44.037777Z', name='Encrypted Channel MITRE T1573', description='Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1573/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--166e15ba-fe10-4135-920d-4ec78d85ad2e', created='2022-08-29T19:13:57.330634Z', modified='2022-08-29T19:13:57.330634Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--4a420032-a2c4-44fa-b960-37ec86805e4e', created='2022-08-29T19:11:44.038214Z', modified='2022-08-29T19:11:44.038214Z', name='System Information Discovery MITRE T1082', description='An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information. System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1082/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--7a568a6d-4c10-4afb-9c48-4adaa57ede38', created='2022-08-29T19:13:57.326006Z', modified='2022-08-29T19:13:57.326006Z', name='Non-Application Layer Protocol MITRE T1095', description='Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1095/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--4a420032-a2c4-44fa-b960-37ec86805e4e', created='2022-08-29T19:11:44.038214Z', modified='2022-08-29T19:11:44.038214Z', name='System Information Discovery MITRE T1082', description='An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information. System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1082/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5370cf37-a6ab-45a6-a7c1-6592dc3c4434', created='2022-08-29T19:13:57.328512Z', modified='2022-08-29T19:13:57.328512Z', name='Application Window Discovery MITRE T1010', description='Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1010/')])], 83: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--22470710-10ba-45f4-9d6e-4a7a379e85bc', created='2022-08-29T19:11:44.034248Z', modified='2022-08-29T19:11:44.034248Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--1cda628f-173e-4c34-83e7-9fd04d9c1191', created='2022-08-29T19:13:57.3275Z', modified='2022-08-29T19:13:57.3275Z', name='Scripting MITRE T1064', description='This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1064/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--46c753bf-b3dc-430a-acb5-c2dc0681fe98', created='2022-08-29T19:11:44.034763Z', modified='2022-08-29T19:11:44.034763Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--1cda628f-173e-4c34-83e7-9fd04d9c1191', created='2022-08-29T19:13:57.3275Z', modified='2022-08-29T19:13:57.3275Z', name='Scripting MITRE T1064', description='This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1064/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--f706a1f6-18b7-4327-99be-7207d21f039b', created='2022-08-29T19:11:44.035155Z', modified='2022-08-29T19:11:44.035155Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--1cda628f-173e-4c34-83e7-9fd04d9c1191', created='2022-08-29T19:13:57.3275Z', modified='2022-08-29T19:13:57.3275Z', name='Scripting MITRE T1064', description='This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1064/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--56dec6c8-4bc6-4989-9ab8-9368ca73afab', created='2022-08-29T19:11:44.035521Z', modified='2022-08-29T19:11:44.035521Z', name='Native API MITRE T1106', description='Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1106/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--0cb13a0a-7806-44f6-8462-dc76d17a268e', created='2022-08-29T19:13:57.326743Z', modified='2022-08-29T19:13:57.326743Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--56dec6c8-4bc6-4989-9ab8-9368ca73afab', created='2022-08-29T19:11:44.035521Z', modified='2022-08-29T19:11:44.035521Z', name='Native API MITRE T1106', description='Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1106/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--2f04de30-2a24-4aed-ac85-9e72f7d5be04', created='2022-08-29T19:13:57.329874Z', modified='2022-08-29T19:13:57.329874Z', name='Command and Scripting Interpreter MITRE T1059', description='Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cff7bb63-646f-41b5-9331-cacc0e29f425', created='2022-08-29T19:11:44.036489Z', modified='2022-08-29T19:11:44.036489Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--656307a0-7a8f-443c-8943-e21250cd287e', created='2022-08-29T19:13:57.331436Z', modified='2022-08-29T19:13:57.331436Z', name='PowerShell MITRE T1059', description="Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cca419f1-98fa-46ae-8da3-180f684f141a', created='2022-08-29T19:11:44.036905Z', modified='2022-08-29T19:11:44.036905Z', name='Disable or Modify Tools MITRE T1562', description='Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1562/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--dc55d93e-5c77-4ed7-8aca-83a0fb1f97e2', created='2022-08-29T19:13:57.323494Z', modified='2022-08-29T19:13:57.323494Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cca419f1-98fa-46ae-8da3-180f684f141a', created='2022-08-29T19:11:44.036905Z', modified='2022-08-29T19:11:44.036905Z', name='Disable or Modify Tools MITRE T1562', description='Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1562/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--166e15ba-fe10-4135-920d-4ec78d85ad2e', created='2022-08-29T19:13:57.330634Z', modified='2022-08-29T19:13:57.330634Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cca419f1-98fa-46ae-8da3-180f684f141a', created='2022-08-29T19:11:44.036905Z', modified='2022-08-29T19:11:44.036905Z', name='Disable or Modify Tools MITRE T1562', description='Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1562/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--656307a0-7a8f-443c-8943-e21250cd287e', created='2022-08-29T19:13:57.331436Z', modified='2022-08-29T19:13:57.331436Z', name='PowerShell MITRE T1059', description="Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--89f200df-5826-498f-a3fc-5c4cea40b863', created='2022-08-29T19:11:44.037324Z', modified='2022-08-29T19:11:44.037324Z', name='Virtualization/Sandbox Evasion MITRE T1497', description='Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1497/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--dc55d93e-5c77-4ed7-8aca-83a0fb1f97e2', created='2022-08-29T19:13:57.323494Z', modified='2022-08-29T19:13:57.323494Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--89f200df-5826-498f-a3fc-5c4cea40b863', created='2022-08-29T19:11:44.037324Z', modified='2022-08-29T19:11:44.037324Z', name='Virtualization/Sandbox Evasion MITRE T1497', description='Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1497/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--7a568a6d-4c10-4afb-9c48-4adaa57ede38', created='2022-08-29T19:13:57.326006Z', modified='2022-08-29T19:13:57.326006Z', name='Non-Application Layer Protocol MITRE T1095', description='Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1095/')])], 85: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--22470710-10ba-45f4-9d6e-4a7a379e85bc', created='2022-08-29T19:11:44.034248Z', modified='2022-08-29T19:11:44.034248Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--2f04de30-2a24-4aed-ac85-9e72f7d5be04', created='2022-08-29T19:13:57.329874Z', modified='2022-08-29T19:13:57.329874Z', name='Command and Scripting Interpreter MITRE T1059', description='Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--46c753bf-b3dc-430a-acb5-c2dc0681fe98', created='2022-08-29T19:11:44.034763Z', modified='2022-08-29T19:11:44.034763Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--2f04de30-2a24-4aed-ac85-9e72f7d5be04', created='2022-08-29T19:13:57.329874Z', modified='2022-08-29T19:13:57.329874Z', name='Command and Scripting Interpreter MITRE T1059', description='Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--46c753bf-b3dc-430a-acb5-c2dc0681fe98', created='2022-08-29T19:11:44.034763Z', modified='2022-08-29T19:11:44.034763Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--166e15ba-fe10-4135-920d-4ec78d85ad2e', created='2022-08-29T19:13:57.330634Z', modified='2022-08-29T19:13:57.330634Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--f706a1f6-18b7-4327-99be-7207d21f039b', created='2022-08-29T19:11:44.035155Z', modified='2022-08-29T19:11:44.035155Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--2f04de30-2a24-4aed-ac85-9e72f7d5be04', created='2022-08-29T19:13:57.329874Z', modified='2022-08-29T19:13:57.329874Z', name='Command and Scripting Interpreter MITRE T1059', description='Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--56dec6c8-4bc6-4989-9ab8-9368ca73afab', created='2022-08-29T19:11:44.035521Z', modified='2022-08-29T19:11:44.035521Z', name='Native API MITRE T1106', description='Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1106/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--dc55d93e-5c77-4ed7-8aca-83a0fb1f97e2', created='2022-08-29T19:13:57.323494Z', modified='2022-08-29T19:13:57.323494Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--56dec6c8-4bc6-4989-9ab8-9368ca73afab', created='2022-08-29T19:11:44.035521Z', modified='2022-08-29T19:11:44.035521Z', name='Native API MITRE T1106', description='Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1106/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--bfcb6d00-70cb-4586-9029-818aae5789fc', created='2022-08-29T19:13:57.324516Z', modified='2022-08-29T19:13:57.324516Z', name='Remote System Discovery MITRE T1018', description='Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network.  ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1018/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--56dec6c8-4bc6-4989-9ab8-9368ca73afab', created='2022-08-29T19:11:44.035521Z', modified='2022-08-29T19:11:44.035521Z', name='Native API MITRE T1106', description='Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1106/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--ca37475f-2aaf-4844-82fa-b9c7f537171c', created='2022-08-29T19:13:57.325275Z', modified='2022-08-29T19:13:57.325275Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--56dec6c8-4bc6-4989-9ab8-9368ca73afab', created='2022-08-29T19:11:44.035521Z', modified='2022-08-29T19:11:44.035521Z', name='Native API MITRE T1106', description='Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1106/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--7a568a6d-4c10-4afb-9c48-4adaa57ede38', created='2022-08-29T19:13:57.326006Z', modified='2022-08-29T19:13:57.326006Z', name='Non-Application Layer Protocol MITRE T1095', description='Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1095/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--56dec6c8-4bc6-4989-9ab8-9368ca73afab', created='2022-08-29T19:11:44.035521Z', modified='2022-08-29T19:11:44.035521Z', name='Native API MITRE T1106', description='Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1106/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--166e15ba-fe10-4135-920d-4ec78d85ad2e', created='2022-08-29T19:13:57.330634Z', modified='2022-08-29T19:13:57.330634Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--56dec6c8-4bc6-4989-9ab8-9368ca73afab', created='2022-08-29T19:11:44.035521Z', modified='2022-08-29T19:11:44.035521Z', name='Native API MITRE T1106', description='Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1106/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--656307a0-7a8f-443c-8943-e21250cd287e', created='2022-08-29T19:13:57.331436Z', modified='2022-08-29T19:13:57.331436Z', name='PowerShell MITRE T1059', description="Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--562af082-b017-4688-9441-439b09541341', created='2022-08-29T19:11:44.036084Z', modified='2022-08-29T19:11:44.036084Z', name='Security Software Discovery MITRE T1518', description='Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1518/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--dc55d93e-5c77-4ed7-8aca-83a0fb1f97e2', created='2022-08-29T19:13:57.323494Z', modified='2022-08-29T19:13:57.323494Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--562af082-b017-4688-9441-439b09541341', created='2022-08-29T19:11:44.036084Z', modified='2022-08-29T19:11:44.036084Z', name='Security Software Discovery MITRE T1518', description='Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1518/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5370cf37-a6ab-45a6-a7c1-6592dc3c4434', created='2022-08-29T19:13:57.328512Z', modified='2022-08-29T19:13:57.328512Z', name='Application Window Discovery MITRE T1010', description='Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1010/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--562af082-b017-4688-9441-439b09541341', created='2022-08-29T19:11:44.036084Z', modified='2022-08-29T19:11:44.036084Z', name='Security Software Discovery MITRE T1518', description='Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1518/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--2f04de30-2a24-4aed-ac85-9e72f7d5be04', created='2022-08-29T19:13:57.329874Z', modified='2022-08-29T19:13:57.329874Z', name='Command and Scripting Interpreter MITRE T1059', description='Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--562af082-b017-4688-9441-439b09541341', created='2022-08-29T19:11:44.036084Z', modified='2022-08-29T19:11:44.036084Z', name='Security Software Discovery MITRE T1518', description='Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1518/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--166e15ba-fe10-4135-920d-4ec78d85ad2e', created='2022-08-29T19:13:57.330634Z', modified='2022-08-29T19:13:57.330634Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cff7bb63-646f-41b5-9331-cacc0e29f425', created='2022-08-29T19:11:44.036489Z', modified='2022-08-29T19:11:44.036489Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--0cb13a0a-7806-44f6-8462-dc76d17a268e', created='2022-08-29T19:13:57.326743Z', modified='2022-08-29T19:13:57.326743Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cca419f1-98fa-46ae-8da3-180f684f141a', created='2022-08-29T19:11:44.036905Z', modified='2022-08-29T19:11:44.036905Z', name='Disable or Modify Tools MITRE T1562', description='Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1562/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--bfcb6d00-70cb-4586-9029-818aae5789fc', created='2022-08-29T19:13:57.324516Z', modified='2022-08-29T19:13:57.324516Z', name='Remote System Discovery MITRE T1018', description='Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network.  ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1018/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cca419f1-98fa-46ae-8da3-180f684f141a', created='2022-08-29T19:11:44.036905Z', modified='2022-08-29T19:11:44.036905Z', name='Disable or Modify Tools MITRE T1562', description='Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1562/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--ca37475f-2aaf-4844-82fa-b9c7f537171c', created='2022-08-29T19:13:57.325275Z', modified='2022-08-29T19:13:57.325275Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5630f98c-ff1b-450c-9c19-d5d671d941e7', created='2022-08-29T19:11:44.037777Z', modified='2022-08-29T19:11:44.037777Z', name='Encrypted Channel MITRE T1573', description='Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1573/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--2f04de30-2a24-4aed-ac85-9e72f7d5be04', created='2022-08-29T19:13:57.329874Z', modified='2022-08-29T19:13:57.329874Z', name='Command and Scripting Interpreter MITRE T1059', description='Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--4a420032-a2c4-44fa-b960-37ec86805e4e', created='2022-08-29T19:11:44.038214Z', modified='2022-08-29T19:11:44.038214Z', name='System Information Discovery MITRE T1082', description='An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information. System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1082/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--2f04de30-2a24-4aed-ac85-9e72f7d5be04', created='2022-08-29T19:13:57.329874Z', modified='2022-08-29T19:13:57.329874Z', name='Command and Scripting Interpreter MITRE T1059', description='Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--4a420032-a2c4-44fa-b960-37ec86805e4e', created='2022-08-29T19:11:44.038214Z', modified='2022-08-29T19:11:44.038214Z', name='System Information Discovery MITRE T1082', description='An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information. System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1082/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--166e15ba-fe10-4135-920d-4ec78d85ad2e', created='2022-08-29T19:13:57.330634Z', modified='2022-08-29T19:13:57.330634Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')])], 87: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--46c753bf-b3dc-430a-acb5-c2dc0681fe98', created='2022-08-29T19:11:44.034763Z', modified='2022-08-29T19:11:44.034763Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--bfcb6d00-70cb-4586-9029-818aae5789fc', created='2022-08-29T19:13:57.324516Z', modified='2022-08-29T19:13:57.324516Z', name='Remote System Discovery MITRE T1018', description='Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network.  ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1018/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--46c753bf-b3dc-430a-acb5-c2dc0681fe98', created='2022-08-29T19:11:44.034763Z', modified='2022-08-29T19:11:44.034763Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--ca37475f-2aaf-4844-82fa-b9c7f537171c', created='2022-08-29T19:13:57.325275Z', modified='2022-08-29T19:13:57.325275Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--f706a1f6-18b7-4327-99be-7207d21f039b', created='2022-08-29T19:11:44.035155Z', modified='2022-08-29T19:11:44.035155Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--0cb13a0a-7806-44f6-8462-dc76d17a268e', created='2022-08-29T19:13:57.326743Z', modified='2022-08-29T19:13:57.326743Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--f706a1f6-18b7-4327-99be-7207d21f039b', created='2022-08-29T19:11:44.035155Z', modified='2022-08-29T19:11:44.035155Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5370cf37-a6ab-45a6-a7c1-6592dc3c4434', created='2022-08-29T19:13:57.328512Z', modified='2022-08-29T19:13:57.328512Z', name='Application Window Discovery MITRE T1010', description='Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1010/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--4a420032-a2c4-44fa-b960-37ec86805e4e', created='2022-08-29T19:11:44.038214Z', modified='2022-08-29T19:11:44.038214Z', name='System Information Discovery MITRE T1082', description='An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information. System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1082/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--dc55d93e-5c77-4ed7-8aca-83a0fb1f97e2', created='2022-08-29T19:13:57.323494Z', modified='2022-08-29T19:13:57.323494Z', name='Process Injection MITRE T1055', description="Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1055/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--4a420032-a2c4-44fa-b960-37ec86805e4e', created='2022-08-29T19:11:44.038214Z', modified='2022-08-29T19:11:44.038214Z', name='System Information Discovery MITRE T1082', description='An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information. System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1082/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--0cb13a0a-7806-44f6-8462-dc76d17a268e', created='2022-08-29T19:13:57.326743Z', modified='2022-08-29T19:13:57.326743Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')])], 82: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--46c753bf-b3dc-430a-acb5-c2dc0681fe98', created='2022-08-29T19:11:44.034763Z', modified='2022-08-29T19:11:44.034763Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--656307a0-7a8f-443c-8943-e21250cd287e', created='2022-08-29T19:13:57.331436Z', modified='2022-08-29T19:13:57.331436Z', name='PowerShell MITRE T1059', description="Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cff7bb63-646f-41b5-9331-cacc0e29f425', created='2022-08-29T19:11:44.036489Z', modified='2022-08-29T19:11:44.036489Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--1cda628f-173e-4c34-83e7-9fd04d9c1191', created='2022-08-29T19:13:57.3275Z', modified='2022-08-29T19:13:57.3275Z', name='Scripting MITRE T1064', description='This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1064/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cca419f1-98fa-46ae-8da3-180f684f141a', created='2022-08-29T19:11:44.036905Z', modified='2022-08-29T19:11:44.036905Z', name='Disable or Modify Tools MITRE T1562', description='Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1562/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--1cda628f-173e-4c34-83e7-9fd04d9c1191', created='2022-08-29T19:13:57.3275Z', modified='2022-08-29T19:13:57.3275Z', name='Scripting MITRE T1064', description='This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1064/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cca419f1-98fa-46ae-8da3-180f684f141a', created='2022-08-29T19:11:44.036905Z', modified='2022-08-29T19:11:44.036905Z', name='Disable or Modify Tools MITRE T1562', description='Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1562/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5370cf37-a6ab-45a6-a7c1-6592dc3c4434', created='2022-08-29T19:13:57.328512Z', modified='2022-08-29T19:13:57.328512Z', name='Application Window Discovery MITRE T1010', description='Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1010/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cca419f1-98fa-46ae-8da3-180f684f141a', created='2022-08-29T19:11:44.036905Z', modified='2022-08-29T19:11:44.036905Z', name='Disable or Modify Tools MITRE T1562', description='Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1562/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--2f04de30-2a24-4aed-ac85-9e72f7d5be04', created='2022-08-29T19:13:57.329874Z', modified='2022-08-29T19:13:57.329874Z', name='Command and Scripting Interpreter MITRE T1059', description='Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--89f200df-5826-498f-a3fc-5c4cea40b863', created='2022-08-29T19:11:44.037324Z', modified='2022-08-29T19:11:44.037324Z', name='Virtualization/Sandbox Evasion MITRE T1497', description='Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1497/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--ca37475f-2aaf-4844-82fa-b9c7f537171c', created='2022-08-29T19:13:57.325275Z', modified='2022-08-29T19:13:57.325275Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--89f200df-5826-498f-a3fc-5c4cea40b863', created='2022-08-29T19:11:44.037324Z', modified='2022-08-29T19:11:44.037324Z', name='Virtualization/Sandbox Evasion MITRE T1497', description='Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1497/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5370cf37-a6ab-45a6-a7c1-6592dc3c4434', created='2022-08-29T19:13:57.328512Z', modified='2022-08-29T19:13:57.328512Z', name='Application Window Discovery MITRE T1010', description='Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1010/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--89f200df-5826-498f-a3fc-5c4cea40b863', created='2022-08-29T19:11:44.037324Z', modified='2022-08-29T19:11:44.037324Z', name='Virtualization/Sandbox Evasion MITRE T1497', description='Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1497/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--166e15ba-fe10-4135-920d-4ec78d85ad2e', created='2022-08-29T19:13:57.330634Z', modified='2022-08-29T19:13:57.330634Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5630f98c-ff1b-450c-9c19-d5d671d941e7', created='2022-08-29T19:11:44.037777Z', modified='2022-08-29T19:11:44.037777Z', name='Encrypted Channel MITRE T1573', description='Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1573/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--bfcb6d00-70cb-4586-9029-818aae5789fc', created='2022-08-29T19:13:57.324516Z', modified='2022-08-29T19:13:57.324516Z', name='Remote System Discovery MITRE T1018', description='Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network.  ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1018/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5630f98c-ff1b-450c-9c19-d5d671d941e7', created='2022-08-29T19:11:44.037777Z', modified='2022-08-29T19:11:44.037777Z', name='Encrypted Channel MITRE T1573', description='Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1573/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--1cda628f-173e-4c34-83e7-9fd04d9c1191', created='2022-08-29T19:13:57.3275Z', modified='2022-08-29T19:13:57.3275Z', name='Scripting MITRE T1064', description='This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1064/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5630f98c-ff1b-450c-9c19-d5d671d941e7', created='2022-08-29T19:11:44.037777Z', modified='2022-08-29T19:11:44.037777Z', name='Encrypted Channel MITRE T1573', description='Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1573/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--656307a0-7a8f-443c-8943-e21250cd287e', created='2022-08-29T19:13:57.331436Z', modified='2022-08-29T19:13:57.331436Z', name='PowerShell MITRE T1059', description="Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--4a420032-a2c4-44fa-b960-37ec86805e4e', created='2022-08-29T19:11:44.038214Z', modified='2022-08-29T19:11:44.038214Z', name='System Information Discovery MITRE T1082', description='An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information. System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1082/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--1cda628f-173e-4c34-83e7-9fd04d9c1191', created='2022-08-29T19:13:57.3275Z', modified='2022-08-29T19:13:57.3275Z', name='Scripting MITRE T1064', description='This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1064/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--4a420032-a2c4-44fa-b960-37ec86805e4e', created='2022-08-29T19:11:44.038214Z', modified='2022-08-29T19:11:44.038214Z', name='System Information Discovery MITRE T1082', description='An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information. System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1082/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--656307a0-7a8f-443c-8943-e21250cd287e', created='2022-08-29T19:13:57.331436Z', modified='2022-08-29T19:13:57.331436Z', name='PowerShell MITRE T1059', description="Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/001/')])], 92: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--562af082-b017-4688-9441-439b09541341', created='2022-08-29T19:11:44.036084Z', modified='2022-08-29T19:11:44.036084Z', name='Security Software Discovery MITRE T1518', description='Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1518/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--bfcb6d00-70cb-4586-9029-818aae5789fc', created='2022-08-29T19:13:57.324516Z', modified='2022-08-29T19:13:57.324516Z', name='Remote System Discovery MITRE T1018', description='Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network.  ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1018/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--4a420032-a2c4-44fa-b960-37ec86805e4e', created='2022-08-29T19:11:44.038214Z', modified='2022-08-29T19:11:44.038214Z', name='System Information Discovery MITRE T1082', description='An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information. System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1082/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--bfcb6d00-70cb-4586-9029-818aae5789fc', created='2022-08-29T19:13:57.324516Z', modified='2022-08-29T19:13:57.324516Z', name='Remote System Discovery MITRE T1018', description='Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network.  ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1018/')])], 90: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--562af082-b017-4688-9441-439b09541341', created='2022-08-29T19:11:44.036084Z', modified='2022-08-29T19:11:44.036084Z', name='Security Software Discovery MITRE T1518', description='Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1518/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--ca37475f-2aaf-4844-82fa-b9c7f537171c', created='2022-08-29T19:13:57.325275Z', modified='2022-08-29T19:13:57.325275Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')])], 86: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--562af082-b017-4688-9441-439b09541341', created='2022-08-29T19:11:44.036084Z', modified='2022-08-29T19:11:44.036084Z', name='Security Software Discovery MITRE T1518', description='Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1518/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--0cb13a0a-7806-44f6-8462-dc76d17a268e', created='2022-08-29T19:13:57.326743Z', modified='2022-08-29T19:13:57.326743Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cff7bb63-646f-41b5-9331-cacc0e29f425', created='2022-08-29T19:11:44.036489Z', modified='2022-08-29T19:11:44.036489Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--bfcb6d00-70cb-4586-9029-818aae5789fc', created='2022-08-29T19:13:57.324516Z', modified='2022-08-29T19:13:57.324516Z', name='Remote System Discovery MITRE T1018', description='Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network.  ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1018/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5630f98c-ff1b-450c-9c19-d5d671d941e7', created='2022-08-29T19:11:44.037777Z', modified='2022-08-29T19:11:44.037777Z', name='Encrypted Channel MITRE T1573', description='Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1573/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--ca37475f-2aaf-4844-82fa-b9c7f537171c', created='2022-08-29T19:13:57.325275Z', modified='2022-08-29T19:13:57.325275Z', name='Process Discovery MITRE T1057', description='Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1057/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--5630f98c-ff1b-450c-9c19-d5d671d941e7', created='2022-08-29T19:11:44.037777Z', modified='2022-08-29T19:11:44.037777Z', name='Encrypted Channel MITRE T1573', description='Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1573/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--0cb13a0a-7806-44f6-8462-dc76d17a268e', created='2022-08-29T19:13:57.326743Z', modified='2022-08-29T19:13:57.326743Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')])], 97: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cff7bb63-646f-41b5-9331-cacc0e29f425', created='2022-08-29T19:11:44.036489Z', modified='2022-08-29T19:11:44.036489Z', name='Application Layer Protocol MITRE T1071', description='Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1071/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--7a568a6d-4c10-4afb-9c48-4adaa57ede38', created='2022-08-29T19:13:57.326006Z', modified='2022-08-29T19:13:57.326006Z', name='Non-Application Layer Protocol MITRE T1095', description='Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1095/')])], 81: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--cca419f1-98fa-46ae-8da3-180f684f141a', created='2022-08-29T19:11:44.036905Z', modified='2022-08-29T19:11:44.036905Z', name='Disable or Modify Tools MITRE T1562', description='Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1562/001/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--0cb13a0a-7806-44f6-8462-dc76d17a268e', created='2022-08-29T19:13:57.326743Z', modified='2022-08-29T19:13:57.326743Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--89f200df-5826-498f-a3fc-5c4cea40b863', created='2022-08-29T19:11:44.037324Z', modified='2022-08-29T19:11:44.037324Z', name='Virtualization/Sandbox Evasion MITRE T1497', description='Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1497/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--bfcb6d00-70cb-4586-9029-818aae5789fc', created='2022-08-29T19:13:57.324516Z', modified='2022-08-29T19:13:57.324516Z', name='Remote System Discovery MITRE T1018', description='Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network.  ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1018/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--89f200df-5826-498f-a3fc-5c4cea40b863', created='2022-08-29T19:11:44.037324Z', modified='2022-08-29T19:11:44.037324Z', name='Virtualization/Sandbox Evasion MITRE T1497', description='Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1497/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--1cda628f-173e-4c34-83e7-9fd04d9c1191', created='2022-08-29T19:13:57.3275Z', modified='2022-08-29T19:13:57.3275Z', name='Scripting MITRE T1064', description='This technique has been deprecated. Please use Command and Scripting Interpreter where appropriate.\nAdversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macros being allowed or that the user will accept to activate them.\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit , Veil , and PowerSploit  are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. ', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1064/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--89f200df-5826-498f-a3fc-5c4cea40b863', created='2022-08-29T19:11:44.037324Z', modified='2022-08-29T19:11:44.037324Z', name='Virtualization/Sandbox Evasion MITRE T1497', description='Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1497/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--2f04de30-2a24-4aed-ac85-9e72f7d5be04', created='2022-08-29T19:13:57.329874Z', modified='2022-08-29T19:13:57.329874Z', name='Command and Scripting Interpreter MITRE T1059', description='Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/')])], 80: [AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--89f200df-5826-498f-a3fc-5c4cea40b863', created='2022-08-29T19:11:44.037324Z', modified='2022-08-29T19:11:44.037324Z', name='Virtualization/Sandbox Evasion MITRE T1497', description='Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1497/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--0cb13a0a-7806-44f6-8462-dc76d17a268e', created='2022-08-29T19:13:57.326743Z', modified='2022-08-29T19:13:57.326743Z', name='File and Directory Discovery MITRE T1083', description='Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1083/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--89f200df-5826-498f-a3fc-5c4cea40b863', created='2022-08-29T19:11:44.037324Z', modified='2022-08-29T19:11:44.037324Z', name='Virtualization/Sandbox Evasion MITRE T1497', description='Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.', revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1497/')]), AttackPattern(type='attack-pattern', spec_version='2.1', id='attack-pattern--656307a0-7a8f-443c-8943-e21250cd287e', created='2022-08-29T19:13:57.331436Z', modified='2022-08-29T19:13:57.331436Z', name='PowerShell MITRE T1059', description="Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", revoked=False, external_references=[ExternalReference(source_name='MITRE ATT&CK', url='https://attack.mitre.org/techniques/T1059/001/')])]}
Ignoring relationships, the percentage of similar nodes in the graph is 0.20736434108527133
