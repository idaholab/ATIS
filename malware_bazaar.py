import json
from time import sleep
import requests
from graph_generation import generate_graph
from utilities import writeToFile
from stix2.v21 import Identity, Report, Relationship, Malware
import variables

def search_by_signature(signature, limit=250):
    try:
        data = {
            "query": "get_siginfo",
            "signature": signature,
            "limit": limit
        }
        res = requests.post(f"{variables.API_MBAZAAR_BASE_URL}", data=data)
        if res.status_code == 200:
            return 1, res.json()
        else:
            print(f">>>>not a good request\n{res.text}")
            if res.json()['error']['code']=='NotFoundError':
                print(">>>>>file not found in malware bazaar")
                return 0, "NOTFOUND"
    except Exception as e:
        print(f'ERROR Malware Bazaar API request exception: {str(e)} || signature={signature}')
        return -1, str(e)

def generate_graph_from_signature(signature, yara, MA, directory):
    status, reports = search_by_signature(signature)
    if status == 1:
        if "data" in reports:

            for file in reports["data"]:
                try:
                    reporter = file["reporter"]
                    identity = Identity(name=reporter,identity_class="individual")
                    
                    file_hash = file["sha256_hash"]
                    print(f"Searching for hash: {file_hash}")
                    objects = (generate_graph(file_hash, yara, MA))

                    malware_types = []

                    report_object_refs = []
                    for obj in objects:
                        if obj.type == "malware":
                            report_object_refs.append(obj.id)
                            if hasattr(obj, "malware_types"):
                                malware_types += obj.malware_types
                    
                    published = file["first_seen"]
                    print(published)
                    published = published.replace(' ', 'T') + 'Z'

                    report = Report(
                        name="MalwareBazaar",
                        report_types=["malware"],
                        published=published,
                        object_refs=report_object_refs
                    )

                    malware_fam = Malware(
                        name=signature,
                        is_family=True,
                        malware_types=malware_types
                    )

                    objects.append(identity)
                    objects.append(report)
                    objects.append(malware_fam)
                    objects.append(Relationship(relationship_type="related-to", source_ref=identity.id, target_ref=report.id))
                    objects.append(Relationship(relationship_type="related-to", source_ref=malware_fam.id, target_ref=report.id))
                    for ref in report_object_refs:
                        objects.append(Relationship(relationship_type="variant-of", source_ref=ref, target_ref=malware_fam.id))
                    writeToFile(objects, f"{signature}_{file_hash}", directory)


                    if not variables.API_PREMIUM:
                        print("Sleeping to avoid hitting quota")
                        sleep(15.5)
                    
                except Exception as e:
                    print(str(e))
        else:
            print(f"Family '{signature}' not found")
