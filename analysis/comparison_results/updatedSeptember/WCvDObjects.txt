{'--help': False,
 '--version': False,
 '<campaign_name>': None,
 '<file_hash>': None,
 '<json_path>': 'analysis/comparison_results/updatedSeptember/stix_no_MA_DarksideVSstix_no_MA_WannaCry.json',
 '<json_path_1>': None,
 '<json_path_2>': None,
 '<output_directory>': None,
 '<report_file>': None,
 '<title>': None,
 'campaign': False,
 'clean': True,
 'compare': False,
 'generate': False,
 'heatmap': False,
 'many': False,
 'noYara': False,
 'single': False,
 'weights': False,
 'yara': False}
{'--help': False,
 '--version': False,
 '<campaign_name>': None,
 '<file_hash>': None,
 '<json_path>': 'analysis/comparison_results/updatedSeptember/stix_no_MA_DarksideVSstix_no_MA_WannaCry.json',
 '<json_path_1>': None,
 '<json_path_2>': None,
 '<output_directory>': None,
 '<report_file>': None,
 '<title>': None,
 'campaign': False,
 'clean': True,
 'compare': False,
 'generate': False,
 'heatmap': False,
 'many': False,
 'noYara': False,
 'single': False,
 'weights': False,
 'yara': False}
87
88
89
84
100
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d5d8447-fc67-4706-9112-d60aeeb7f28a", "created": "2021-09-13T19:10:19.449555Z", "modified": "2021-09-13T19:10:19.449555Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d9269f3-7cc8-47ac-81f7-8ac878cd2b34", "created": "2021-09-13T19:10:25.583669Z", "modified": "2021-09-13T19:10:25.583669Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d5c7aa47-f8ab-4ce4-8dd9-4bd6ae1fc001", "created": "2021-09-13T19:10:43.550991Z", "modified": "2021-09-13T19:10:43.550991Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9647af33-51ea-450e-bb76-786668688ef8", "created": "2021-09-13T19:11:01.100603Z", "modified": "2021-09-13T19:11:01.100603Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--97f80aab-b16f-43da-ae08-3e6344cf6a57", "created": "2021-09-13T19:11:07.627497Z", "modified": "2021-09-13T19:11:07.627497Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6470f15f-1a1d-4b11-b9e1-03ee9320e9bd", "created": "2021-09-13T19:11:13.157211Z", "modified": "2021-09-13T19:11:13.157211Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--296860b4-ea87-46eb-84ae-3c2ff484fea9", "created": "2021-09-13T19:11:16.694033Z", "modified": "2021-09-13T19:11:16.694033Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e249b3e-2a2a-4e91-b970-cb7248636d9e", "created": "2021-09-13T19:11:21.196303Z", "modified": "2021-09-13T19:11:21.196303Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7acc6e6d-f24b-4f35-8fdf-2082d8fda889", "created": "2021-09-13T19:11:51.948325Z", "modified": "2021-09-13T19:11:51.948325Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b63650b2-5036-4480-a675-e017fd97c91f", "created": "2021-09-13T19:12:16.833998Z", "modified": "2021-09-13T19:12:16.833998Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8a424ba3-cbd6-48e5-b535-975f2e2a7683", "created": "2021-09-13T19:07:23.604772Z", "modified": "2021-09-13T19:07:23.604772Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--049a0637-e87d-4414-abc0-190a18280e87", "created": "2021-09-13T19:07:23.605539Z", "modified": "2021-09-13T19:07:23.605539Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--049a0637-e87d-4414-abc0-190a18280e87", "created": "2021-09-13T19:07:23.605539Z", "modified": "2021-09-13T19:07:23.605539Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--049a0637-e87d-4414-abc0-190a18280e87", "created": "2021-09-13T19:07:23.605539Z", "modified": "2021-09-13T19:07:23.605539Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--049a0637-e87d-4414-abc0-190a18280e87", "created": "2021-09-13T19:07:23.605539Z", "modified": "2021-09-13T19:07:23.605539Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--049a0637-e87d-4414-abc0-190a18280e87", "created": "2021-09-13T19:07:23.605539Z", "modified": "2021-09-13T19:07:23.605539Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78d06e61-83b7-41e8-9983-6dd2bd756d62", "created": "2021-09-13T19:07:23.607077Z", "modified": "2021-09-13T19:07:23.607077Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78d06e61-83b7-41e8-9983-6dd2bd756d62", "created": "2021-09-13T19:07:23.607077Z", "modified": "2021-09-13T19:07:23.607077Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78d06e61-83b7-41e8-9983-6dd2bd756d62", "created": "2021-09-13T19:07:23.607077Z", "modified": "2021-09-13T19:07:23.607077Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78d06e61-83b7-41e8-9983-6dd2bd756d62", "created": "2021-09-13T19:07:23.607077Z", "modified": "2021-09-13T19:07:23.607077Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2fd4a46e-c4c3-4001-9224-e8ffa7dee9c6", "created": "2021-09-13T19:07:23.60784Z", "modified": "2021-09-13T19:07:23.60784Z", "name": "Windows Service MITRE T1543", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and Reg. \nAdversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.\nAn adversary may also incorporate Masquerading by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. \nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1543/003/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1473f98d-3322-42a8-8f27-04c52fd318a8", "created": "2021-09-13T19:11:51.951757Z", "modified": "2021-09-13T19:11:51.951757Z", "name": "Windows Service MITRE T1543", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and Reg. \nAdversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.\nAn adversary may also incorporate Masquerading by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. \nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1543/003/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d3424c98-4906-4d9b-b488-7a38af583f7b", "created": "2021-09-13T19:07:23.608597Z", "modified": "2021-09-13T19:07:23.608597Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d3424c98-4906-4d9b-b488-7a38af583f7b", "created": "2021-09-13T19:07:23.608597Z", "modified": "2021-09-13T19:07:23.608597Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d3424c98-4906-4d9b-b488-7a38af583f7b", "created": "2021-09-13T19:07:23.608597Z", "modified": "2021-09-13T19:07:23.608597Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--697dd2e6-e0df-4b55-9beb-740103b92028", "created": "2021-09-13T19:07:23.609355Z", "modified": "2021-09-13T19:07:23.609355Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--110d1cf8-b75d-4db8-a7a0-4ae32e911952", "created": "2021-09-13T19:07:23.610107Z", "modified": "2021-09-13T19:07:23.610107Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--110d1cf8-b75d-4db8-a7a0-4ae32e911952", "created": "2021-09-13T19:07:23.610107Z", "modified": "2021-09-13T19:07:23.610107Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--110d1cf8-b75d-4db8-a7a0-4ae32e911952", "created": "2021-09-13T19:07:23.610107Z", "modified": "2021-09-13T19:07:23.610107Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--110d1cf8-b75d-4db8-a7a0-4ae32e911952", "created": "2021-09-13T19:07:23.610107Z", "modified": "2021-09-13T19:07:23.610107Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--110d1cf8-b75d-4db8-a7a0-4ae32e911952", "created": "2021-09-13T19:07:23.610107Z", "modified": "2021-09-13T19:07:23.610107Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--def67f95-2330-48a3-ac5e-808f22836da1", "created": "2021-09-13T19:07:29.776205Z", "modified": "2021-09-13T19:07:29.776205Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--def67f95-2330-48a3-ac5e-808f22836da1", "created": "2021-09-13T19:07:29.776205Z", "modified": "2021-09-13T19:07:29.776205Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--def67f95-2330-48a3-ac5e-808f22836da1", "created": "2021-09-13T19:07:29.776205Z", "modified": "2021-09-13T19:07:29.776205Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--def67f95-2330-48a3-ac5e-808f22836da1", "created": "2021-09-13T19:07:29.776205Z", "modified": "2021-09-13T19:07:29.776205Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd04a694-bec8-446f-86fc-cdffc754dc15", "created": "2021-09-13T19:07:29.777161Z", "modified": "2021-09-13T19:07:29.777161Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e5f15dd-f3d5-439d-acbe-5c2cbd815061", "created": "2021-09-13T19:07:29.778098Z", "modified": "2021-09-13T19:07:29.778098Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e5f15dd-f3d5-439d-acbe-5c2cbd815061", "created": "2021-09-13T19:07:29.778098Z", "modified": "2021-09-13T19:07:29.778098Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e5f15dd-f3d5-439d-acbe-5c2cbd815061", "created": "2021-09-13T19:07:29.778098Z", "modified": "2021-09-13T19:07:29.778098Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e5f15dd-f3d5-439d-acbe-5c2cbd815061", "created": "2021-09-13T19:07:29.778098Z", "modified": "2021-09-13T19:07:29.778098Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e5f15dd-f3d5-439d-acbe-5c2cbd815061", "created": "2021-09-13T19:07:29.778098Z", "modified": "2021-09-13T19:07:29.778098Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8bed1d74-0be3-451b-b69e-53178df7debc", "created": "2021-09-13T19:07:29.778932Z", "modified": "2021-09-13T19:07:29.778932Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8bed1d74-0be3-451b-b69e-53178df7debc", "created": "2021-09-13T19:07:29.778932Z", "modified": "2021-09-13T19:07:29.778932Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8bed1d74-0be3-451b-b69e-53178df7debc", "created": "2021-09-13T19:07:29.778932Z", "modified": "2021-09-13T19:07:29.778932Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8bed1d74-0be3-451b-b69e-53178df7debc", "created": "2021-09-13T19:07:29.778932Z", "modified": "2021-09-13T19:07:29.778932Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2a1674f1-bd7a-4b03-be85-d4018f39afa7", "created": "2021-09-13T19:07:29.779382Z", "modified": "2021-09-13T19:07:29.779382Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2a1674f1-bd7a-4b03-be85-d4018f39afa7", "created": "2021-09-13T19:07:29.779382Z", "modified": "2021-09-13T19:07:29.779382Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2a1674f1-bd7a-4b03-be85-d4018f39afa7", "created": "2021-09-13T19:07:29.779382Z", "modified": "2021-09-13T19:07:29.779382Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f38d093-cf32-4b06-add4-dc9917f1c200", "created": "2021-09-13T19:07:29.779826Z", "modified": "2021-09-13T19:07:29.779826Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cde8ae8e-0307-43b5-9c96-0272b2b059b5", "created": "2021-09-13T19:07:29.780267Z", "modified": "2021-09-13T19:07:29.780267Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cde8ae8e-0307-43b5-9c96-0272b2b059b5", "created": "2021-09-13T19:07:29.780267Z", "modified": "2021-09-13T19:07:29.780267Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cde8ae8e-0307-43b5-9c96-0272b2b059b5", "created": "2021-09-13T19:07:29.780267Z", "modified": "2021-09-13T19:07:29.780267Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cde8ae8e-0307-43b5-9c96-0272b2b059b5", "created": "2021-09-13T19:07:29.780267Z", "modified": "2021-09-13T19:07:29.780267Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cde8ae8e-0307-43b5-9c96-0272b2b059b5", "created": "2021-09-13T19:07:29.780267Z", "modified": "2021-09-13T19:07:29.780267Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9e2d1a05-5f55-405d-8efd-25a63e8adb58", "created": "2021-09-13T19:07:35.729439Z", "modified": "2021-09-13T19:07:35.729439Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9e2d1a05-5f55-405d-8efd-25a63e8adb58", "created": "2021-09-13T19:07:35.729439Z", "modified": "2021-09-13T19:07:35.729439Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9e2d1a05-5f55-405d-8efd-25a63e8adb58", "created": "2021-09-13T19:07:35.729439Z", "modified": "2021-09-13T19:07:35.729439Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9e2d1a05-5f55-405d-8efd-25a63e8adb58", "created": "2021-09-13T19:07:35.729439Z", "modified": "2021-09-13T19:07:35.729439Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb8d955b-7924-4a6a-89cd-16a9523a0fcb", "created": "2021-09-13T19:07:35.730332Z", "modified": "2021-09-13T19:07:35.730332Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65f163ab-b54b-4418-83bd-0dcf9f7d41b4", "created": "2021-09-13T19:07:35.731228Z", "modified": "2021-09-13T19:07:35.731228Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65f163ab-b54b-4418-83bd-0dcf9f7d41b4", "created": "2021-09-13T19:07:35.731228Z", "modified": "2021-09-13T19:07:35.731228Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65f163ab-b54b-4418-83bd-0dcf9f7d41b4", "created": "2021-09-13T19:07:35.731228Z", "modified": "2021-09-13T19:07:35.731228Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65f163ab-b54b-4418-83bd-0dcf9f7d41b4", "created": "2021-09-13T19:07:35.731228Z", "modified": "2021-09-13T19:07:35.731228Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65f163ab-b54b-4418-83bd-0dcf9f7d41b4", "created": "2021-09-13T19:07:35.731228Z", "modified": "2021-09-13T19:07:35.731228Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ccec1381-74d3-4eeb-b30c-c25d03ab86a3", "created": "2021-09-13T19:07:35.732094Z", "modified": "2021-09-13T19:07:35.732094Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ccec1381-74d3-4eeb-b30c-c25d03ab86a3", "created": "2021-09-13T19:07:35.732094Z", "modified": "2021-09-13T19:07:35.732094Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ccec1381-74d3-4eeb-b30c-c25d03ab86a3", "created": "2021-09-13T19:07:35.732094Z", "modified": "2021-09-13T19:07:35.732094Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ccec1381-74d3-4eeb-b30c-c25d03ab86a3", "created": "2021-09-13T19:07:35.732094Z", "modified": "2021-09-13T19:07:35.732094Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e130ea-5235-4b5f-8d27-1473b4a86823", "created": "2021-09-13T19:07:35.732966Z", "modified": "2021-09-13T19:07:35.732966Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e130ea-5235-4b5f-8d27-1473b4a86823", "created": "2021-09-13T19:07:35.732966Z", "modified": "2021-09-13T19:07:35.732966Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e130ea-5235-4b5f-8d27-1473b4a86823", "created": "2021-09-13T19:07:35.732966Z", "modified": "2021-09-13T19:07:35.732966Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6bd44132-9a30-45f8-8ffb-7fea90d8436f", "created": "2021-09-13T19:07:35.733834Z", "modified": "2021-09-13T19:07:35.733834Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98261d78-1ea6-4a24-a1ed-0d17523feb0f", "created": "2021-09-13T19:07:35.734837Z", "modified": "2021-09-13T19:07:35.734837Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98261d78-1ea6-4a24-a1ed-0d17523feb0f", "created": "2021-09-13T19:07:35.734837Z", "modified": "2021-09-13T19:07:35.734837Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98261d78-1ea6-4a24-a1ed-0d17523feb0f", "created": "2021-09-13T19:07:35.734837Z", "modified": "2021-09-13T19:07:35.734837Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98261d78-1ea6-4a24-a1ed-0d17523feb0f", "created": "2021-09-13T19:07:35.734837Z", "modified": "2021-09-13T19:07:35.734837Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98261d78-1ea6-4a24-a1ed-0d17523feb0f", "created": "2021-09-13T19:07:35.734837Z", "modified": "2021-09-13T19:07:35.734837Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--ca4cce4e-29c8-5b5b-9ead-a0e41a9c70d5", "value": "20.190.155.65"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--ca4cce4e-29c8-5b5b-9ead-a0e41a9c70d5", "value": "20.190.155.65"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--2d4cf0c1-f3e0-5bd2-97af-0a4989427aca", "value": "www.tm.a.prd.aadg.akadns.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--2d4cf0c1-f3e0-5bd2-97af-0a4989427aca", "value": "www.tm.a.prd.aadg.akadns.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--561821b9-5ff7-5927-9059-b042da528100", "value": "20.190.155.16"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--561821b9-5ff7-5927-9059-b042da528100", "value": "20.190.155.16"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--15a1261e-eb7f-5717-a972-eaea9e2d9747", "value": "20.190.155.3"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--15a1261e-eb7f-5717-a972-eaea9e2d9747", "value": "20.190.155.3"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--e4210030-6c2b-57c0-b644-0d65604fa0ba", "value": "20.190.155.131"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--e4210030-6c2b-57c0-b644-0d65604fa0ba", "value": "20.190.155.131"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--acea9017-ef5c-5061-a756-edccbc28e079", "value": "20.190.155.67"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--acea9017-ef5c-5061-a756-edccbc28e079", "value": "20.190.155.67"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--776db78c-9b4c-5a90-89ba-938b5117224d", "value": "20.190.155.1"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--776db78c-9b4c-5a90-89ba-938b5117224d", "value": "20.190.155.1"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--4f04d589-5116-595b-bf7e-6fb68c4dd098", "value": "20.190.155.66"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--4f04d589-5116-595b-bf7e-6fb68c4dd098", "value": "20.190.155.66"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--1040a7f5-7b98-58ed-9d34-1cb15457cb87", "value": "20.190.155.132"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--1040a7f5-7b98-58ed-9d34-1cb15457cb87", "value": "20.190.155.132"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--9f929932-ab46-5366-b392-4e8e8bfe12c9", "value": "login.msa.msidentity.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--9f929932-ab46-5366-b392-4e8e8bfe12c9", "value": "login.msa.msidentity.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--b396534a-e4c7-562b-abd7-458b66963de4", "value": "dms.current.a.prd.aadg.trafficmanager.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--b396534a-e4c7-562b-abd7-458b66963de4", "value": "dms.current.a.prd.aadg.trafficmanager.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--80309d02-2882-51db-b225-ec0b0ee77da8", "value": "prda.aadg.msidentity.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--80309d02-2882-51db-b225-ec0b0ee77da8", "value": "prda.aadg.msidentity.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--ccd859d1-e6af-5372-8c99-7f280f1f2b73", "value": "20.190.155.130"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--ccd859d1-e6af-5372-8c99-7f280f1f2b73", "value": "20.190.155.130"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--d3277e27-6dd4-5c2a-b77a-fa45ba2e1804", "value": "www.tm.a.prd.aadg.trafficmanager.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--d3277e27-6dd4-5c2a-b77a-fa45ba2e1804", "value": "www.tm.a.prd.aadg.trafficmanager.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--2c7418e0-7b40-5f46-8a1a-501ad8bf3902", "value": "www.tm.lg.prod.aadmsa.trafficmanager.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--2c7418e0-7b40-5f46-8a1a-501ad8bf3902", "value": "www.tm.lg.prod.aadmsa.trafficmanager.net"}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d5d8447-fc67-4706-9112-d60aeeb7f28a", "created": "2021-09-13T19:10:19.449555Z", "modified": "2021-09-13T19:10:19.449555Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d9269f3-7cc8-47ac-81f7-8ac878cd2b34", "created": "2021-09-13T19:10:25.583669Z", "modified": "2021-09-13T19:10:25.583669Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d5c7aa47-f8ab-4ce4-8dd9-4bd6ae1fc001", "created": "2021-09-13T19:10:43.550991Z", "modified": "2021-09-13T19:10:43.550991Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9647af33-51ea-450e-bb76-786668688ef8", "created": "2021-09-13T19:11:01.100603Z", "modified": "2021-09-13T19:11:01.100603Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--97f80aab-b16f-43da-ae08-3e6344cf6a57", "created": "2021-09-13T19:11:07.627497Z", "modified": "2021-09-13T19:11:07.627497Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6470f15f-1a1d-4b11-b9e1-03ee9320e9bd", "created": "2021-09-13T19:11:13.157211Z", "modified": "2021-09-13T19:11:13.157211Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--296860b4-ea87-46eb-84ae-3c2ff484fea9", "created": "2021-09-13T19:11:16.694033Z", "modified": "2021-09-13T19:11:16.694033Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e249b3e-2a2a-4e91-b970-cb7248636d9e", "created": "2021-09-13T19:11:21.196303Z", "modified": "2021-09-13T19:11:21.196303Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7acc6e6d-f24b-4f35-8fdf-2082d8fda889", "created": "2021-09-13T19:11:51.948325Z", "modified": "2021-09-13T19:11:51.948325Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b63650b2-5036-4480-a675-e017fd97c91f", "created": "2021-09-13T19:12:16.833998Z", "modified": "2021-09-13T19:12:16.833998Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--525d0f63-1edb-45f5-8e8d-0c94f0c6c61a", "created": "2021-09-13T19:07:39.340411Z", "modified": "2021-09-13T19:07:39.340411Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--10df6427-a862-470e-8e78-8dd37e8eeb9f", "created": "2021-09-13T19:07:39.342811Z", "modified": "2021-09-13T19:07:39.342811Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--10df6427-a862-470e-8e78-8dd37e8eeb9f", "created": "2021-09-13T19:07:39.342811Z", "modified": "2021-09-13T19:07:39.342811Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--10df6427-a862-470e-8e78-8dd37e8eeb9f", "created": "2021-09-13T19:07:39.342811Z", "modified": "2021-09-13T19:07:39.342811Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--10df6427-a862-470e-8e78-8dd37e8eeb9f", "created": "2021-09-13T19:07:39.342811Z", "modified": "2021-09-13T19:07:39.342811Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--10df6427-a862-470e-8e78-8dd37e8eeb9f", "created": "2021-09-13T19:07:39.342811Z", "modified": "2021-09-13T19:07:39.342811Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2300638-021a-4335-bc36-e24f53c16c8c", "created": "2021-09-13T19:07:39.343193Z", "modified": "2021-09-13T19:07:39.343193Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2300638-021a-4335-bc36-e24f53c16c8c", "created": "2021-09-13T19:07:39.343193Z", "modified": "2021-09-13T19:07:39.343193Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2300638-021a-4335-bc36-e24f53c16c8c", "created": "2021-09-13T19:07:39.343193Z", "modified": "2021-09-13T19:07:39.343193Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2300638-021a-4335-bc36-e24f53c16c8c", "created": "2021-09-13T19:07:39.343193Z", "modified": "2021-09-13T19:07:39.343193Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3207b0a1-dcfb-4163-993b-30db54c81161", "created": "2021-09-13T19:07:39.343586Z", "modified": "2021-09-13T19:07:39.343586Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3207b0a1-dcfb-4163-993b-30db54c81161", "created": "2021-09-13T19:07:39.343586Z", "modified": "2021-09-13T19:07:39.343586Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3207b0a1-dcfb-4163-993b-30db54c81161", "created": "2021-09-13T19:07:39.343586Z", "modified": "2021-09-13T19:07:39.343586Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--20f55612-1965-46f3-aaf4-6f288fddfe3d", "created": "2021-09-13T19:07:39.343977Z", "modified": "2021-09-13T19:07:39.343977Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--20f55612-1965-46f3-aaf4-6f288fddfe3d", "created": "2021-09-13T19:07:39.343977Z", "modified": "2021-09-13T19:07:39.343977Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--20f55612-1965-46f3-aaf4-6f288fddfe3d", "created": "2021-09-13T19:07:39.343977Z", "modified": "2021-09-13T19:07:39.343977Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--20f55612-1965-46f3-aaf4-6f288fddfe3d", "created": "2021-09-13T19:07:39.343977Z", "modified": "2021-09-13T19:07:39.343977Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--20f55612-1965-46f3-aaf4-6f288fddfe3d", "created": "2021-09-13T19:07:39.343977Z", "modified": "2021-09-13T19:07:39.343977Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0a252aa-18fe-4a96-a6f3-a85d67ecc59e", "created": "2021-09-13T19:07:39.344365Z", "modified": "2021-09-13T19:07:39.344365Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cae95477-2de4-4f1a-b6e0-0607e5fb8fe1", "created": "2021-09-13T19:10:43.546566Z", "modified": "2021-09-13T19:10:43.546566Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0a252aa-18fe-4a96-a6f3-a85d67ecc59e", "created": "2021-09-13T19:07:39.344365Z", "modified": "2021-09-13T19:07:39.344365Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9b28f0cc-02c3-4e11-a065-4e413b87a34b", "created": "2021-09-13T19:11:21.195001Z", "modified": "2021-09-13T19:11:21.195001Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d5d8447-fc67-4706-9112-d60aeeb7f28a", "created": "2021-09-13T19:10:19.449555Z", "modified": "2021-09-13T19:10:19.449555Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d9269f3-7cc8-47ac-81f7-8ac878cd2b34", "created": "2021-09-13T19:10:25.583669Z", "modified": "2021-09-13T19:10:25.583669Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d5c7aa47-f8ab-4ce4-8dd9-4bd6ae1fc001", "created": "2021-09-13T19:10:43.550991Z", "modified": "2021-09-13T19:10:43.550991Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9647af33-51ea-450e-bb76-786668688ef8", "created": "2021-09-13T19:11:01.100603Z", "modified": "2021-09-13T19:11:01.100603Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--97f80aab-b16f-43da-ae08-3e6344cf6a57", "created": "2021-09-13T19:11:07.627497Z", "modified": "2021-09-13T19:11:07.627497Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6470f15f-1a1d-4b11-b9e1-03ee9320e9bd", "created": "2021-09-13T19:11:13.157211Z", "modified": "2021-09-13T19:11:13.157211Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--296860b4-ea87-46eb-84ae-3c2ff484fea9", "created": "2021-09-13T19:11:16.694033Z", "modified": "2021-09-13T19:11:16.694033Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e249b3e-2a2a-4e91-b970-cb7248636d9e", "created": "2021-09-13T19:11:21.196303Z", "modified": "2021-09-13T19:11:21.196303Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7acc6e6d-f24b-4f35-8fdf-2082d8fda889", "created": "2021-09-13T19:11:51.948325Z", "modified": "2021-09-13T19:11:51.948325Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b63650b2-5036-4480-a675-e017fd97c91f", "created": "2021-09-13T19:12:16.833998Z", "modified": "2021-09-13T19:12:16.833998Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bbadc0d5-65b1-4ad7-9f98-7a30082c642d", "created": "2021-09-13T19:07:44.566688Z", "modified": "2021-09-13T19:07:44.566688Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bbadc0d5-65b1-4ad7-9f98-7a30082c642d", "created": "2021-09-13T19:07:44.566688Z", "modified": "2021-09-13T19:07:44.566688Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bbadc0d5-65b1-4ad7-9f98-7a30082c642d", "created": "2021-09-13T19:07:44.566688Z", "modified": "2021-09-13T19:07:44.566688Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bbadc0d5-65b1-4ad7-9f98-7a30082c642d", "created": "2021-09-13T19:07:44.566688Z", "modified": "2021-09-13T19:07:44.566688Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bbadc0d5-65b1-4ad7-9f98-7a30082c642d", "created": "2021-09-13T19:07:44.566688Z", "modified": "2021-09-13T19:07:44.566688Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--724abd2c-c213-4ed1-8fb6-9a1ea39c76c4", "created": "2021-09-13T19:07:44.567265Z", "modified": "2021-09-13T19:07:44.567265Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--724abd2c-c213-4ed1-8fb6-9a1ea39c76c4", "created": "2021-09-13T19:07:44.567265Z", "modified": "2021-09-13T19:07:44.567265Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--724abd2c-c213-4ed1-8fb6-9a1ea39c76c4", "created": "2021-09-13T19:07:44.567265Z", "modified": "2021-09-13T19:07:44.567265Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--724abd2c-c213-4ed1-8fb6-9a1ea39c76c4", "created": "2021-09-13T19:07:44.567265Z", "modified": "2021-09-13T19:07:44.567265Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--724abd2c-c213-4ed1-8fb6-9a1ea39c76c4", "created": "2021-09-13T19:07:44.567265Z", "modified": "2021-09-13T19:07:44.567265Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf764686-2b28-4314-ac41-23f62c690384", "created": "2021-09-13T19:07:44.567745Z", "modified": "2021-09-13T19:07:44.567745Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf764686-2b28-4314-ac41-23f62c690384", "created": "2021-09-13T19:07:44.567745Z", "modified": "2021-09-13T19:07:44.567745Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf764686-2b28-4314-ac41-23f62c690384", "created": "2021-09-13T19:07:44.567745Z", "modified": "2021-09-13T19:07:44.567745Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf764686-2b28-4314-ac41-23f62c690384", "created": "2021-09-13T19:07:44.567745Z", "modified": "2021-09-13T19:07:44.567745Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--56dde253-42b4-4287-98b3-de858d5d7dbf", "created": "2021-09-13T19:07:44.568224Z", "modified": "2021-09-13T19:07:44.568224Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--56dde253-42b4-4287-98b3-de858d5d7dbf", "created": "2021-09-13T19:07:44.568224Z", "modified": "2021-09-13T19:07:44.568224Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--56dde253-42b4-4287-98b3-de858d5d7dbf", "created": "2021-09-13T19:07:44.568224Z", "modified": "2021-09-13T19:07:44.568224Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eeec47eb-7a65-48a0-b5ce-e6e2502fa041", "created": "2021-09-13T19:07:44.568704Z", "modified": "2021-09-13T19:07:44.568704Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eeec47eb-7a65-48a0-b5ce-e6e2502fa041", "created": "2021-09-13T19:07:44.568704Z", "modified": "2021-09-13T19:07:44.568704Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eeec47eb-7a65-48a0-b5ce-e6e2502fa041", "created": "2021-09-13T19:07:44.568704Z", "modified": "2021-09-13T19:07:44.568704Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eeec47eb-7a65-48a0-b5ce-e6e2502fa041", "created": "2021-09-13T19:07:44.568704Z", "modified": "2021-09-13T19:07:44.568704Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b7543f77-5f92-4b96-8eda-cb6f15e84a88", "created": "2021-09-13T19:07:49.923067Z", "modified": "2021-09-13T19:07:49.923067Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b7543f77-5f92-4b96-8eda-cb6f15e84a88", "created": "2021-09-13T19:07:49.923067Z", "modified": "2021-09-13T19:07:49.923067Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b7543f77-5f92-4b96-8eda-cb6f15e84a88", "created": "2021-09-13T19:07:49.923067Z", "modified": "2021-09-13T19:07:49.923067Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b7543f77-5f92-4b96-8eda-cb6f15e84a88", "created": "2021-09-13T19:07:49.923067Z", "modified": "2021-09-13T19:07:49.923067Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eb403b27-89ea-4a9a-a50b-66cec4738dbb", "created": "2021-09-13T19:07:49.923402Z", "modified": "2021-09-13T19:07:49.923402Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0118aaa8-01b3-436b-99b1-8270f01cd24d", "created": "2021-09-13T19:07:49.923729Z", "modified": "2021-09-13T19:07:49.923729Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0118aaa8-01b3-436b-99b1-8270f01cd24d", "created": "2021-09-13T19:07:49.923729Z", "modified": "2021-09-13T19:07:49.923729Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0118aaa8-01b3-436b-99b1-8270f01cd24d", "created": "2021-09-13T19:07:49.923729Z", "modified": "2021-09-13T19:07:49.923729Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0118aaa8-01b3-436b-99b1-8270f01cd24d", "created": "2021-09-13T19:07:49.923729Z", "modified": "2021-09-13T19:07:49.923729Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0118aaa8-01b3-436b-99b1-8270f01cd24d", "created": "2021-09-13T19:07:49.923729Z", "modified": "2021-09-13T19:07:49.923729Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c5ae8f-20bd-4299-9e39-bbc9365b719c", "created": "2021-09-13T19:07:49.924058Z", "modified": "2021-09-13T19:07:49.924058Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c5ae8f-20bd-4299-9e39-bbc9365b719c", "created": "2021-09-13T19:07:49.924058Z", "modified": "2021-09-13T19:07:49.924058Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c5ae8f-20bd-4299-9e39-bbc9365b719c", "created": "2021-09-13T19:07:49.924058Z", "modified": "2021-09-13T19:07:49.924058Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c5ae8f-20bd-4299-9e39-bbc9365b719c", "created": "2021-09-13T19:07:49.924058Z", "modified": "2021-09-13T19:07:49.924058Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4950fd4e-0924-46d4-b3f2-07ef1456985a", "created": "2021-09-13T19:07:49.924385Z", "modified": "2021-09-13T19:07:49.924385Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4950fd4e-0924-46d4-b3f2-07ef1456985a", "created": "2021-09-13T19:07:49.924385Z", "modified": "2021-09-13T19:07:49.924385Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4950fd4e-0924-46d4-b3f2-07ef1456985a", "created": "2021-09-13T19:07:49.924385Z", "modified": "2021-09-13T19:07:49.924385Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--55077ee6-950f-41ce-a12b-dab40aed758a", "created": "2021-09-13T19:07:49.924711Z", "modified": "2021-09-13T19:07:49.924711Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--55077ee6-950f-41ce-a12b-dab40aed758a", "created": "2021-09-13T19:07:49.924711Z", "modified": "2021-09-13T19:07:49.924711Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--55077ee6-950f-41ce-a12b-dab40aed758a", "created": "2021-09-13T19:07:49.924711Z", "modified": "2021-09-13T19:07:49.924711Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--58968695-7183-41b1-8ebd-a6530d215144", "created": "2021-09-13T19:07:49.925036Z", "modified": "2021-09-13T19:07:49.925036Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd08392d-b9e6-4e21-a8c0-1985c1a8cd59", "created": "2021-09-13T19:07:49.92536Z", "modified": "2021-09-13T19:07:49.92536Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd08392d-b9e6-4e21-a8c0-1985c1a8cd59", "created": "2021-09-13T19:07:49.92536Z", "modified": "2021-09-13T19:07:49.92536Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd08392d-b9e6-4e21-a8c0-1985c1a8cd59", "created": "2021-09-13T19:07:49.92536Z", "modified": "2021-09-13T19:07:49.92536Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd08392d-b9e6-4e21-a8c0-1985c1a8cd59", "created": "2021-09-13T19:07:49.92536Z", "modified": "2021-09-13T19:07:49.92536Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd08392d-b9e6-4e21-a8c0-1985c1a8cd59", "created": "2021-09-13T19:07:49.92536Z", "modified": "2021-09-13T19:07:49.92536Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--aac1ffbc-8a28-4868-afb8-3f701ab808d5", "created": "2021-09-13T19:07:57.170994Z", "modified": "2021-09-13T19:07:57.170994Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--aac1ffbc-8a28-4868-afb8-3f701ab808d5", "created": "2021-09-13T19:07:57.170994Z", "modified": "2021-09-13T19:07:57.170994Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--aac1ffbc-8a28-4868-afb8-3f701ab808d5", "created": "2021-09-13T19:07:57.170994Z", "modified": "2021-09-13T19:07:57.170994Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--aac1ffbc-8a28-4868-afb8-3f701ab808d5", "created": "2021-09-13T19:07:57.170994Z", "modified": "2021-09-13T19:07:57.170994Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--856d33d4-8f84-4c7a-95be-023061e5fd8e", "created": "2021-09-13T19:07:57.171935Z", "modified": "2021-09-13T19:07:57.171935Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc4b727f-7ba8-4331-9dda-3a1b20a5d7bb", "created": "2021-09-13T19:07:57.172858Z", "modified": "2021-09-13T19:07:57.172858Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc4b727f-7ba8-4331-9dda-3a1b20a5d7bb", "created": "2021-09-13T19:07:57.172858Z", "modified": "2021-09-13T19:07:57.172858Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc4b727f-7ba8-4331-9dda-3a1b20a5d7bb", "created": "2021-09-13T19:07:57.172858Z", "modified": "2021-09-13T19:07:57.172858Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc4b727f-7ba8-4331-9dda-3a1b20a5d7bb", "created": "2021-09-13T19:07:57.172858Z", "modified": "2021-09-13T19:07:57.172858Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc4b727f-7ba8-4331-9dda-3a1b20a5d7bb", "created": "2021-09-13T19:07:57.172858Z", "modified": "2021-09-13T19:07:57.172858Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d996320a-40cd-4224-82d2-1d1b9ca906c3", "created": "2021-09-13T19:07:57.174697Z", "modified": "2021-09-13T19:07:57.174697Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d996320a-40cd-4224-82d2-1d1b9ca906c3", "created": "2021-09-13T19:07:57.174697Z", "modified": "2021-09-13T19:07:57.174697Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d996320a-40cd-4224-82d2-1d1b9ca906c3", "created": "2021-09-13T19:07:57.174697Z", "modified": "2021-09-13T19:07:57.174697Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d996320a-40cd-4224-82d2-1d1b9ca906c3", "created": "2021-09-13T19:07:57.174697Z", "modified": "2021-09-13T19:07:57.174697Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73db72f3-24aa-4121-a46c-9ff3fb01d7f5", "created": "2021-09-13T19:07:57.175641Z", "modified": "2021-09-13T19:07:57.175641Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73db72f3-24aa-4121-a46c-9ff3fb01d7f5", "created": "2021-09-13T19:07:57.175641Z", "modified": "2021-09-13T19:07:57.175641Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73db72f3-24aa-4121-a46c-9ff3fb01d7f5", "created": "2021-09-13T19:07:57.175641Z", "modified": "2021-09-13T19:07:57.175641Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4a22fbd8-1927-4823-8200-09e6c9ce2464", "created": "2021-09-13T19:07:57.176557Z", "modified": "2021-09-13T19:07:57.176557Z", "name": "Windows Service MITRE T1543", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and Reg. \nAdversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.\nAn adversary may also incorporate Masquerading by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. \nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1543/003/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1473f98d-3322-42a8-8f27-04c52fd318a8", "created": "2021-09-13T19:11:51.951757Z", "modified": "2021-09-13T19:11:51.951757Z", "name": "Windows Service MITRE T1543", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and Reg. \nAdversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.\nAn adversary may also incorporate Masquerading by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. \nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1543/003/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8e243f58-3f6d-4f6e-8e38-abb265c16da0", "created": "2021-09-13T19:07:57.177469Z", "modified": "2021-09-13T19:07:57.177469Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--589002b3-76e4-4bd2-a656-633fa5779cc5", "created": "2021-09-13T19:07:57.178391Z", "modified": "2021-09-13T19:07:57.178391Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--589002b3-76e4-4bd2-a656-633fa5779cc5", "created": "2021-09-13T19:07:57.178391Z", "modified": "2021-09-13T19:07:57.178391Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--589002b3-76e4-4bd2-a656-633fa5779cc5", "created": "2021-09-13T19:07:57.178391Z", "modified": "2021-09-13T19:07:57.178391Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--589002b3-76e4-4bd2-a656-633fa5779cc5", "created": "2021-09-13T19:07:57.178391Z", "modified": "2021-09-13T19:07:57.178391Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--589002b3-76e4-4bd2-a656-633fa5779cc5", "created": "2021-09-13T19:07:57.178391Z", "modified": "2021-09-13T19:07:57.178391Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc7249e0-027b-494c-9568-9ff8fb3e0f76", "created": "2021-09-13T19:08:01.955437Z", "modified": "2021-09-13T19:08:01.955437Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc7249e0-027b-494c-9568-9ff8fb3e0f76", "created": "2021-09-13T19:08:01.955437Z", "modified": "2021-09-13T19:08:01.955437Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc7249e0-027b-494c-9568-9ff8fb3e0f76", "created": "2021-09-13T19:08:01.955437Z", "modified": "2021-09-13T19:08:01.955437Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc7249e0-027b-494c-9568-9ff8fb3e0f76", "created": "2021-09-13T19:08:01.955437Z", "modified": "2021-09-13T19:08:01.955437Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--54b42157-91ff-47fb-9a44-8407fc8dc2c9", "created": "2021-09-13T19:08:01.956637Z", "modified": "2021-09-13T19:08:01.956637Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--54b42157-91ff-47fb-9a44-8407fc8dc2c9", "created": "2021-09-13T19:08:01.956637Z", "modified": "2021-09-13T19:08:01.956637Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--54b42157-91ff-47fb-9a44-8407fc8dc2c9", "created": "2021-09-13T19:08:01.956637Z", "modified": "2021-09-13T19:08:01.956637Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c735226a-e64e-4a6d-a51d-616340c34f4e", "created": "2021-09-13T19:08:01.957812Z", "modified": "2021-09-13T19:08:01.957812Z", "name": "Registry Run Keys / Startup Folder MITRE T1547", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.  These programs will be executed under the context of the user and will have the account's associated permissions level.\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.  For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit and HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell subkeys can automatically launch programs.\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run when any user logs on.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1547/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c1eaf40-c825-4a8e-93ab-b7c66b44dc5d", "created": "2021-09-13T19:10:43.550012Z", "modified": "2021-09-13T19:10:43.550012Z", "name": "Registry Run Keys / Startup Folder MITRE T1547", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.  These programs will be executed under the context of the user and will have the account's associated permissions level.\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.  For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit and HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell subkeys can automatically launch programs.\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run when any user logs on.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1547/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c735226a-e64e-4a6d-a51d-616340c34f4e", "created": "2021-09-13T19:08:01.957812Z", "modified": "2021-09-13T19:08:01.957812Z", "name": "Registry Run Keys / Startup Folder MITRE T1547", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.  These programs will be executed under the context of the user and will have the account's associated permissions level.\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.  For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit and HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell subkeys can automatically launch programs.\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run when any user logs on.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1547/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e68fc92c-b189-4815-b111-f9b96e9146d4", "created": "2021-09-13T19:11:21.195978Z", "modified": "2021-09-13T19:11:21.195978Z", "name": "Registry Run Keys / Startup Folder MITRE T1547", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.  These programs will be executed under the context of the user and will have the account's associated permissions level.\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.  For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit and HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell subkeys can automatically launch programs.\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run when any user logs on.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1547/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c94ae8e-1a4f-4951-9651-185322fb6ad3", "created": "2021-09-13T19:08:01.960154Z", "modified": "2021-09-13T19:08:01.960154Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c94ae8e-1a4f-4951-9651-185322fb6ad3", "created": "2021-09-13T19:08:01.960154Z", "modified": "2021-09-13T19:08:01.960154Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c94ae8e-1a4f-4951-9651-185322fb6ad3", "created": "2021-09-13T19:08:01.960154Z", "modified": "2021-09-13T19:08:01.960154Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c94ae8e-1a4f-4951-9651-185322fb6ad3", "created": "2021-09-13T19:08:01.960154Z", "modified": "2021-09-13T19:08:01.960154Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c1d765a3-89e1-4beb-802d-9f4d8626c15d", "created": "2021-09-13T19:08:14.464688Z", "modified": "2021-09-13T19:08:14.464688Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c1d765a3-89e1-4beb-802d-9f4d8626c15d", "created": "2021-09-13T19:08:14.464688Z", "modified": "2021-09-13T19:08:14.464688Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c1d765a3-89e1-4beb-802d-9f4d8626c15d", "created": "2021-09-13T19:08:14.464688Z", "modified": "2021-09-13T19:08:14.464688Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c1d765a3-89e1-4beb-802d-9f4d8626c15d", "created": "2021-09-13T19:08:14.464688Z", "modified": "2021-09-13T19:08:14.464688Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26126d3b-ebb3-4e30-93be-738e7b5a8364", "created": "2021-09-13T19:08:14.465885Z", "modified": "2021-09-13T19:08:14.465885Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38d81ed8-795c-49de-ae91-1bfc79b710a0", "created": "2021-09-13T19:08:14.466926Z", "modified": "2021-09-13T19:08:14.466926Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38d81ed8-795c-49de-ae91-1bfc79b710a0", "created": "2021-09-13T19:08:14.466926Z", "modified": "2021-09-13T19:08:14.466926Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38d81ed8-795c-49de-ae91-1bfc79b710a0", "created": "2021-09-13T19:08:14.466926Z", "modified": "2021-09-13T19:08:14.466926Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38d81ed8-795c-49de-ae91-1bfc79b710a0", "created": "2021-09-13T19:08:14.466926Z", "modified": "2021-09-13T19:08:14.466926Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38d81ed8-795c-49de-ae91-1bfc79b710a0", "created": "2021-09-13T19:08:14.466926Z", "modified": "2021-09-13T19:08:14.466926Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113e4879-b4b3-45f9-91c8-1470d0483f99", "created": "2021-09-13T19:08:14.467345Z", "modified": "2021-09-13T19:08:14.467345Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113e4879-b4b3-45f9-91c8-1470d0483f99", "created": "2021-09-13T19:08:14.467345Z", "modified": "2021-09-13T19:08:14.467345Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113e4879-b4b3-45f9-91c8-1470d0483f99", "created": "2021-09-13T19:08:14.467345Z", "modified": "2021-09-13T19:08:14.467345Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1179f774-1299-42fc-9d92-1fe81724fb6a", "created": "2021-09-13T19:08:14.467764Z", "modified": "2021-09-13T19:08:14.467764Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d88eea3-1beb-479f-8af8-9c38178ece97", "created": "2021-09-13T19:08:14.468178Z", "modified": "2021-09-13T19:08:14.468178Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d88eea3-1beb-479f-8af8-9c38178ece97", "created": "2021-09-13T19:08:14.468178Z", "modified": "2021-09-13T19:08:14.468178Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d88eea3-1beb-479f-8af8-9c38178ece97", "created": "2021-09-13T19:08:14.468178Z", "modified": "2021-09-13T19:08:14.468178Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d88eea3-1beb-479f-8af8-9c38178ece97", "created": "2021-09-13T19:08:14.468178Z", "modified": "2021-09-13T19:08:14.468178Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d88eea3-1beb-479f-8af8-9c38178ece97", "created": "2021-09-13T19:08:14.468178Z", "modified": "2021-09-13T19:08:14.468178Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db84a632-b2c7-46fc-8cbf-9dd5fb6e6d44", "created": "2021-09-13T19:08:14.469401Z", "modified": "2021-09-13T19:08:14.469401Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db84a632-b2c7-46fc-8cbf-9dd5fb6e6d44", "created": "2021-09-13T19:08:14.469401Z", "modified": "2021-09-13T19:08:14.469401Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db84a632-b2c7-46fc-8cbf-9dd5fb6e6d44", "created": "2021-09-13T19:08:14.469401Z", "modified": "2021-09-13T19:08:14.469401Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db84a632-b2c7-46fc-8cbf-9dd5fb6e6d44", "created": "2021-09-13T19:08:14.469401Z", "modified": "2021-09-13T19:08:14.469401Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7a79ebaa-8661-4633-a11f-faac51dab4e7", "created": "2021-09-13T19:08:23.402535Z", "modified": "2021-09-13T19:08:23.402535Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7a79ebaa-8661-4633-a11f-faac51dab4e7", "created": "2021-09-13T19:08:23.402535Z", "modified": "2021-09-13T19:08:23.402535Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7a79ebaa-8661-4633-a11f-faac51dab4e7", "created": "2021-09-13T19:08:23.402535Z", "modified": "2021-09-13T19:08:23.402535Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7a79ebaa-8661-4633-a11f-faac51dab4e7", "created": "2021-09-13T19:08:23.402535Z", "modified": "2021-09-13T19:08:23.402535Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc1d2162-fe15-42cd-8ca0-b17e3e291ec7", "created": "2021-09-13T19:08:23.40402Z", "modified": "2021-09-13T19:08:23.40402Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc1d2162-fe15-42cd-8ca0-b17e3e291ec7", "created": "2021-09-13T19:08:23.40402Z", "modified": "2021-09-13T19:08:23.40402Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc1d2162-fe15-42cd-8ca0-b17e3e291ec7", "created": "2021-09-13T19:08:23.40402Z", "modified": "2021-09-13T19:08:23.40402Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc1d2162-fe15-42cd-8ca0-b17e3e291ec7", "created": "2021-09-13T19:08:23.40402Z", "modified": "2021-09-13T19:08:23.40402Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc1d2162-fe15-42cd-8ca0-b17e3e291ec7", "created": "2021-09-13T19:08:23.40402Z", "modified": "2021-09-13T19:08:23.40402Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e797c5e5-0de6-42d0-98ae-83fb4f62ba2d", "created": "2021-09-13T19:08:23.406847Z", "modified": "2021-09-13T19:08:23.406847Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e797c5e5-0de6-42d0-98ae-83fb4f62ba2d", "created": "2021-09-13T19:08:23.406847Z", "modified": "2021-09-13T19:08:23.406847Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e797c5e5-0de6-42d0-98ae-83fb4f62ba2d", "created": "2021-09-13T19:08:23.406847Z", "modified": "2021-09-13T19:08:23.406847Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e797c5e5-0de6-42d0-98ae-83fb4f62ba2d", "created": "2021-09-13T19:08:23.406847Z", "modified": "2021-09-13T19:08:23.406847Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e797c5e5-0de6-42d0-98ae-83fb4f62ba2d", "created": "2021-09-13T19:08:23.406847Z", "modified": "2021-09-13T19:08:23.406847Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--60ab7e1d-2a0e-463a-86ae-17000add023e", "created": "2021-09-13T19:08:23.407214Z", "modified": "2021-09-13T19:08:23.407214Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--60ab7e1d-2a0e-463a-86ae-17000add023e", "created": "2021-09-13T19:08:23.407214Z", "modified": "2021-09-13T19:08:23.407214Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--60ab7e1d-2a0e-463a-86ae-17000add023e", "created": "2021-09-13T19:08:23.407214Z", "modified": "2021-09-13T19:08:23.407214Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--60ab7e1d-2a0e-463a-86ae-17000add023e", "created": "2021-09-13T19:08:23.407214Z", "modified": "2021-09-13T19:08:23.407214Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dab164c6-9840-451f-9245-4b4efaeaad2f", "created": "2021-09-13T19:08:23.407575Z", "modified": "2021-09-13T19:08:23.407575Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dab164c6-9840-451f-9245-4b4efaeaad2f", "created": "2021-09-13T19:08:23.407575Z", "modified": "2021-09-13T19:08:23.407575Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dab164c6-9840-451f-9245-4b4efaeaad2f", "created": "2021-09-13T19:08:23.407575Z", "modified": "2021-09-13T19:08:23.407575Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--45101d48-c90e-4f40-8307-56d751bee847", "created": "2021-09-13T19:08:23.407929Z", "modified": "2021-09-13T19:08:23.407929Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cae95477-2de4-4f1a-b6e0-0607e5fb8fe1", "created": "2021-09-13T19:10:43.546566Z", "modified": "2021-09-13T19:10:43.546566Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--45101d48-c90e-4f40-8307-56d751bee847", "created": "2021-09-13T19:08:23.407929Z", "modified": "2021-09-13T19:08:23.407929Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9b28f0cc-02c3-4e11-a065-4e413b87a34b", "created": "2021-09-13T19:11:21.195001Z", "modified": "2021-09-13T19:11:21.195001Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3e75d898-ec63-4737-b9e2-c2b1078fb06e", "created": "2021-09-13T19:08:23.408641Z", "modified": "2021-09-13T19:08:23.408641Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3e75d898-ec63-4737-b9e2-c2b1078fb06e", "created": "2021-09-13T19:08:23.408641Z", "modified": "2021-09-13T19:08:23.408641Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3e75d898-ec63-4737-b9e2-c2b1078fb06e", "created": "2021-09-13T19:08:23.408641Z", "modified": "2021-09-13T19:08:23.408641Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3e75d898-ec63-4737-b9e2-c2b1078fb06e", "created": "2021-09-13T19:08:23.408641Z", "modified": "2021-09-13T19:08:23.408641Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7985154d-b259-488b-b446-1f988d4f90ad", "created": "2021-09-13T19:08:28.400135Z", "modified": "2021-09-13T19:08:28.400135Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7985154d-b259-488b-b446-1f988d4f90ad", "created": "2021-09-13T19:08:28.400135Z", "modified": "2021-09-13T19:08:28.400135Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7985154d-b259-488b-b446-1f988d4f90ad", "created": "2021-09-13T19:08:28.400135Z", "modified": "2021-09-13T19:08:28.400135Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7985154d-b259-488b-b446-1f988d4f90ad", "created": "2021-09-13T19:08:28.400135Z", "modified": "2021-09-13T19:08:28.400135Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5c92f132-7368-4b4b-aeef-7b9fd63bb936", "created": "2021-09-13T19:08:28.401003Z", "modified": "2021-09-13T19:08:28.401003Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8a299fc6-00c1-43fa-99aa-17a00b55e5a6", "created": "2021-09-13T19:08:28.401851Z", "modified": "2021-09-13T19:08:28.401851Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8a299fc6-00c1-43fa-99aa-17a00b55e5a6", "created": "2021-09-13T19:08:28.401851Z", "modified": "2021-09-13T19:08:28.401851Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8a299fc6-00c1-43fa-99aa-17a00b55e5a6", "created": "2021-09-13T19:08:28.401851Z", "modified": "2021-09-13T19:08:28.401851Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8a299fc6-00c1-43fa-99aa-17a00b55e5a6", "created": "2021-09-13T19:08:28.401851Z", "modified": "2021-09-13T19:08:28.401851Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8a299fc6-00c1-43fa-99aa-17a00b55e5a6", "created": "2021-09-13T19:08:28.401851Z", "modified": "2021-09-13T19:08:28.401851Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113ff33d-6916-4f76-b57b-0d4035145366", "created": "2021-09-13T19:08:28.402704Z", "modified": "2021-09-13T19:08:28.402704Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113ff33d-6916-4f76-b57b-0d4035145366", "created": "2021-09-13T19:08:28.402704Z", "modified": "2021-09-13T19:08:28.402704Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113ff33d-6916-4f76-b57b-0d4035145366", "created": "2021-09-13T19:08:28.402704Z", "modified": "2021-09-13T19:08:28.402704Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113ff33d-6916-4f76-b57b-0d4035145366", "created": "2021-09-13T19:08:28.402704Z", "modified": "2021-09-13T19:08:28.402704Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113ff33d-6916-4f76-b57b-0d4035145366", "created": "2021-09-13T19:08:28.402704Z", "modified": "2021-09-13T19:08:28.402704Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a3387a01-a871-492c-bf9c-3220ead49cef", "created": "2021-09-13T19:08:28.403581Z", "modified": "2021-09-13T19:08:28.403581Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cae95477-2de4-4f1a-b6e0-0607e5fb8fe1", "created": "2021-09-13T19:10:43.546566Z", "modified": "2021-09-13T19:10:43.546566Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a3387a01-a871-492c-bf9c-3220ead49cef", "created": "2021-09-13T19:08:28.403581Z", "modified": "2021-09-13T19:08:28.403581Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9b28f0cc-02c3-4e11-a065-4e413b87a34b", "created": "2021-09-13T19:11:21.195001Z", "modified": "2021-09-13T19:11:21.195001Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e6130ace-44c3-4866-8750-2c606938b3ef", "created": "2021-09-13T19:08:28.405274Z", "modified": "2021-09-13T19:08:28.405274Z", "name": "Encrypted Channel MITRE T1573", "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1573/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c77052f-c61d-4807-9308-3a82aba33879", "created": "2021-09-13T19:10:25.588141Z", "modified": "2021-09-13T19:10:25.588141Z", "name": "Encrypted Channel MITRE T1573", "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1573/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d5d8447-fc67-4706-9112-d60aeeb7f28a", "created": "2021-09-13T19:10:19.449555Z", "modified": "2021-09-13T19:10:19.449555Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d9269f3-7cc8-47ac-81f7-8ac878cd2b34", "created": "2021-09-13T19:10:25.583669Z", "modified": "2021-09-13T19:10:25.583669Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d5c7aa47-f8ab-4ce4-8dd9-4bd6ae1fc001", "created": "2021-09-13T19:10:43.550991Z", "modified": "2021-09-13T19:10:43.550991Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9647af33-51ea-450e-bb76-786668688ef8", "created": "2021-09-13T19:11:01.100603Z", "modified": "2021-09-13T19:11:01.100603Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--97f80aab-b16f-43da-ae08-3e6344cf6a57", "created": "2021-09-13T19:11:07.627497Z", "modified": "2021-09-13T19:11:07.627497Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6470f15f-1a1d-4b11-b9e1-03ee9320e9bd", "created": "2021-09-13T19:11:13.157211Z", "modified": "2021-09-13T19:11:13.157211Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--296860b4-ea87-46eb-84ae-3c2ff484fea9", "created": "2021-09-13T19:11:16.694033Z", "modified": "2021-09-13T19:11:16.694033Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e249b3e-2a2a-4e91-b970-cb7248636d9e", "created": "2021-09-13T19:11:21.196303Z", "modified": "2021-09-13T19:11:21.196303Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7acc6e6d-f24b-4f35-8fdf-2082d8fda889", "created": "2021-09-13T19:11:51.948325Z", "modified": "2021-09-13T19:11:51.948325Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b63650b2-5036-4480-a675-e017fd97c91f", "created": "2021-09-13T19:12:16.833998Z", "modified": "2021-09-13T19:12:16.833998Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01e3e575-d0a6-4e29-82da-5ef91ea91ecd", "created": "2021-09-13T19:08:38.33434Z", "modified": "2021-09-13T19:08:38.33434Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01e3e575-d0a6-4e29-82da-5ef91ea91ecd", "created": "2021-09-13T19:08:38.33434Z", "modified": "2021-09-13T19:08:38.33434Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01e3e575-d0a6-4e29-82da-5ef91ea91ecd", "created": "2021-09-13T19:08:38.33434Z", "modified": "2021-09-13T19:08:38.33434Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01e3e575-d0a6-4e29-82da-5ef91ea91ecd", "created": "2021-09-13T19:08:38.33434Z", "modified": "2021-09-13T19:08:38.33434Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cdffc863-44b1-4c07-b117-cb3418e393bb", "created": "2021-09-13T19:08:38.335214Z", "modified": "2021-09-13T19:08:38.335214Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1c517c9c-d4bc-4b83-ab92-5ef33037b01b", "created": "2021-09-13T19:08:38.335664Z", "modified": "2021-09-13T19:08:38.335664Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1c517c9c-d4bc-4b83-ab92-5ef33037b01b", "created": "2021-09-13T19:08:38.335664Z", "modified": "2021-09-13T19:08:38.335664Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1c517c9c-d4bc-4b83-ab92-5ef33037b01b", "created": "2021-09-13T19:08:38.335664Z", "modified": "2021-09-13T19:08:38.335664Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1c517c9c-d4bc-4b83-ab92-5ef33037b01b", "created": "2021-09-13T19:08:38.335664Z", "modified": "2021-09-13T19:08:38.335664Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1c517c9c-d4bc-4b83-ab92-5ef33037b01b", "created": "2021-09-13T19:08:38.335664Z", "modified": "2021-09-13T19:08:38.335664Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb6d37c5-6913-4707-9790-64a8ce243f42", "created": "2021-09-13T19:08:38.336109Z", "modified": "2021-09-13T19:08:38.336109Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb6d37c5-6913-4707-9790-64a8ce243f42", "created": "2021-09-13T19:08:38.336109Z", "modified": "2021-09-13T19:08:38.336109Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb6d37c5-6913-4707-9790-64a8ce243f42", "created": "2021-09-13T19:08:38.336109Z", "modified": "2021-09-13T19:08:38.336109Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb6d37c5-6913-4707-9790-64a8ce243f42", "created": "2021-09-13T19:08:38.336109Z", "modified": "2021-09-13T19:08:38.336109Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a48434d1-92c5-4258-89b3-30acc44b4596", "created": "2021-09-13T19:08:38.336553Z", "modified": "2021-09-13T19:08:38.336553Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a48434d1-92c5-4258-89b3-30acc44b4596", "created": "2021-09-13T19:08:38.336553Z", "modified": "2021-09-13T19:08:38.336553Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a48434d1-92c5-4258-89b3-30acc44b4596", "created": "2021-09-13T19:08:38.336553Z", "modified": "2021-09-13T19:08:38.336553Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1806bade-0674-4e7b-b4e5-3b6c4ac5214c", "created": "2021-09-13T19:08:38.336996Z", "modified": "2021-09-13T19:08:38.336996Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1806bade-0674-4e7b-b4e5-3b6c4ac5214c", "created": "2021-09-13T19:08:38.336996Z", "modified": "2021-09-13T19:08:38.336996Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1806bade-0674-4e7b-b4e5-3b6c4ac5214c", "created": "2021-09-13T19:08:38.336996Z", "modified": "2021-09-13T19:08:38.336996Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e9970fa3-994b-4bb9-9390-64e756e7ddaf", "created": "2021-09-13T19:08:38.337433Z", "modified": "2021-09-13T19:08:38.337433Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0891af88-8b2b-4c86-8bce-d456536e0ca4", "created": "2021-09-13T19:08:38.337868Z", "modified": "2021-09-13T19:08:38.337868Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0891af88-8b2b-4c86-8bce-d456536e0ca4", "created": "2021-09-13T19:08:38.337868Z", "modified": "2021-09-13T19:08:38.337868Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0891af88-8b2b-4c86-8bce-d456536e0ca4", "created": "2021-09-13T19:08:38.337868Z", "modified": "2021-09-13T19:08:38.337868Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0891af88-8b2b-4c86-8bce-d456536e0ca4", "created": "2021-09-13T19:08:38.337868Z", "modified": "2021-09-13T19:08:38.337868Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0891af88-8b2b-4c86-8bce-d456536e0ca4", "created": "2021-09-13T19:08:38.337868Z", "modified": "2021-09-13T19:08:38.337868Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d5d8447-fc67-4706-9112-d60aeeb7f28a", "created": "2021-09-13T19:10:19.449555Z", "modified": "2021-09-13T19:10:19.449555Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d9269f3-7cc8-47ac-81f7-8ac878cd2b34", "created": "2021-09-13T19:10:25.583669Z", "modified": "2021-09-13T19:10:25.583669Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d5c7aa47-f8ab-4ce4-8dd9-4bd6ae1fc001", "created": "2021-09-13T19:10:43.550991Z", "modified": "2021-09-13T19:10:43.550991Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9647af33-51ea-450e-bb76-786668688ef8", "created": "2021-09-13T19:11:01.100603Z", "modified": "2021-09-13T19:11:01.100603Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--97f80aab-b16f-43da-ae08-3e6344cf6a57", "created": "2021-09-13T19:11:07.627497Z", "modified": "2021-09-13T19:11:07.627497Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6470f15f-1a1d-4b11-b9e1-03ee9320e9bd", "created": "2021-09-13T19:11:13.157211Z", "modified": "2021-09-13T19:11:13.157211Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--296860b4-ea87-46eb-84ae-3c2ff484fea9", "created": "2021-09-13T19:11:16.694033Z", "modified": "2021-09-13T19:11:16.694033Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e249b3e-2a2a-4e91-b970-cb7248636d9e", "created": "2021-09-13T19:11:21.196303Z", "modified": "2021-09-13T19:11:21.196303Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7acc6e6d-f24b-4f35-8fdf-2082d8fda889", "created": "2021-09-13T19:11:51.948325Z", "modified": "2021-09-13T19:11:51.948325Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b63650b2-5036-4480-a675-e017fd97c91f", "created": "2021-09-13T19:12:16.833998Z", "modified": "2021-09-13T19:12:16.833998Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--868f9bc4-b886-48b4-b260-c30d5cdbbfd3", "created": "2021-09-13T19:08:52.563342Z", "modified": "2021-09-13T19:08:52.563342Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--868f9bc4-b886-48b4-b260-c30d5cdbbfd3", "created": "2021-09-13T19:08:52.563342Z", "modified": "2021-09-13T19:08:52.563342Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--868f9bc4-b886-48b4-b260-c30d5cdbbfd3", "created": "2021-09-13T19:08:52.563342Z", "modified": "2021-09-13T19:08:52.563342Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--868f9bc4-b886-48b4-b260-c30d5cdbbfd3", "created": "2021-09-13T19:08:52.563342Z", "modified": "2021-09-13T19:08:52.563342Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--868f9bc4-b886-48b4-b260-c30d5cdbbfd3", "created": "2021-09-13T19:08:52.563342Z", "modified": "2021-09-13T19:08:52.563342Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d0765eb8-1829-42b3-902b-c83366539cc8", "created": "2021-09-13T19:08:52.563819Z", "modified": "2021-09-13T19:08:52.563819Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d0765eb8-1829-42b3-902b-c83366539cc8", "created": "2021-09-13T19:08:52.563819Z", "modified": "2021-09-13T19:08:52.563819Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d0765eb8-1829-42b3-902b-c83366539cc8", "created": "2021-09-13T19:08:52.563819Z", "modified": "2021-09-13T19:08:52.563819Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d0765eb8-1829-42b3-902b-c83366539cc8", "created": "2021-09-13T19:08:52.563819Z", "modified": "2021-09-13T19:08:52.563819Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d0765eb8-1829-42b3-902b-c83366539cc8", "created": "2021-09-13T19:08:52.563819Z", "modified": "2021-09-13T19:08:52.563819Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6dc595f4-4ee5-4e11-8c2b-ddfa4547693e", "created": "2021-09-13T19:08:52.56429Z", "modified": "2021-09-13T19:08:52.56429Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6dc595f4-4ee5-4e11-8c2b-ddfa4547693e", "created": "2021-09-13T19:08:52.56429Z", "modified": "2021-09-13T19:08:52.56429Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6dc595f4-4ee5-4e11-8c2b-ddfa4547693e", "created": "2021-09-13T19:08:52.56429Z", "modified": "2021-09-13T19:08:52.56429Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6dc595f4-4ee5-4e11-8c2b-ddfa4547693e", "created": "2021-09-13T19:08:52.56429Z", "modified": "2021-09-13T19:08:52.56429Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9869dc6e-a9d5-4aac-94ff-61cdf9b387aa", "created": "2021-09-13T19:08:52.564762Z", "modified": "2021-09-13T19:08:52.564762Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9869dc6e-a9d5-4aac-94ff-61cdf9b387aa", "created": "2021-09-13T19:08:52.564762Z", "modified": "2021-09-13T19:08:52.564762Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9869dc6e-a9d5-4aac-94ff-61cdf9b387aa", "created": "2021-09-13T19:08:52.564762Z", "modified": "2021-09-13T19:08:52.564762Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70876506-e7e2-4146-8d12-347c90d76a76", "created": "2021-09-13T19:08:52.56523Z", "modified": "2021-09-13T19:08:52.56523Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70876506-e7e2-4146-8d12-347c90d76a76", "created": "2021-09-13T19:08:52.56523Z", "modified": "2021-09-13T19:08:52.56523Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70876506-e7e2-4146-8d12-347c90d76a76", "created": "2021-09-13T19:08:52.56523Z", "modified": "2021-09-13T19:08:52.56523Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70876506-e7e2-4146-8d12-347c90d76a76", "created": "2021-09-13T19:08:52.56523Z", "modified": "2021-09-13T19:08:52.56523Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb7cb295-7d91-4475-85a4-88a81c38d4f8", "created": "2021-09-13T19:09:00.312715Z", "modified": "2021-09-13T19:09:00.312715Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb7cb295-7d91-4475-85a4-88a81c38d4f8", "created": "2021-09-13T19:09:00.312715Z", "modified": "2021-09-13T19:09:00.312715Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb7cb295-7d91-4475-85a4-88a81c38d4f8", "created": "2021-09-13T19:09:00.312715Z", "modified": "2021-09-13T19:09:00.312715Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb7cb295-7d91-4475-85a4-88a81c38d4f8", "created": "2021-09-13T19:09:00.312715Z", "modified": "2021-09-13T19:09:00.312715Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01f1f5fa-3583-41d8-b354-aca67807f9a8", "created": "2021-09-13T19:09:00.313475Z", "modified": "2021-09-13T19:09:00.313475Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4f569471-9b97-41ba-89df-20b478bfc88d", "created": "2021-09-13T19:09:00.314227Z", "modified": "2021-09-13T19:09:00.314227Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4f569471-9b97-41ba-89df-20b478bfc88d", "created": "2021-09-13T19:09:00.314227Z", "modified": "2021-09-13T19:09:00.314227Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4f569471-9b97-41ba-89df-20b478bfc88d", "created": "2021-09-13T19:09:00.314227Z", "modified": "2021-09-13T19:09:00.314227Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4f569471-9b97-41ba-89df-20b478bfc88d", "created": "2021-09-13T19:09:00.314227Z", "modified": "2021-09-13T19:09:00.314227Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4f569471-9b97-41ba-89df-20b478bfc88d", "created": "2021-09-13T19:09:00.314227Z", "modified": "2021-09-13T19:09:00.314227Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22e31219-4076-4f7d-a654-6de8c772b1a4", "created": "2021-09-13T19:09:00.314991Z", "modified": "2021-09-13T19:09:00.314991Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22e31219-4076-4f7d-a654-6de8c772b1a4", "created": "2021-09-13T19:09:00.314991Z", "modified": "2021-09-13T19:09:00.314991Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22e31219-4076-4f7d-a654-6de8c772b1a4", "created": "2021-09-13T19:09:00.314991Z", "modified": "2021-09-13T19:09:00.314991Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22e31219-4076-4f7d-a654-6de8c772b1a4", "created": "2021-09-13T19:09:00.314991Z", "modified": "2021-09-13T19:09:00.314991Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bfa49353-6d38-42dc-9be3-2a484f79c15e", "created": "2021-09-13T19:09:00.315739Z", "modified": "2021-09-13T19:09:00.315739Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bfa49353-6d38-42dc-9be3-2a484f79c15e", "created": "2021-09-13T19:09:00.315739Z", "modified": "2021-09-13T19:09:00.315739Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bfa49353-6d38-42dc-9be3-2a484f79c15e", "created": "2021-09-13T19:09:00.315739Z", "modified": "2021-09-13T19:09:00.315739Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8afc5dc-399d-4817-91a1-9c7a704c13dc", "created": "2021-09-13T19:09:00.3165Z", "modified": "2021-09-13T19:09:00.3165Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2958546-1554-4ac4-b473-3c6b929e14b2", "created": "2021-09-13T19:09:00.317249Z", "modified": "2021-09-13T19:09:00.317249Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2958546-1554-4ac4-b473-3c6b929e14b2", "created": "2021-09-13T19:09:00.317249Z", "modified": "2021-09-13T19:09:00.317249Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2958546-1554-4ac4-b473-3c6b929e14b2", "created": "2021-09-13T19:09:00.317249Z", "modified": "2021-09-13T19:09:00.317249Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2958546-1554-4ac4-b473-3c6b929e14b2", "created": "2021-09-13T19:09:00.317249Z", "modified": "2021-09-13T19:09:00.317249Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2958546-1554-4ac4-b473-3c6b929e14b2", "created": "2021-09-13T19:09:00.317249Z", "modified": "2021-09-13T19:09:00.317249Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d5d8447-fc67-4706-9112-d60aeeb7f28a", "created": "2021-09-13T19:10:19.449555Z", "modified": "2021-09-13T19:10:19.449555Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d9269f3-7cc8-47ac-81f7-8ac878cd2b34", "created": "2021-09-13T19:10:25.583669Z", "modified": "2021-09-13T19:10:25.583669Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d5c7aa47-f8ab-4ce4-8dd9-4bd6ae1fc001", "created": "2021-09-13T19:10:43.550991Z", "modified": "2021-09-13T19:10:43.550991Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9647af33-51ea-450e-bb76-786668688ef8", "created": "2021-09-13T19:11:01.100603Z", "modified": "2021-09-13T19:11:01.100603Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--97f80aab-b16f-43da-ae08-3e6344cf6a57", "created": "2021-09-13T19:11:07.627497Z", "modified": "2021-09-13T19:11:07.627497Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6470f15f-1a1d-4b11-b9e1-03ee9320e9bd", "created": "2021-09-13T19:11:13.157211Z", "modified": "2021-09-13T19:11:13.157211Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--296860b4-ea87-46eb-84ae-3c2ff484fea9", "created": "2021-09-13T19:11:16.694033Z", "modified": "2021-09-13T19:11:16.694033Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e249b3e-2a2a-4e91-b970-cb7248636d9e", "created": "2021-09-13T19:11:21.196303Z", "modified": "2021-09-13T19:11:21.196303Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7acc6e6d-f24b-4f35-8fdf-2082d8fda889", "created": "2021-09-13T19:11:51.948325Z", "modified": "2021-09-13T19:11:51.948325Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b63650b2-5036-4480-a675-e017fd97c91f", "created": "2021-09-13T19:12:16.833998Z", "modified": "2021-09-13T19:12:16.833998Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ef36e32a-5206-45a2-9b3d-81e573c2638e", "created": "2021-09-13T19:09:06.590302Z", "modified": "2021-09-13T19:09:06.590302Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c12dc720-d8d5-4f4c-9dff-31fe56b86556", "created": "2021-09-13T19:09:06.591178Z", "modified": "2021-09-13T19:09:06.591178Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c12dc720-d8d5-4f4c-9dff-31fe56b86556", "created": "2021-09-13T19:09:06.591178Z", "modified": "2021-09-13T19:09:06.591178Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c12dc720-d8d5-4f4c-9dff-31fe56b86556", "created": "2021-09-13T19:09:06.591178Z", "modified": "2021-09-13T19:09:06.591178Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c12dc720-d8d5-4f4c-9dff-31fe56b86556", "created": "2021-09-13T19:09:06.591178Z", "modified": "2021-09-13T19:09:06.591178Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c12dc720-d8d5-4f4c-9dff-31fe56b86556", "created": "2021-09-13T19:09:06.591178Z", "modified": "2021-09-13T19:09:06.591178Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3ca54ad4-a013-4062-85c2-b6c84315a3ad", "created": "2021-09-13T19:09:06.59203Z", "modified": "2021-09-13T19:09:06.59203Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3ca54ad4-a013-4062-85c2-b6c84315a3ad", "created": "2021-09-13T19:09:06.59203Z", "modified": "2021-09-13T19:09:06.59203Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3ca54ad4-a013-4062-85c2-b6c84315a3ad", "created": "2021-09-13T19:09:06.59203Z", "modified": "2021-09-13T19:09:06.59203Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3ca54ad4-a013-4062-85c2-b6c84315a3ad", "created": "2021-09-13T19:09:06.59203Z", "modified": "2021-09-13T19:09:06.59203Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--add3fde1-01a0-4c9d-a264-5cb24aac3333", "created": "2021-09-13T19:09:06.592877Z", "modified": "2021-09-13T19:09:06.592877Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--add3fde1-01a0-4c9d-a264-5cb24aac3333", "created": "2021-09-13T19:09:06.592877Z", "modified": "2021-09-13T19:09:06.592877Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--add3fde1-01a0-4c9d-a264-5cb24aac3333", "created": "2021-09-13T19:09:06.592877Z", "modified": "2021-09-13T19:09:06.592877Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d8a3ab60-6af9-45d8-a57d-3be1f082a10c", "created": "2021-09-13T19:09:06.593717Z", "modified": "2021-09-13T19:09:06.593717Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d8a3ab60-6af9-45d8-a57d-3be1f082a10c", "created": "2021-09-13T19:09:06.593717Z", "modified": "2021-09-13T19:09:06.593717Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d8a3ab60-6af9-45d8-a57d-3be1f082a10c", "created": "2021-09-13T19:09:06.593717Z", "modified": "2021-09-13T19:09:06.593717Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d8a3ab60-6af9-45d8-a57d-3be1f082a10c", "created": "2021-09-13T19:09:06.593717Z", "modified": "2021-09-13T19:09:06.593717Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d8a3ab60-6af9-45d8-a57d-3be1f082a10c", "created": "2021-09-13T19:09:06.593717Z", "modified": "2021-09-13T19:09:06.593717Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--94fb899e-3636-45dd-a21d-4ac93acc6a82", "created": "2021-09-13T19:09:06.59456Z", "modified": "2021-09-13T19:09:06.59456Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cae95477-2de4-4f1a-b6e0-0607e5fb8fe1", "created": "2021-09-13T19:10:43.546566Z", "modified": "2021-09-13T19:10:43.546566Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--94fb899e-3636-45dd-a21d-4ac93acc6a82", "created": "2021-09-13T19:09:06.59456Z", "modified": "2021-09-13T19:09:06.59456Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9b28f0cc-02c3-4e11-a065-4e413b87a34b", "created": "2021-09-13T19:11:21.195001Z", "modified": "2021-09-13T19:11:21.195001Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e4b10f67-3fb9-4662-8a37-c56c70016b30", "created": "2021-09-13T19:09:06.595433Z", "modified": "2021-09-13T19:09:06.595433Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e4b10f67-3fb9-4662-8a37-c56c70016b30", "created": "2021-09-13T19:09:06.595433Z", "modified": "2021-09-13T19:09:06.595433Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e4b10f67-3fb9-4662-8a37-c56c70016b30", "created": "2021-09-13T19:09:06.595433Z", "modified": "2021-09-13T19:09:06.595433Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e4b10f67-3fb9-4662-8a37-c56c70016b30", "created": "2021-09-13T19:09:06.595433Z", "modified": "2021-09-13T19:09:06.595433Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--93d09ad7-8941-486c-b793-ba2c98c9d7d9", "created": "2021-09-13T19:09:16.437226Z", "modified": "2021-09-13T19:09:16.437226Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--93d09ad7-8941-486c-b793-ba2c98c9d7d9", "created": "2021-09-13T19:09:16.437226Z", "modified": "2021-09-13T19:09:16.437226Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--93d09ad7-8941-486c-b793-ba2c98c9d7d9", "created": "2021-09-13T19:09:16.437226Z", "modified": "2021-09-13T19:09:16.437226Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--93d09ad7-8941-486c-b793-ba2c98c9d7d9", "created": "2021-09-13T19:09:16.437226Z", "modified": "2021-09-13T19:09:16.437226Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--94fd8628-dd1d-46d0-abb8-ee96e1dce333", "created": "2021-09-13T19:09:16.438152Z", "modified": "2021-09-13T19:09:16.438152Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--59dcc2ed-d3ef-4c7a-a6fa-05ac8222600f", "created": "2021-09-13T19:09:16.43911Z", "modified": "2021-09-13T19:09:16.43911Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--59dcc2ed-d3ef-4c7a-a6fa-05ac8222600f", "created": "2021-09-13T19:09:16.43911Z", "modified": "2021-09-13T19:09:16.43911Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--59dcc2ed-d3ef-4c7a-a6fa-05ac8222600f", "created": "2021-09-13T19:09:16.43911Z", "modified": "2021-09-13T19:09:16.43911Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--59dcc2ed-d3ef-4c7a-a6fa-05ac8222600f", "created": "2021-09-13T19:09:16.43911Z", "modified": "2021-09-13T19:09:16.43911Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--59dcc2ed-d3ef-4c7a-a6fa-05ac8222600f", "created": "2021-09-13T19:09:16.43911Z", "modified": "2021-09-13T19:09:16.43911Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--442912e9-d294-4c7d-80e1-9b4d1c6de3cd", "created": "2021-09-13T19:09:16.44002Z", "modified": "2021-09-13T19:09:16.44002Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--442912e9-d294-4c7d-80e1-9b4d1c6de3cd", "created": "2021-09-13T19:09:16.44002Z", "modified": "2021-09-13T19:09:16.44002Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--442912e9-d294-4c7d-80e1-9b4d1c6de3cd", "created": "2021-09-13T19:09:16.44002Z", "modified": "2021-09-13T19:09:16.44002Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--442912e9-d294-4c7d-80e1-9b4d1c6de3cd", "created": "2021-09-13T19:09:16.44002Z", "modified": "2021-09-13T19:09:16.44002Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7369be-238b-4bd0-a236-ef13debc377d", "created": "2021-09-13T19:09:16.440922Z", "modified": "2021-09-13T19:09:16.440922Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7369be-238b-4bd0-a236-ef13debc377d", "created": "2021-09-13T19:09:16.440922Z", "modified": "2021-09-13T19:09:16.440922Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7369be-238b-4bd0-a236-ef13debc377d", "created": "2021-09-13T19:09:16.440922Z", "modified": "2021-09-13T19:09:16.440922Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68698718-246c-47e1-bef8-85a38739af1a", "created": "2021-09-13T19:09:16.44182Z", "modified": "2021-09-13T19:09:16.44182Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f259026b-0c07-441c-b766-12ab109688ae", "created": "2021-09-13T19:09:16.442994Z", "modified": "2021-09-13T19:09:16.442994Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f259026b-0c07-441c-b766-12ab109688ae", "created": "2021-09-13T19:09:16.442994Z", "modified": "2021-09-13T19:09:16.442994Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f259026b-0c07-441c-b766-12ab109688ae", "created": "2021-09-13T19:09:16.442994Z", "modified": "2021-09-13T19:09:16.442994Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f259026b-0c07-441c-b766-12ab109688ae", "created": "2021-09-13T19:09:16.442994Z", "modified": "2021-09-13T19:09:16.442994Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f259026b-0c07-441c-b766-12ab109688ae", "created": "2021-09-13T19:09:16.442994Z", "modified": "2021-09-13T19:09:16.442994Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e4aa4c9-8cfa-4d5a-98d9-e22c09cbf2db", "created": "2021-09-13T19:09:23.824484Z", "modified": "2021-09-13T19:09:23.824484Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0db0ccbf-285c-430d-949a-e1281af71085", "created": "2021-09-13T19:09:23.82564Z", "modified": "2021-09-13T19:09:23.82564Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cae95477-2de4-4f1a-b6e0-0607e5fb8fe1", "created": "2021-09-13T19:10:43.546566Z", "modified": "2021-09-13T19:10:43.546566Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0db0ccbf-285c-430d-949a-e1281af71085", "created": "2021-09-13T19:09:23.82564Z", "modified": "2021-09-13T19:09:23.82564Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9b28f0cc-02c3-4e11-a065-4e413b87a34b", "created": "2021-09-13T19:11:21.195001Z", "modified": "2021-09-13T19:11:21.195001Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d5d8447-fc67-4706-9112-d60aeeb7f28a", "created": "2021-09-13T19:10:19.449555Z", "modified": "2021-09-13T19:10:19.449555Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d9269f3-7cc8-47ac-81f7-8ac878cd2b34", "created": "2021-09-13T19:10:25.583669Z", "modified": "2021-09-13T19:10:25.583669Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d5c7aa47-f8ab-4ce4-8dd9-4bd6ae1fc001", "created": "2021-09-13T19:10:43.550991Z", "modified": "2021-09-13T19:10:43.550991Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9647af33-51ea-450e-bb76-786668688ef8", "created": "2021-09-13T19:11:01.100603Z", "modified": "2021-09-13T19:11:01.100603Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--97f80aab-b16f-43da-ae08-3e6344cf6a57", "created": "2021-09-13T19:11:07.627497Z", "modified": "2021-09-13T19:11:07.627497Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6470f15f-1a1d-4b11-b9e1-03ee9320e9bd", "created": "2021-09-13T19:11:13.157211Z", "modified": "2021-09-13T19:11:13.157211Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--296860b4-ea87-46eb-84ae-3c2ff484fea9", "created": "2021-09-13T19:11:16.694033Z", "modified": "2021-09-13T19:11:16.694033Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e249b3e-2a2a-4e91-b970-cb7248636d9e", "created": "2021-09-13T19:11:21.196303Z", "modified": "2021-09-13T19:11:21.196303Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7acc6e6d-f24b-4f35-8fdf-2082d8fda889", "created": "2021-09-13T19:11:51.948325Z", "modified": "2021-09-13T19:11:51.948325Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b63650b2-5036-4480-a675-e017fd97c91f", "created": "2021-09-13T19:12:16.833998Z", "modified": "2021-09-13T19:12:16.833998Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce8401b4-f22f-4626-a03a-78d91e631371", "created": "2021-09-13T19:09:42.43447Z", "modified": "2021-09-13T19:09:42.43447Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce8401b4-f22f-4626-a03a-78d91e631371", "created": "2021-09-13T19:09:42.43447Z", "modified": "2021-09-13T19:09:42.43447Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce8401b4-f22f-4626-a03a-78d91e631371", "created": "2021-09-13T19:09:42.43447Z", "modified": "2021-09-13T19:09:42.43447Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce8401b4-f22f-4626-a03a-78d91e631371", "created": "2021-09-13T19:09:42.43447Z", "modified": "2021-09-13T19:09:42.43447Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--da7f13f6-2558-4730-ad6a-f5a5cbf29483", "created": "2021-09-13T19:09:42.435226Z", "modified": "2021-09-13T19:09:42.435226Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38844c67-a88b-4561-ae2a-5428eeb2fc6a", "created": "2021-09-13T19:09:42.435765Z", "modified": "2021-09-13T19:09:42.435765Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38844c67-a88b-4561-ae2a-5428eeb2fc6a", "created": "2021-09-13T19:09:42.435765Z", "modified": "2021-09-13T19:09:42.435765Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38844c67-a88b-4561-ae2a-5428eeb2fc6a", "created": "2021-09-13T19:09:42.435765Z", "modified": "2021-09-13T19:09:42.435765Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38844c67-a88b-4561-ae2a-5428eeb2fc6a", "created": "2021-09-13T19:09:42.435765Z", "modified": "2021-09-13T19:09:42.435765Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38844c67-a88b-4561-ae2a-5428eeb2fc6a", "created": "2021-09-13T19:09:42.435765Z", "modified": "2021-09-13T19:09:42.435765Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2aa5acf4-a867-4717-8928-4eabf47308a9", "created": "2021-09-13T19:09:42.436295Z", "modified": "2021-09-13T19:09:42.436295Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2aa5acf4-a867-4717-8928-4eabf47308a9", "created": "2021-09-13T19:09:42.436295Z", "modified": "2021-09-13T19:09:42.436295Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2aa5acf4-a867-4717-8928-4eabf47308a9", "created": "2021-09-13T19:09:42.436295Z", "modified": "2021-09-13T19:09:42.436295Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2aa5acf4-a867-4717-8928-4eabf47308a9", "created": "2021-09-13T19:09:42.436295Z", "modified": "2021-09-13T19:09:42.436295Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--660732fd-a574-4067-ab23-29b37677247b", "created": "2021-09-13T19:09:42.436828Z", "modified": "2021-09-13T19:09:42.436828Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--660732fd-a574-4067-ab23-29b37677247b", "created": "2021-09-13T19:09:42.436828Z", "modified": "2021-09-13T19:09:42.436828Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--660732fd-a574-4067-ab23-29b37677247b", "created": "2021-09-13T19:09:42.436828Z", "modified": "2021-09-13T19:09:42.436828Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fcf2535d-55b4-4788-8db5-7d914766b525", "created": "2021-09-13T19:09:42.43789Z", "modified": "2021-09-13T19:09:42.43789Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0da11244-67dc-4657-8058-275649096dd7", "created": "2021-09-13T19:09:42.438415Z", "modified": "2021-09-13T19:09:42.438415Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0da11244-67dc-4657-8058-275649096dd7", "created": "2021-09-13T19:09:42.438415Z", "modified": "2021-09-13T19:09:42.438415Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0da11244-67dc-4657-8058-275649096dd7", "created": "2021-09-13T19:09:42.438415Z", "modified": "2021-09-13T19:09:42.438415Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0da11244-67dc-4657-8058-275649096dd7", "created": "2021-09-13T19:09:42.438415Z", "modified": "2021-09-13T19:09:42.438415Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0da11244-67dc-4657-8058-275649096dd7", "created": "2021-09-13T19:09:42.438415Z", "modified": "2021-09-13T19:09:42.438415Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2f4e8307-620c-464b-b167-78f5bcd26ca0", "created": "2021-09-13T19:09:47.573989Z", "modified": "2021-09-13T19:09:47.573989Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2f4e8307-620c-464b-b167-78f5bcd26ca0", "created": "2021-09-13T19:09:47.573989Z", "modified": "2021-09-13T19:09:47.573989Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2f4e8307-620c-464b-b167-78f5bcd26ca0", "created": "2021-09-13T19:09:47.573989Z", "modified": "2021-09-13T19:09:47.573989Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2f4e8307-620c-464b-b167-78f5bcd26ca0", "created": "2021-09-13T19:09:47.573989Z", "modified": "2021-09-13T19:09:47.573989Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5053d4aa-202f-4eb6-8af0-b298a0980ef7", "created": "2021-09-13T19:09:47.574784Z", "modified": "2021-09-13T19:09:47.574784Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0fbca480-c8cd-425f-801a-e140b7774288", "created": "2021-09-13T19:09:47.575565Z", "modified": "2021-09-13T19:09:47.575565Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0fbca480-c8cd-425f-801a-e140b7774288", "created": "2021-09-13T19:09:47.575565Z", "modified": "2021-09-13T19:09:47.575565Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0fbca480-c8cd-425f-801a-e140b7774288", "created": "2021-09-13T19:09:47.575565Z", "modified": "2021-09-13T19:09:47.575565Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--aa05d13c-a11e-4d21-bbf1-9268a06fa44f", "created": "2021-09-13T19:09:47.577104Z", "modified": "2021-09-13T19:09:47.577104Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e230473b-ad32-4659-9f32-01db3cddfb3e", "created": "2021-09-13T19:09:47.579167Z", "modified": "2021-09-13T19:09:47.579167Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e230473b-ad32-4659-9f32-01db3cddfb3e", "created": "2021-09-13T19:09:47.579167Z", "modified": "2021-09-13T19:09:47.579167Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e230473b-ad32-4659-9f32-01db3cddfb3e", "created": "2021-09-13T19:09:47.579167Z", "modified": "2021-09-13T19:09:47.579167Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e230473b-ad32-4659-9f32-01db3cddfb3e", "created": "2021-09-13T19:09:47.579167Z", "modified": "2021-09-13T19:09:47.579167Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--222f3868-5cbe-4f75-a8bd-df926ecc4262", "created": "2021-09-13T19:09:58.590677Z", "modified": "2021-09-13T19:09:58.590677Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--222f3868-5cbe-4f75-a8bd-df926ecc4262", "created": "2021-09-13T19:09:58.590677Z", "modified": "2021-09-13T19:09:58.590677Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--222f3868-5cbe-4f75-a8bd-df926ecc4262", "created": "2021-09-13T19:09:58.590677Z", "modified": "2021-09-13T19:09:58.590677Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--222f3868-5cbe-4f75-a8bd-df926ecc4262", "created": "2021-09-13T19:09:58.590677Z", "modified": "2021-09-13T19:09:58.590677Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--42f7db48-a652-4818-975b-1478e10ff2ab", "created": "2021-09-13T19:09:58.591585Z", "modified": "2021-09-13T19:09:58.591585Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2edffffd-4fbd-4d03-97ff-80450a0e533d", "created": "2021-09-13T19:09:58.59244Z", "modified": "2021-09-13T19:09:58.59244Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2edffffd-4fbd-4d03-97ff-80450a0e533d", "created": "2021-09-13T19:09:58.59244Z", "modified": "2021-09-13T19:09:58.59244Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2edffffd-4fbd-4d03-97ff-80450a0e533d", "created": "2021-09-13T19:09:58.59244Z", "modified": "2021-09-13T19:09:58.59244Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--47cecd5b-0b52-4f1c-a839-903c029c554e", "created": "2021-09-13T19:09:58.593293Z", "modified": "2021-09-13T19:09:58.593293Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2fafed9-1661-4e0e-80df-9e771903f859", "created": "2021-09-13T19:09:58.595302Z", "modified": "2021-09-13T19:09:58.595302Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2fafed9-1661-4e0e-80df-9e771903f859", "created": "2021-09-13T19:09:58.595302Z", "modified": "2021-09-13T19:09:58.595302Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2fafed9-1661-4e0e-80df-9e771903f859", "created": "2021-09-13T19:09:58.595302Z", "modified": "2021-09-13T19:09:58.595302Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2fafed9-1661-4e0e-80df-9e771903f859", "created": "2021-09-13T19:09:58.595302Z", "modified": "2021-09-13T19:09:58.595302Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d5d8447-fc67-4706-9112-d60aeeb7f28a", "created": "2021-09-13T19:10:19.449555Z", "modified": "2021-09-13T19:10:19.449555Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d9269f3-7cc8-47ac-81f7-8ac878cd2b34", "created": "2021-09-13T19:10:25.583669Z", "modified": "2021-09-13T19:10:25.583669Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d5c7aa47-f8ab-4ce4-8dd9-4bd6ae1fc001", "created": "2021-09-13T19:10:43.550991Z", "modified": "2021-09-13T19:10:43.550991Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9647af33-51ea-450e-bb76-786668688ef8", "created": "2021-09-13T19:11:01.100603Z", "modified": "2021-09-13T19:11:01.100603Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--97f80aab-b16f-43da-ae08-3e6344cf6a57", "created": "2021-09-13T19:11:07.627497Z", "modified": "2021-09-13T19:11:07.627497Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6470f15f-1a1d-4b11-b9e1-03ee9320e9bd", "created": "2021-09-13T19:11:13.157211Z", "modified": "2021-09-13T19:11:13.157211Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--296860b4-ea87-46eb-84ae-3c2ff484fea9", "created": "2021-09-13T19:11:16.694033Z", "modified": "2021-09-13T19:11:16.694033Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e249b3e-2a2a-4e91-b970-cb7248636d9e", "created": "2021-09-13T19:11:21.196303Z", "modified": "2021-09-13T19:11:21.196303Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7acc6e6d-f24b-4f35-8fdf-2082d8fda889", "created": "2021-09-13T19:11:51.948325Z", "modified": "2021-09-13T19:11:51.948325Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b63650b2-5036-4480-a675-e017fd97c91f", "created": "2021-09-13T19:12:16.833998Z", "modified": "2021-09-13T19:12:16.833998Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--41219661-ebbb-4886-abd0-015fef830133", "created": "2021-09-13T19:10:04.581522Z", "modified": "2021-09-13T19:10:04.581522Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--41219661-ebbb-4886-abd0-015fef830133", "created": "2021-09-13T19:10:04.581522Z", "modified": "2021-09-13T19:10:04.581522Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--41219661-ebbb-4886-abd0-015fef830133", "created": "2021-09-13T19:10:04.581522Z", "modified": "2021-09-13T19:10:04.581522Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--41219661-ebbb-4886-abd0-015fef830133", "created": "2021-09-13T19:10:04.581522Z", "modified": "2021-09-13T19:10:04.581522Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ef8c092a-2b34-4902-a7b1-8406067d809c", "created": "2021-09-13T19:10:04.581894Z", "modified": "2021-09-13T19:10:04.581894Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0219cf57-594f-44dc-ba37-2e45cc648852", "created": "2021-09-13T19:10:04.582264Z", "modified": "2021-09-13T19:10:04.582264Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0219cf57-594f-44dc-ba37-2e45cc648852", "created": "2021-09-13T19:10:04.582264Z", "modified": "2021-09-13T19:10:04.582264Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0219cf57-594f-44dc-ba37-2e45cc648852", "created": "2021-09-13T19:10:04.582264Z", "modified": "2021-09-13T19:10:04.582264Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0219cf57-594f-44dc-ba37-2e45cc648852", "created": "2021-09-13T19:10:04.582264Z", "modified": "2021-09-13T19:10:04.582264Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0219cf57-594f-44dc-ba37-2e45cc648852", "created": "2021-09-13T19:10:04.582264Z", "modified": "2021-09-13T19:10:04.582264Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e99a9cde-5f47-41bf-9301-80c726e71d1b", "created": "2021-09-13T19:10:04.582638Z", "modified": "2021-09-13T19:10:04.582638Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e99a9cde-5f47-41bf-9301-80c726e71d1b", "created": "2021-09-13T19:10:04.582638Z", "modified": "2021-09-13T19:10:04.582638Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e99a9cde-5f47-41bf-9301-80c726e71d1b", "created": "2021-09-13T19:10:04.582638Z", "modified": "2021-09-13T19:10:04.582638Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e99a9cde-5f47-41bf-9301-80c726e71d1b", "created": "2021-09-13T19:10:04.582638Z", "modified": "2021-09-13T19:10:04.582638Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db0bef71-aa24-4688-b448-9e3c3910b850", "created": "2021-09-13T19:10:04.583036Z", "modified": "2021-09-13T19:10:04.583036Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db0bef71-aa24-4688-b448-9e3c3910b850", "created": "2021-09-13T19:10:04.583036Z", "modified": "2021-09-13T19:10:04.583036Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db0bef71-aa24-4688-b448-9e3c3910b850", "created": "2021-09-13T19:10:04.583036Z", "modified": "2021-09-13T19:10:04.583036Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c1456669-7072-44aa-bf73-82055f82777b", "created": "2021-09-13T19:10:04.583408Z", "modified": "2021-09-13T19:10:04.583408Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2db03ef-9c1b-4f74-b301-90f3020d732c", "created": "2021-09-13T19:10:04.583776Z", "modified": "2021-09-13T19:10:04.583776Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2db03ef-9c1b-4f74-b301-90f3020d732c", "created": "2021-09-13T19:10:04.583776Z", "modified": "2021-09-13T19:10:04.583776Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2db03ef-9c1b-4f74-b301-90f3020d732c", "created": "2021-09-13T19:10:04.583776Z", "modified": "2021-09-13T19:10:04.583776Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2db03ef-9c1b-4f74-b301-90f3020d732c", "created": "2021-09-13T19:10:04.583776Z", "modified": "2021-09-13T19:10:04.583776Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2db03ef-9c1b-4f74-b301-90f3020d732c", "created": "2021-09-13T19:10:04.583776Z", "modified": "2021-09-13T19:10:04.583776Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--005c9a41-5530-4560-b60c-eb3e1b35c4da", "created": "2021-09-13T19:10:19.853973Z", "modified": "2021-09-13T19:10:19.853973Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--005c9a41-5530-4560-b60c-eb3e1b35c4da", "created": "2021-09-13T19:10:19.853973Z", "modified": "2021-09-13T19:10:19.853973Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--005c9a41-5530-4560-b60c-eb3e1b35c4da", "created": "2021-09-13T19:10:19.853973Z", "modified": "2021-09-13T19:10:19.853973Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--005c9a41-5530-4560-b60c-eb3e1b35c4da", "created": "2021-09-13T19:10:19.853973Z", "modified": "2021-09-13T19:10:19.853973Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--437dca17-3e4f-431f-81fe-f915ef256d95", "created": "2021-09-13T19:10:19.854599Z", "modified": "2021-09-13T19:10:19.854599Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--05493dfd-5182-43de-871d-8407999b7d9f", "created": "2021-09-13T19:10:19.855807Z", "modified": "2021-09-13T19:10:19.855807Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--05493dfd-5182-43de-871d-8407999b7d9f", "created": "2021-09-13T19:10:19.855807Z", "modified": "2021-09-13T19:10:19.855807Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--05493dfd-5182-43de-871d-8407999b7d9f", "created": "2021-09-13T19:10:19.855807Z", "modified": "2021-09-13T19:10:19.855807Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--689038ba-b56b-4022-b060-512e27b0ef35", "created": "2021-09-13T19:10:19.856949Z", "modified": "2021-09-13T19:10:19.856949Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a93e873e-dd4a-4d62-aa50-44795274118b", "created": "2021-09-13T19:10:19.858649Z", "modified": "2021-09-13T19:10:19.858649Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a93e873e-dd4a-4d62-aa50-44795274118b", "created": "2021-09-13T19:10:19.858649Z", "modified": "2021-09-13T19:10:19.858649Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a93e873e-dd4a-4d62-aa50-44795274118b", "created": "2021-09-13T19:10:19.858649Z", "modified": "2021-09-13T19:10:19.858649Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a93e873e-dd4a-4d62-aa50-44795274118b", "created": "2021-09-13T19:10:19.858649Z", "modified": "2021-09-13T19:10:19.858649Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d5d8447-fc67-4706-9112-d60aeeb7f28a", "created": "2021-09-13T19:10:19.449555Z", "modified": "2021-09-13T19:10:19.449555Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d9269f3-7cc8-47ac-81f7-8ac878cd2b34", "created": "2021-09-13T19:10:25.583669Z", "modified": "2021-09-13T19:10:25.583669Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d5c7aa47-f8ab-4ce4-8dd9-4bd6ae1fc001", "created": "2021-09-13T19:10:43.550991Z", "modified": "2021-09-13T19:10:43.550991Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9647af33-51ea-450e-bb76-786668688ef8", "created": "2021-09-13T19:11:01.100603Z", "modified": "2021-09-13T19:11:01.100603Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--97f80aab-b16f-43da-ae08-3e6344cf6a57", "created": "2021-09-13T19:11:07.627497Z", "modified": "2021-09-13T19:11:07.627497Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6470f15f-1a1d-4b11-b9e1-03ee9320e9bd", "created": "2021-09-13T19:11:13.157211Z", "modified": "2021-09-13T19:11:13.157211Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--296860b4-ea87-46eb-84ae-3c2ff484fea9", "created": "2021-09-13T19:11:16.694033Z", "modified": "2021-09-13T19:11:16.694033Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e249b3e-2a2a-4e91-b970-cb7248636d9e", "created": "2021-09-13T19:11:21.196303Z", "modified": "2021-09-13T19:11:21.196303Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7acc6e6d-f24b-4f35-8fdf-2082d8fda889", "created": "2021-09-13T19:11:51.948325Z", "modified": "2021-09-13T19:11:51.948325Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b63650b2-5036-4480-a675-e017fd97c91f", "created": "2021-09-13T19:12:16.833998Z", "modified": "2021-09-13T19:12:16.833998Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d9cfbace-a76a-4980-ab0e-65cf09212a42", "created": "2021-09-13T19:10:24.989706Z", "modified": "2021-09-13T19:10:24.989706Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d9cfbace-a76a-4980-ab0e-65cf09212a42", "created": "2021-09-13T19:10:24.989706Z", "modified": "2021-09-13T19:10:24.989706Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d9cfbace-a76a-4980-ab0e-65cf09212a42", "created": "2021-09-13T19:10:24.989706Z", "modified": "2021-09-13T19:10:24.989706Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d9cfbace-a76a-4980-ab0e-65cf09212a42", "created": "2021-09-13T19:10:24.989706Z", "modified": "2021-09-13T19:10:24.989706Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d9cfbace-a76a-4980-ab0e-65cf09212a42", "created": "2021-09-13T19:10:24.989706Z", "modified": "2021-09-13T19:10:24.989706Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c79803fa-9e63-434a-83b9-bfae1d0df723", "created": "2021-09-13T19:10:24.990873Z", "modified": "2021-09-13T19:10:24.990873Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c79803fa-9e63-434a-83b9-bfae1d0df723", "created": "2021-09-13T19:10:24.990873Z", "modified": "2021-09-13T19:10:24.990873Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c79803fa-9e63-434a-83b9-bfae1d0df723", "created": "2021-09-13T19:10:24.990873Z", "modified": "2021-09-13T19:10:24.990873Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c79803fa-9e63-434a-83b9-bfae1d0df723", "created": "2021-09-13T19:10:24.990873Z", "modified": "2021-09-13T19:10:24.990873Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c79803fa-9e63-434a-83b9-bfae1d0df723", "created": "2021-09-13T19:10:24.990873Z", "modified": "2021-09-13T19:10:24.990873Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eafcb35d-3ba2-4c1c-bd5b-a25f70749c7a", "created": "2021-09-13T19:10:24.991343Z", "modified": "2021-09-13T19:10:24.991343Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eafcb35d-3ba2-4c1c-bd5b-a25f70749c7a", "created": "2021-09-13T19:10:24.991343Z", "modified": "2021-09-13T19:10:24.991343Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eafcb35d-3ba2-4c1c-bd5b-a25f70749c7a", "created": "2021-09-13T19:10:24.991343Z", "modified": "2021-09-13T19:10:24.991343Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eafcb35d-3ba2-4c1c-bd5b-a25f70749c7a", "created": "2021-09-13T19:10:24.991343Z", "modified": "2021-09-13T19:10:24.991343Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e1555b8f-af65-40d4-8c5e-75db3870ad36", "created": "2021-09-13T19:10:24.991806Z", "modified": "2021-09-13T19:10:24.991806Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e1555b8f-af65-40d4-8c5e-75db3870ad36", "created": "2021-09-13T19:10:24.991806Z", "modified": "2021-09-13T19:10:24.991806Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e1555b8f-af65-40d4-8c5e-75db3870ad36", "created": "2021-09-13T19:10:24.991806Z", "modified": "2021-09-13T19:10:24.991806Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b6e68c8b-f4f3-42b3-901d-ce095124fd4b", "created": "2021-09-13T19:10:24.992263Z", "modified": "2021-09-13T19:10:24.992263Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b6e68c8b-f4f3-42b3-901d-ce095124fd4b", "created": "2021-09-13T19:10:24.992263Z", "modified": "2021-09-13T19:10:24.992263Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b6e68c8b-f4f3-42b3-901d-ce095124fd4b", "created": "2021-09-13T19:10:24.992263Z", "modified": "2021-09-13T19:10:24.992263Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b6e68c8b-f4f3-42b3-901d-ce095124fd4b", "created": "2021-09-13T19:10:24.992263Z", "modified": "2021-09-13T19:10:24.992263Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--972c97d5-1edb-451d-a3c8-00179d2bd192", "created": "2021-09-13T19:10:37.649321Z", "modified": "2021-09-13T19:10:37.649321Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--972c97d5-1edb-451d-a3c8-00179d2bd192", "created": "2021-09-13T19:10:37.649321Z", "modified": "2021-09-13T19:10:37.649321Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--972c97d5-1edb-451d-a3c8-00179d2bd192", "created": "2021-09-13T19:10:37.649321Z", "modified": "2021-09-13T19:10:37.649321Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--972c97d5-1edb-451d-a3c8-00179d2bd192", "created": "2021-09-13T19:10:37.649321Z", "modified": "2021-09-13T19:10:37.649321Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--44bba2a7-1386-4932-abfd-8b2239e0bf46", "created": "2021-09-13T19:10:37.650396Z", "modified": "2021-09-13T19:10:37.650396Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fe92155-4f76-4890-9760-57103ca8a4a4", "created": "2021-09-13T19:10:37.6515Z", "modified": "2021-09-13T19:10:37.6515Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fe92155-4f76-4890-9760-57103ca8a4a4", "created": "2021-09-13T19:10:37.6515Z", "modified": "2021-09-13T19:10:37.6515Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fe92155-4f76-4890-9760-57103ca8a4a4", "created": "2021-09-13T19:10:37.6515Z", "modified": "2021-09-13T19:10:37.6515Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fe92155-4f76-4890-9760-57103ca8a4a4", "created": "2021-09-13T19:10:37.6515Z", "modified": "2021-09-13T19:10:37.6515Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fe92155-4f76-4890-9760-57103ca8a4a4", "created": "2021-09-13T19:10:37.6515Z", "modified": "2021-09-13T19:10:37.6515Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--928161bb-5050-498a-ab53-002dbf0bf5d6", "created": "2021-09-13T19:10:37.652572Z", "modified": "2021-09-13T19:10:37.652572Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--928161bb-5050-498a-ab53-002dbf0bf5d6", "created": "2021-09-13T19:10:37.652572Z", "modified": "2021-09-13T19:10:37.652572Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--928161bb-5050-498a-ab53-002dbf0bf5d6", "created": "2021-09-13T19:10:37.652572Z", "modified": "2021-09-13T19:10:37.652572Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--928161bb-5050-498a-ab53-002dbf0bf5d6", "created": "2021-09-13T19:10:37.652572Z", "modified": "2021-09-13T19:10:37.652572Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6a302786-8888-4a81-b606-708dd048c338", "created": "2021-09-13T19:10:37.653623Z", "modified": "2021-09-13T19:10:37.653623Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6a302786-8888-4a81-b606-708dd048c338", "created": "2021-09-13T19:10:37.653623Z", "modified": "2021-09-13T19:10:37.653623Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6a302786-8888-4a81-b606-708dd048c338", "created": "2021-09-13T19:10:37.653623Z", "modified": "2021-09-13T19:10:37.653623Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dfe4085f-64f4-4303-b6af-7b5adaf4d090", "created": "2021-09-13T19:10:37.654675Z", "modified": "2021-09-13T19:10:37.654675Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6ee93bb4-db09-4503-80ec-89329cbe2010", "created": "2021-09-13T19:10:37.655759Z", "modified": "2021-09-13T19:10:37.655759Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6ee93bb4-db09-4503-80ec-89329cbe2010", "created": "2021-09-13T19:10:37.655759Z", "modified": "2021-09-13T19:10:37.655759Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6ee93bb4-db09-4503-80ec-89329cbe2010", "created": "2021-09-13T19:10:37.655759Z", "modified": "2021-09-13T19:10:37.655759Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6ee93bb4-db09-4503-80ec-89329cbe2010", "created": "2021-09-13T19:10:37.655759Z", "modified": "2021-09-13T19:10:37.655759Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6ee93bb4-db09-4503-80ec-89329cbe2010", "created": "2021-09-13T19:10:37.655759Z", "modified": "2021-09-13T19:10:37.655759Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce141119-e708-4dae-b306-a1a3e6a8e295", "created": "2021-09-13T19:10:43.909727Z", "modified": "2021-09-13T19:10:43.909727Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce141119-e708-4dae-b306-a1a3e6a8e295", "created": "2021-09-13T19:10:43.909727Z", "modified": "2021-09-13T19:10:43.909727Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce141119-e708-4dae-b306-a1a3e6a8e295", "created": "2021-09-13T19:10:43.909727Z", "modified": "2021-09-13T19:10:43.909727Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce141119-e708-4dae-b306-a1a3e6a8e295", "created": "2021-09-13T19:10:43.909727Z", "modified": "2021-09-13T19:10:43.909727Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--95fc55f8-4e26-460c-85b5-77db30d27a83", "created": "2021-09-13T19:10:43.910834Z", "modified": "2021-09-13T19:10:43.910834Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--829849f3-55d5-4e79-a291-a5d3487ac86a", "created": "2021-09-13T19:10:43.911287Z", "modified": "2021-09-13T19:10:43.911287Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--829849f3-55d5-4e79-a291-a5d3487ac86a", "created": "2021-09-13T19:10:43.911287Z", "modified": "2021-09-13T19:10:43.911287Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--829849f3-55d5-4e79-a291-a5d3487ac86a", "created": "2021-09-13T19:10:43.911287Z", "modified": "2021-09-13T19:10:43.911287Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--829849f3-55d5-4e79-a291-a5d3487ac86a", "created": "2021-09-13T19:10:43.911287Z", "modified": "2021-09-13T19:10:43.911287Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--829849f3-55d5-4e79-a291-a5d3487ac86a", "created": "2021-09-13T19:10:43.911287Z", "modified": "2021-09-13T19:10:43.911287Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01d5f56e-041b-491f-b22b-31ba9f1e5d29", "created": "2021-09-13T19:10:43.911735Z", "modified": "2021-09-13T19:10:43.911735Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01d5f56e-041b-491f-b22b-31ba9f1e5d29", "created": "2021-09-13T19:10:43.911735Z", "modified": "2021-09-13T19:10:43.911735Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01d5f56e-041b-491f-b22b-31ba9f1e5d29", "created": "2021-09-13T19:10:43.911735Z", "modified": "2021-09-13T19:10:43.911735Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01d5f56e-041b-491f-b22b-31ba9f1e5d29", "created": "2021-09-13T19:10:43.911735Z", "modified": "2021-09-13T19:10:43.911735Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2e8c7524-7ba4-49ac-9acc-b62b7abe5fe0", "created": "2021-09-13T19:10:43.912179Z", "modified": "2021-09-13T19:10:43.912179Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2e8c7524-7ba4-49ac-9acc-b62b7abe5fe0", "created": "2021-09-13T19:10:43.912179Z", "modified": "2021-09-13T19:10:43.912179Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2e8c7524-7ba4-49ac-9acc-b62b7abe5fe0", "created": "2021-09-13T19:10:43.912179Z", "modified": "2021-09-13T19:10:43.912179Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5c2bb0bd-69e7-4bbe-9059-0a62e594c1f3", "created": "2021-09-13T19:10:43.912616Z", "modified": "2021-09-13T19:10:43.912616Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5c2bb0bd-69e7-4bbe-9059-0a62e594c1f3", "created": "2021-09-13T19:10:43.912616Z", "modified": "2021-09-13T19:10:43.912616Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5c2bb0bd-69e7-4bbe-9059-0a62e594c1f3", "created": "2021-09-13T19:10:43.912616Z", "modified": "2021-09-13T19:10:43.912616Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3a9dfe7-eb90-4f02-8e24-ec956899a7e3", "created": "2021-09-13T19:10:43.913049Z", "modified": "2021-09-13T19:10:43.913049Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fb295c4-8db2-488d-9f73-ade064386eca", "created": "2021-09-13T19:10:43.913485Z", "modified": "2021-09-13T19:10:43.913485Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fb295c4-8db2-488d-9f73-ade064386eca", "created": "2021-09-13T19:10:43.913485Z", "modified": "2021-09-13T19:10:43.913485Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fb295c4-8db2-488d-9f73-ade064386eca", "created": "2021-09-13T19:10:43.913485Z", "modified": "2021-09-13T19:10:43.913485Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fb295c4-8db2-488d-9f73-ade064386eca", "created": "2021-09-13T19:10:43.913485Z", "modified": "2021-09-13T19:10:43.913485Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fb295c4-8db2-488d-9f73-ade064386eca", "created": "2021-09-13T19:10:43.913485Z", "modified": "2021-09-13T19:10:43.913485Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d5d8447-fc67-4706-9112-d60aeeb7f28a", "created": "2021-09-13T19:10:19.449555Z", "modified": "2021-09-13T19:10:19.449555Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d9269f3-7cc8-47ac-81f7-8ac878cd2b34", "created": "2021-09-13T19:10:25.583669Z", "modified": "2021-09-13T19:10:25.583669Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d5c7aa47-f8ab-4ce4-8dd9-4bd6ae1fc001", "created": "2021-09-13T19:10:43.550991Z", "modified": "2021-09-13T19:10:43.550991Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9647af33-51ea-450e-bb76-786668688ef8", "created": "2021-09-13T19:11:01.100603Z", "modified": "2021-09-13T19:11:01.100603Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--97f80aab-b16f-43da-ae08-3e6344cf6a57", "created": "2021-09-13T19:11:07.627497Z", "modified": "2021-09-13T19:11:07.627497Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6470f15f-1a1d-4b11-b9e1-03ee9320e9bd", "created": "2021-09-13T19:11:13.157211Z", "modified": "2021-09-13T19:11:13.157211Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--296860b4-ea87-46eb-84ae-3c2ff484fea9", "created": "2021-09-13T19:11:16.694033Z", "modified": "2021-09-13T19:11:16.694033Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e249b3e-2a2a-4e91-b970-cb7248636d9e", "created": "2021-09-13T19:11:21.196303Z", "modified": "2021-09-13T19:11:21.196303Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7acc6e6d-f24b-4f35-8fdf-2082d8fda889", "created": "2021-09-13T19:11:51.948325Z", "modified": "2021-09-13T19:11:51.948325Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b63650b2-5036-4480-a675-e017fd97c91f", "created": "2021-09-13T19:12:16.833998Z", "modified": "2021-09-13T19:12:16.833998Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc8026b-4be6-4a86-b75e-0f9bbe63f54b", "created": "2021-09-13T19:10:49.827216Z", "modified": "2021-09-13T19:10:49.827216Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e7812ee9-03f5-451c-ad62-5f45ccd6edfd", "created": "2021-09-13T19:10:49.827769Z", "modified": "2021-09-13T19:10:49.827769Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e7812ee9-03f5-451c-ad62-5f45ccd6edfd", "created": "2021-09-13T19:10:49.827769Z", "modified": "2021-09-13T19:10:49.827769Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e7812ee9-03f5-451c-ad62-5f45ccd6edfd", "created": "2021-09-13T19:10:49.827769Z", "modified": "2021-09-13T19:10:49.827769Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e7812ee9-03f5-451c-ad62-5f45ccd6edfd", "created": "2021-09-13T19:10:49.827769Z", "modified": "2021-09-13T19:10:49.827769Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e7812ee9-03f5-451c-ad62-5f45ccd6edfd", "created": "2021-09-13T19:10:49.827769Z", "modified": "2021-09-13T19:10:49.827769Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c6b4bb1-9f82-43c0-8992-75472c3c8e7d", "created": "2021-09-13T19:10:49.828873Z", "modified": "2021-09-13T19:10:49.828873Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c6b4bb1-9f82-43c0-8992-75472c3c8e7d", "created": "2021-09-13T19:10:49.828873Z", "modified": "2021-09-13T19:10:49.828873Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c6b4bb1-9f82-43c0-8992-75472c3c8e7d", "created": "2021-09-13T19:10:49.828873Z", "modified": "2021-09-13T19:10:49.828873Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0ca8d70a-e5f4-4d9e-a312-f3c7eff86627", "created": "2021-09-13T19:10:49.829432Z", "modified": "2021-09-13T19:10:49.829432Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0ca8d70a-e5f4-4d9e-a312-f3c7eff86627", "created": "2021-09-13T19:10:49.829432Z", "modified": "2021-09-13T19:10:49.829432Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0ca8d70a-e5f4-4d9e-a312-f3c7eff86627", "created": "2021-09-13T19:10:49.829432Z", "modified": "2021-09-13T19:10:49.829432Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0ca8d70a-e5f4-4d9e-a312-f3c7eff86627", "created": "2021-09-13T19:10:49.829432Z", "modified": "2021-09-13T19:10:49.829432Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0ca8d70a-e5f4-4d9e-a312-f3c7eff86627", "created": "2021-09-13T19:10:49.829432Z", "modified": "2021-09-13T19:10:49.829432Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--574aedcd-ea20-46ad-ab47-e9f5936fe2d2", "created": "2021-09-13T19:10:49.829992Z", "modified": "2021-09-13T19:10:49.829992Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cae95477-2de4-4f1a-b6e0-0607e5fb8fe1", "created": "2021-09-13T19:10:43.546566Z", "modified": "2021-09-13T19:10:43.546566Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--574aedcd-ea20-46ad-ab47-e9f5936fe2d2", "created": "2021-09-13T19:10:49.829992Z", "modified": "2021-09-13T19:10:49.829992Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9b28f0cc-02c3-4e11-a065-4e413b87a34b", "created": "2021-09-13T19:11:21.195001Z", "modified": "2021-09-13T19:11:21.195001Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a6db25f8-859d-455c-920b-2b3a7a5a54dc", "created": "2021-09-13T19:10:49.830545Z", "modified": "2021-09-13T19:10:49.830545Z", "name": "Windows Service MITRE T1543", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and Reg. \nAdversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.\nAn adversary may also incorporate Masquerading by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. \nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1543/003/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1473f98d-3322-42a8-8f27-04c52fd318a8", "created": "2021-09-13T19:11:51.951757Z", "modified": "2021-09-13T19:11:51.951757Z", "name": "Windows Service MITRE T1543", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and Reg. \nAdversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.\nAn adversary may also incorporate Masquerading by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. \nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1543/003/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--668dd096-ab6d-4364-8fb2-4c8c6095f470", "created": "2021-09-13T19:10:49.831111Z", "modified": "2021-09-13T19:10:49.831111Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--668dd096-ab6d-4364-8fb2-4c8c6095f470", "created": "2021-09-13T19:10:49.831111Z", "modified": "2021-09-13T19:10:49.831111Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--668dd096-ab6d-4364-8fb2-4c8c6095f470", "created": "2021-09-13T19:10:49.831111Z", "modified": "2021-09-13T19:10:49.831111Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--668dd096-ab6d-4364-8fb2-4c8c6095f470", "created": "2021-09-13T19:10:49.831111Z", "modified": "2021-09-13T19:10:49.831111Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9704ae78-bd8c-4c01-ab2c-9812cc83d48c", "created": "2021-09-13T19:10:59.73777Z", "modified": "2021-09-13T19:10:59.73777Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9704ae78-bd8c-4c01-ab2c-9812cc83d48c", "created": "2021-09-13T19:10:59.73777Z", "modified": "2021-09-13T19:10:59.73777Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9704ae78-bd8c-4c01-ab2c-9812cc83d48c", "created": "2021-09-13T19:10:59.73777Z", "modified": "2021-09-13T19:10:59.73777Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9704ae78-bd8c-4c01-ab2c-9812cc83d48c", "created": "2021-09-13T19:10:59.73777Z", "modified": "2021-09-13T19:10:59.73777Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8dac9bd3-257e-449d-80a3-4fe86f5c02df", "created": "2021-09-13T19:10:59.738462Z", "modified": "2021-09-13T19:10:59.738462Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--823539e2-9e9d-49fa-9b4d-786b7d608a8f", "created": "2021-09-13T19:10:59.739169Z", "modified": "2021-09-13T19:10:59.739169Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--823539e2-9e9d-49fa-9b4d-786b7d608a8f", "created": "2021-09-13T19:10:59.739169Z", "modified": "2021-09-13T19:10:59.739169Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--823539e2-9e9d-49fa-9b4d-786b7d608a8f", "created": "2021-09-13T19:10:59.739169Z", "modified": "2021-09-13T19:10:59.739169Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cdd438ce-c272-4023-8b09-b91b43b5f5ef", "created": "2021-09-13T19:10:59.739846Z", "modified": "2021-09-13T19:10:59.739846Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cdd438ce-c272-4023-8b09-b91b43b5f5ef", "created": "2021-09-13T19:10:59.739846Z", "modified": "2021-09-13T19:10:59.739846Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cdd438ce-c272-4023-8b09-b91b43b5f5ef", "created": "2021-09-13T19:10:59.739846Z", "modified": "2021-09-13T19:10:59.739846Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cdd438ce-c272-4023-8b09-b91b43b5f5ef", "created": "2021-09-13T19:10:59.739846Z", "modified": "2021-09-13T19:10:59.739846Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cdd438ce-c272-4023-8b09-b91b43b5f5ef", "created": "2021-09-13T19:10:59.739846Z", "modified": "2021-09-13T19:10:59.739846Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c7593e7-e8b5-436a-816a-7352a711c915", "created": "2021-09-13T19:10:59.740516Z", "modified": "2021-09-13T19:10:59.740516Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c7593e7-e8b5-436a-816a-7352a711c915", "created": "2021-09-13T19:10:59.740516Z", "modified": "2021-09-13T19:10:59.740516Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c7593e7-e8b5-436a-816a-7352a711c915", "created": "2021-09-13T19:10:59.740516Z", "modified": "2021-09-13T19:10:59.740516Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d3af46e7-1109-4fc9-b36a-1b83b372ff28", "created": "2021-09-13T19:10:59.742525Z", "modified": "2021-09-13T19:10:59.742525Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7ff041-038b-4641-8b4e-3a63d9cb2073", "created": "2021-09-13T19:10:59.743204Z", "modified": "2021-09-13T19:10:59.743204Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7ff041-038b-4641-8b4e-3a63d9cb2073", "created": "2021-09-13T19:10:59.743204Z", "modified": "2021-09-13T19:10:59.743204Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7ff041-038b-4641-8b4e-3a63d9cb2073", "created": "2021-09-13T19:10:59.743204Z", "modified": "2021-09-13T19:10:59.743204Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7ff041-038b-4641-8b4e-3a63d9cb2073", "created": "2021-09-13T19:10:59.743204Z", "modified": "2021-09-13T19:10:59.743204Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7ff041-038b-4641-8b4e-3a63d9cb2073", "created": "2021-09-13T19:10:59.743204Z", "modified": "2021-09-13T19:10:59.743204Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--09cb2ae5-c65b-4976-8d17-45b974284c2a", "created": "2021-09-13T19:11:11.640672Z", "modified": "2021-09-13T19:11:11.640672Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--09cb2ae5-c65b-4976-8d17-45b974284c2a", "created": "2021-09-13T19:11:11.640672Z", "modified": "2021-09-13T19:11:11.640672Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--09cb2ae5-c65b-4976-8d17-45b974284c2a", "created": "2021-09-13T19:11:11.640672Z", "modified": "2021-09-13T19:11:11.640672Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--09cb2ae5-c65b-4976-8d17-45b974284c2a", "created": "2021-09-13T19:11:11.640672Z", "modified": "2021-09-13T19:11:11.640672Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3223c5df-40c6-4b23-bb6a-c12d134a3b8f", "created": "2021-09-13T19:11:11.641195Z", "modified": "2021-09-13T19:11:11.641195Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a1b70e98-c137-4ed7-8ddc-7873cd285690", "created": "2021-09-13T19:11:11.641706Z", "modified": "2021-09-13T19:11:11.641706Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a1b70e98-c137-4ed7-8ddc-7873cd285690", "created": "2021-09-13T19:11:11.641706Z", "modified": "2021-09-13T19:11:11.641706Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a1b70e98-c137-4ed7-8ddc-7873cd285690", "created": "2021-09-13T19:11:11.641706Z", "modified": "2021-09-13T19:11:11.641706Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a1b70e98-c137-4ed7-8ddc-7873cd285690", "created": "2021-09-13T19:11:11.641706Z", "modified": "2021-09-13T19:11:11.641706Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a1b70e98-c137-4ed7-8ddc-7873cd285690", "created": "2021-09-13T19:11:11.641706Z", "modified": "2021-09-13T19:11:11.641706Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d75af25c-2cb9-4917-befb-ed9235a3e339", "created": "2021-09-13T19:11:11.642214Z", "modified": "2021-09-13T19:11:11.642214Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d75af25c-2cb9-4917-befb-ed9235a3e339", "created": "2021-09-13T19:11:11.642214Z", "modified": "2021-09-13T19:11:11.642214Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d75af25c-2cb9-4917-befb-ed9235a3e339", "created": "2021-09-13T19:11:11.642214Z", "modified": "2021-09-13T19:11:11.642214Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d75af25c-2cb9-4917-befb-ed9235a3e339", "created": "2021-09-13T19:11:11.642214Z", "modified": "2021-09-13T19:11:11.642214Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9849861-de92-43f1-9d1d-50d6c4d656d0", "created": "2021-09-13T19:11:11.642719Z", "modified": "2021-09-13T19:11:11.642719Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9849861-de92-43f1-9d1d-50d6c4d656d0", "created": "2021-09-13T19:11:11.642719Z", "modified": "2021-09-13T19:11:11.642719Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9849861-de92-43f1-9d1d-50d6c4d656d0", "created": "2021-09-13T19:11:11.642719Z", "modified": "2021-09-13T19:11:11.642719Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9849861-de92-43f1-9d1d-50d6c4d656d0", "created": "2021-09-13T19:11:11.642719Z", "modified": "2021-09-13T19:11:11.642719Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9849861-de92-43f1-9d1d-50d6c4d656d0", "created": "2021-09-13T19:11:11.642719Z", "modified": "2021-09-13T19:11:11.642719Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--79ba5a72-19fc-4d16-b029-ed135351daab", "created": "2021-09-13T19:11:11.644245Z", "modified": "2021-09-13T19:11:11.644245Z", "name": "Encrypted Channel MITRE T1573", "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1573/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c77052f-c61d-4807-9308-3a82aba33879", "created": "2021-09-13T19:10:25.588141Z", "modified": "2021-09-13T19:10:25.588141Z", "name": "Encrypted Channel MITRE T1573", "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1573/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d7f27aa-a9ed-49f6-809a-52984bc9b45c", "created": "2021-09-13T19:11:26.457416Z", "modified": "2021-09-13T19:11:26.457416Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d7f27aa-a9ed-49f6-809a-52984bc9b45c", "created": "2021-09-13T19:11:26.457416Z", "modified": "2021-09-13T19:11:26.457416Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d7f27aa-a9ed-49f6-809a-52984bc9b45c", "created": "2021-09-13T19:11:26.457416Z", "modified": "2021-09-13T19:11:26.457416Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d7f27aa-a9ed-49f6-809a-52984bc9b45c", "created": "2021-09-13T19:11:26.457416Z", "modified": "2021-09-13T19:11:26.457416Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce6e8d2d-1ca3-4935-a9fb-939d39ae3e85", "created": "2021-09-13T19:11:26.458233Z", "modified": "2021-09-13T19:11:26.458233Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2ed71cc6-84e0-4d6e-88fe-fd5fb320044f", "created": "2021-09-13T19:11:26.459053Z", "modified": "2021-09-13T19:11:26.459053Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2ed71cc6-84e0-4d6e-88fe-fd5fb320044f", "created": "2021-09-13T19:11:26.459053Z", "modified": "2021-09-13T19:11:26.459053Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2ed71cc6-84e0-4d6e-88fe-fd5fb320044f", "created": "2021-09-13T19:11:26.459053Z", "modified": "2021-09-13T19:11:26.459053Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2ed71cc6-84e0-4d6e-88fe-fd5fb320044f", "created": "2021-09-13T19:11:26.459053Z", "modified": "2021-09-13T19:11:26.459053Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2ed71cc6-84e0-4d6e-88fe-fd5fb320044f", "created": "2021-09-13T19:11:26.459053Z", "modified": "2021-09-13T19:11:26.459053Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be0c2805-cbeb-42b9-b6c7-a868cb8ef93b", "created": "2021-09-13T19:11:26.459854Z", "modified": "2021-09-13T19:11:26.459854Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be0c2805-cbeb-42b9-b6c7-a868cb8ef93b", "created": "2021-09-13T19:11:26.459854Z", "modified": "2021-09-13T19:11:26.459854Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be0c2805-cbeb-42b9-b6c7-a868cb8ef93b", "created": "2021-09-13T19:11:26.459854Z", "modified": "2021-09-13T19:11:26.459854Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f97a4655-8096-4794-a07f-16f7210e1bb2", "created": "2021-09-13T19:11:26.460657Z", "modified": "2021-09-13T19:11:26.460657Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--006c23ec-0a0c-4e8b-a15f-af633f5332da", "created": "2021-09-13T19:11:26.461459Z", "modified": "2021-09-13T19:11:26.461459Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--006c23ec-0a0c-4e8b-a15f-af633f5332da", "created": "2021-09-13T19:11:26.461459Z", "modified": "2021-09-13T19:11:26.461459Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--006c23ec-0a0c-4e8b-a15f-af633f5332da", "created": "2021-09-13T19:11:26.461459Z", "modified": "2021-09-13T19:11:26.461459Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--006c23ec-0a0c-4e8b-a15f-af633f5332da", "created": "2021-09-13T19:11:26.461459Z", "modified": "2021-09-13T19:11:26.461459Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--006c23ec-0a0c-4e8b-a15f-af633f5332da", "created": "2021-09-13T19:11:26.461459Z", "modified": "2021-09-13T19:11:26.461459Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6f2c5800-9091-4591-9db6-cef0620a1c02", "created": "2021-09-13T19:11:26.463858Z", "modified": "2021-09-13T19:11:26.463858Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6f2c5800-9091-4591-9db6-cef0620a1c02", "created": "2021-09-13T19:11:26.463858Z", "modified": "2021-09-13T19:11:26.463858Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6f2c5800-9091-4591-9db6-cef0620a1c02", "created": "2021-09-13T19:11:26.463858Z", "modified": "2021-09-13T19:11:26.463858Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6f2c5800-9091-4591-9db6-cef0620a1c02", "created": "2021-09-13T19:11:26.463858Z", "modified": "2021-09-13T19:11:26.463858Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd2d5237-d730-49ae-ac4f-e599996d475a", "created": "2021-09-13T19:11:32.517967Z", "modified": "2021-09-13T19:11:32.517967Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd2d5237-d730-49ae-ac4f-e599996d475a", "created": "2021-09-13T19:11:32.517967Z", "modified": "2021-09-13T19:11:32.517967Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd2d5237-d730-49ae-ac4f-e599996d475a", "created": "2021-09-13T19:11:32.517967Z", "modified": "2021-09-13T19:11:32.517967Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd2d5237-d730-49ae-ac4f-e599996d475a", "created": "2021-09-13T19:11:32.517967Z", "modified": "2021-09-13T19:11:32.517967Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e27982d-6198-4048-816e-7fd127c9cb04", "created": "2021-09-13T19:11:32.518528Z", "modified": "2021-09-13T19:11:32.518528Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9a6fc70f-a78c-4a34-8dc8-aec55040c484", "created": "2021-09-13T19:11:32.519128Z", "modified": "2021-09-13T19:11:32.519128Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9a6fc70f-a78c-4a34-8dc8-aec55040c484", "created": "2021-09-13T19:11:32.519128Z", "modified": "2021-09-13T19:11:32.519128Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9a6fc70f-a78c-4a34-8dc8-aec55040c484", "created": "2021-09-13T19:11:32.519128Z", "modified": "2021-09-13T19:11:32.519128Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9a6fc70f-a78c-4a34-8dc8-aec55040c484", "created": "2021-09-13T19:11:32.519128Z", "modified": "2021-09-13T19:11:32.519128Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9a6fc70f-a78c-4a34-8dc8-aec55040c484", "created": "2021-09-13T19:11:32.519128Z", "modified": "2021-09-13T19:11:32.519128Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3e9b5a7c-611a-4b5a-8952-564ada09e210", "created": "2021-09-13T19:11:32.519678Z", "modified": "2021-09-13T19:11:32.519678Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3e9b5a7c-611a-4b5a-8952-564ada09e210", "created": "2021-09-13T19:11:32.519678Z", "modified": "2021-09-13T19:11:32.519678Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3e9b5a7c-611a-4b5a-8952-564ada09e210", "created": "2021-09-13T19:11:32.519678Z", "modified": "2021-09-13T19:11:32.519678Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f3fa16c5-4cf2-45d7-859e-29bbd822b4c0", "created": "2021-09-13T19:11:32.520227Z", "modified": "2021-09-13T19:11:32.520227Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ada10f9c-3ed1-4967-afb4-21475547ea8e", "created": "2021-09-13T19:11:32.520779Z", "modified": "2021-09-13T19:11:32.520779Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ada10f9c-3ed1-4967-afb4-21475547ea8e", "created": "2021-09-13T19:11:32.520779Z", "modified": "2021-09-13T19:11:32.520779Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ada10f9c-3ed1-4967-afb4-21475547ea8e", "created": "2021-09-13T19:11:32.520779Z", "modified": "2021-09-13T19:11:32.520779Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ada10f9c-3ed1-4967-afb4-21475547ea8e", "created": "2021-09-13T19:11:32.520779Z", "modified": "2021-09-13T19:11:32.520779Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ada10f9c-3ed1-4967-afb4-21475547ea8e", "created": "2021-09-13T19:11:32.520779Z", "modified": "2021-09-13T19:11:32.520779Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8bdee5f1-1e42-4a36-aefd-6e643c92285a", "created": "2021-09-13T19:11:32.522437Z", "modified": "2021-09-13T19:11:32.522437Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8bdee5f1-1e42-4a36-aefd-6e643c92285a", "created": "2021-09-13T19:11:32.522437Z", "modified": "2021-09-13T19:11:32.522437Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8bdee5f1-1e42-4a36-aefd-6e643c92285a", "created": "2021-09-13T19:11:32.522437Z", "modified": "2021-09-13T19:11:32.522437Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8bdee5f1-1e42-4a36-aefd-6e643c92285a", "created": "2021-09-13T19:11:32.522437Z", "modified": "2021-09-13T19:11:32.522437Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1f4b5150-fda3-4e6e-b4ee-dfc74f7ae81b", "created": "2021-09-13T19:11:42.854653Z", "modified": "2021-09-13T19:11:42.854653Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1f4b5150-fda3-4e6e-b4ee-dfc74f7ae81b", "created": "2021-09-13T19:11:42.854653Z", "modified": "2021-09-13T19:11:42.854653Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1f4b5150-fda3-4e6e-b4ee-dfc74f7ae81b", "created": "2021-09-13T19:11:42.854653Z", "modified": "2021-09-13T19:11:42.854653Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1f4b5150-fda3-4e6e-b4ee-dfc74f7ae81b", "created": "2021-09-13T19:11:42.854653Z", "modified": "2021-09-13T19:11:42.854653Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5a9c9397-a2b4-4f27-a636-ea3416246ffb", "created": "2021-09-13T19:11:42.85509Z", "modified": "2021-09-13T19:11:42.85509Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03a14669-de4e-427c-9613-5de7776a336c", "created": "2021-09-13T19:11:42.85545Z", "modified": "2021-09-13T19:11:42.85545Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03a14669-de4e-427c-9613-5de7776a336c", "created": "2021-09-13T19:11:42.85545Z", "modified": "2021-09-13T19:11:42.85545Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03a14669-de4e-427c-9613-5de7776a336c", "created": "2021-09-13T19:11:42.85545Z", "modified": "2021-09-13T19:11:42.85545Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--de9bf04b-cb1d-4387-93da-4780ef9db8c7", "created": "2021-09-13T19:11:42.856139Z", "modified": "2021-09-13T19:11:42.856139Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--abd5e992-2611-40f0-b096-2f0fb43d351a", "created": "2021-09-13T19:11:42.857093Z", "modified": "2021-09-13T19:11:42.857093Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--abd5e992-2611-40f0-b096-2f0fb43d351a", "created": "2021-09-13T19:11:42.857093Z", "modified": "2021-09-13T19:11:42.857093Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--abd5e992-2611-40f0-b096-2f0fb43d351a", "created": "2021-09-13T19:11:42.857093Z", "modified": "2021-09-13T19:11:42.857093Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--abd5e992-2611-40f0-b096-2f0fb43d351a", "created": "2021-09-13T19:11:42.857093Z", "modified": "2021-09-13T19:11:42.857093Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d5d8447-fc67-4706-9112-d60aeeb7f28a", "created": "2021-09-13T19:10:19.449555Z", "modified": "2021-09-13T19:10:19.449555Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d9269f3-7cc8-47ac-81f7-8ac878cd2b34", "created": "2021-09-13T19:10:25.583669Z", "modified": "2021-09-13T19:10:25.583669Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d5c7aa47-f8ab-4ce4-8dd9-4bd6ae1fc001", "created": "2021-09-13T19:10:43.550991Z", "modified": "2021-09-13T19:10:43.550991Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9647af33-51ea-450e-bb76-786668688ef8", "created": "2021-09-13T19:11:01.100603Z", "modified": "2021-09-13T19:11:01.100603Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--97f80aab-b16f-43da-ae08-3e6344cf6a57", "created": "2021-09-13T19:11:07.627497Z", "modified": "2021-09-13T19:11:07.627497Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6470f15f-1a1d-4b11-b9e1-03ee9320e9bd", "created": "2021-09-13T19:11:13.157211Z", "modified": "2021-09-13T19:11:13.157211Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--296860b4-ea87-46eb-84ae-3c2ff484fea9", "created": "2021-09-13T19:11:16.694033Z", "modified": "2021-09-13T19:11:16.694033Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e249b3e-2a2a-4e91-b970-cb7248636d9e", "created": "2021-09-13T19:11:21.196303Z", "modified": "2021-09-13T19:11:21.196303Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7acc6e6d-f24b-4f35-8fdf-2082d8fda889", "created": "2021-09-13T19:11:51.948325Z", "modified": "2021-09-13T19:11:51.948325Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b63650b2-5036-4480-a675-e017fd97c91f", "created": "2021-09-13T19:12:16.833998Z", "modified": "2021-09-13T19:12:16.833998Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2638f0a-6616-475a-8d4a-a9da881554a1", "created": "2021-09-13T19:11:52.761863Z", "modified": "2021-09-13T19:11:52.761863Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2638f0a-6616-475a-8d4a-a9da881554a1", "created": "2021-09-13T19:11:52.761863Z", "modified": "2021-09-13T19:11:52.761863Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2638f0a-6616-475a-8d4a-a9da881554a1", "created": "2021-09-13T19:11:52.761863Z", "modified": "2021-09-13T19:11:52.761863Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2638f0a-6616-475a-8d4a-a9da881554a1", "created": "2021-09-13T19:11:52.761863Z", "modified": "2021-09-13T19:11:52.761863Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2638f0a-6616-475a-8d4a-a9da881554a1", "created": "2021-09-13T19:11:52.761863Z", "modified": "2021-09-13T19:11:52.761863Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e16c7e1-7f30-4359-a6f9-474fe938a0f3", "created": "2021-09-13T19:11:52.762324Z", "modified": "2021-09-13T19:11:52.762324Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e16c7e1-7f30-4359-a6f9-474fe938a0f3", "created": "2021-09-13T19:11:52.762324Z", "modified": "2021-09-13T19:11:52.762324Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e16c7e1-7f30-4359-a6f9-474fe938a0f3", "created": "2021-09-13T19:11:52.762324Z", "modified": "2021-09-13T19:11:52.762324Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e16c7e1-7f30-4359-a6f9-474fe938a0f3", "created": "2021-09-13T19:11:52.762324Z", "modified": "2021-09-13T19:11:52.762324Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e16c7e1-7f30-4359-a6f9-474fe938a0f3", "created": "2021-09-13T19:11:52.762324Z", "modified": "2021-09-13T19:11:52.762324Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b70f14e5-9e6a-4b06-8966-cf9260a5d176", "created": "2021-09-13T19:11:52.762808Z", "modified": "2021-09-13T19:11:52.762808Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b70f14e5-9e6a-4b06-8966-cf9260a5d176", "created": "2021-09-13T19:11:52.762808Z", "modified": "2021-09-13T19:11:52.762808Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b70f14e5-9e6a-4b06-8966-cf9260a5d176", "created": "2021-09-13T19:11:52.762808Z", "modified": "2021-09-13T19:11:52.762808Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b70f14e5-9e6a-4b06-8966-cf9260a5d176", "created": "2021-09-13T19:11:52.762808Z", "modified": "2021-09-13T19:11:52.762808Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f5db7da8-f7c4-4cda-be83-321004c8e98f", "created": "2021-09-13T19:11:52.763207Z", "modified": "2021-09-13T19:11:52.763207Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d116726-e2a0-4ed1-aba4-8d710783d5d5", "created": "2021-09-13T19:10:25.586456Z", "modified": "2021-09-13T19:10:25.586456Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f5db7da8-f7c4-4cda-be83-321004c8e98f", "created": "2021-09-13T19:11:52.763207Z", "modified": "2021-09-13T19:11:52.763207Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d2dfb847-925d-4d2f-805d-8e908a68580f", "created": "2021-09-13T19:10:43.545681Z", "modified": "2021-09-13T19:10:43.545681Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f5db7da8-f7c4-4cda-be83-321004c8e98f", "created": "2021-09-13T19:11:52.763207Z", "modified": "2021-09-13T19:11:52.763207Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3fd22471-7cd0-4b51-bed0-ff9866b1f420", "created": "2021-09-13T19:11:21.194645Z", "modified": "2021-09-13T19:11:21.194645Z", "name": "Security Software Discovery MITRE T1518", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1518/001/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--39fd78bb-2bfd-43ba-985e-7e46da2830fd", "created": "2021-09-13T19:11:52.763597Z", "modified": "2021-09-13T19:11:52.763597Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d39ee7e0-b763-4895-954a-d4fa30065e78", "created": "2021-09-13T19:10:25.587587Z", "modified": "2021-09-13T19:10:25.587587Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--39fd78bb-2bfd-43ba-985e-7e46da2830fd", "created": "2021-09-13T19:11:52.763597Z", "modified": "2021-09-13T19:11:52.763597Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0121abc3-bb71-4698-8709-0adb8c4249a8", "created": "2021-09-13T19:10:43.548752Z", "modified": "2021-09-13T19:10:43.548752Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--39fd78bb-2bfd-43ba-985e-7e46da2830fd", "created": "2021-09-13T19:11:52.763597Z", "modified": "2021-09-13T19:11:52.763597Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84d646cb-c5aa-427b-adff-97cd78d1ee42", "created": "2021-09-13T19:11:21.19565Z", "modified": "2021-09-13T19:11:21.19565Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--39fd78bb-2bfd-43ba-985e-7e46da2830fd", "created": "2021-09-13T19:11:52.763597Z", "modified": "2021-09-13T19:11:52.763597Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f8495e1b-03ea-439f-acd1-e96b570c7884", "created": "2021-09-13T19:12:16.833677Z", "modified": "2021-09-13T19:12:16.833677Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06b64755-7ce3-4464-a43f-083f7cb75783", "created": "2021-09-13T19:10:25.582931Z", "modified": "2021-09-13T19:10:25.582931Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e50f1e93-b868-4231-940f-4764d5e8fb26", "created": "2021-09-13T19:10:43.544186Z", "modified": "2021-09-13T19:10:43.544186Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98c9c376-4e53-421d-bcef-ce59aa061c8f", "created": "2021-09-13T19:11:21.193539Z", "modified": "2021-09-13T19:11:21.193539Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c502a457-c3e9-4bad-81f5-27005900f555", "created": "2021-09-13T19:11:51.949633Z", "modified": "2021-09-13T19:11:51.949633Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea439aab-9f79-43e4-b82b-8b7f520fe11e", "created": "2021-09-13T19:12:16.831519Z", "modified": "2021-09-13T19:12:16.831519Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c371746b-4578-4d92-b4ff-914199c6307d", "created": "2021-09-13T19:12:05.193035Z", "modified": "2021-09-13T19:12:05.193035Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db1a3a22-cb40-4fd9-97e9-bb53bef500cf", "created": "2021-09-13T19:10:19.450432Z", "modified": "2021-09-13T19:10:19.450432Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c371746b-4578-4d92-b4ff-914199c6307d", "created": "2021-09-13T19:12:05.193035Z", "modified": "2021-09-13T19:12:05.193035Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0df7fac-a170-433b-9837-2e4827a2242d", "created": "2021-09-13T19:11:01.101838Z", "modified": "2021-09-13T19:11:01.101838Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c371746b-4578-4d92-b4ff-914199c6307d", "created": "2021-09-13T19:12:05.193035Z", "modified": "2021-09-13T19:12:05.193035Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d419ecd-4f0f-4639-9ece-a4241bd72714", "created": "2021-09-13T19:11:13.157967Z", "modified": "2021-09-13T19:11:13.157967Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c371746b-4578-4d92-b4ff-914199c6307d", "created": "2021-09-13T19:12:05.193035Z", "modified": "2021-09-13T19:12:05.193035Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4919b43f-72bd-44d6-8993-5c2a1fc19ca9", "created": "2021-09-13T19:12:16.832005Z", "modified": "2021-09-13T19:12:16.832005Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8afb02dd-33fe-4ede-8b44-ec8e74ecbf3b", "created": "2021-09-13T19:12:05.193719Z", "modified": "2021-09-13T19:12:05.193719Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06a9573f-aa7a-4032-84c4-9d3f66cd2615", "created": "2021-09-13T19:11:51.950691Z", "modified": "2021-09-13T19:11:51.950691Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9c0450d-1082-4276-ab04-05f692047b04", "created": "2021-09-13T19:12:05.194398Z", "modified": "2021-09-13T19:12:05.194398Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a8242347-f1a1-4e23-a706-292ecaa17552", "created": "2021-09-13T19:10:19.451617Z", "modified": "2021-09-13T19:10:19.451617Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9c0450d-1082-4276-ab04-05f692047b04", "created": "2021-09-13T19:12:05.194398Z", "modified": "2021-09-13T19:12:05.194398Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d09385be-8717-46c1-808b-a4f6ed3903f7", "created": "2021-09-13T19:10:25.585346Z", "modified": "2021-09-13T19:10:25.585346Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9c0450d-1082-4276-ab04-05f692047b04", "created": "2021-09-13T19:12:05.194398Z", "modified": "2021-09-13T19:12:05.194398Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--baa1904f-4c16-41ab-aba3-3bf7abac184e", "created": "2021-09-13T19:11:01.104025Z", "modified": "2021-09-13T19:11:01.104025Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9c0450d-1082-4276-ab04-05f692047b04", "created": "2021-09-13T19:12:05.194398Z", "modified": "2021-09-13T19:12:05.194398Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b5d35291-ba03-491f-b8ca-0013c3fea1a0", "created": "2021-09-13T19:11:13.160169Z", "modified": "2021-09-13T19:11:13.160169Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9c0450d-1082-4276-ab04-05f692047b04", "created": "2021-09-13T19:12:05.194398Z", "modified": "2021-09-13T19:12:05.194398Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83c2f3a7-afbd-463a-80dd-9b6e45090229", "created": "2021-09-13T19:12:16.832691Z", "modified": "2021-09-13T19:12:16.832691Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c0955f2-61df-43a2-b1d9-5eef66e07366", "created": "2021-09-13T19:12:05.195085Z", "modified": "2021-09-13T19:12:05.195085Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--203e6d4d-ed55-45ba-9354-bd3b91d5fe57", "created": "2021-09-13T19:10:43.544793Z", "modified": "2021-09-13T19:10:43.544793Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c0955f2-61df-43a2-b1d9-5eef66e07366", "created": "2021-09-13T19:12:05.195085Z", "modified": "2021-09-13T19:12:05.195085Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5f8fa7e6-58c6-4e2c-8328-cb0b324ed659", "created": "2021-09-13T19:11:01.106049Z", "modified": "2021-09-13T19:11:01.106049Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c0955f2-61df-43a2-b1d9-5eef66e07366", "created": "2021-09-13T19:12:05.195085Z", "modified": "2021-09-13T19:12:05.195085Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3782205b-7fbd-4e2a-973a-083f77d95b1c", "created": "2021-09-13T19:11:21.194003Z", "modified": "2021-09-13T19:11:21.194003Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c0955f2-61df-43a2-b1d9-5eef66e07366", "created": "2021-09-13T19:12:05.195085Z", "modified": "2021-09-13T19:12:05.195085Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf062535-140c-4e29-8092-728f3cb8df12", "created": "2021-09-13T19:11:51.953818Z", "modified": "2021-09-13T19:11:51.953818Z", "name": "File and Directory Discovery MITRE T1083", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.  Custom tools may also be used to gather file and directory information and interact with the Native API.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1083/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c7d4f437-4f92-4462-bb62-c72500ab9096", "created": "2021-09-13T19:12:05.195758Z", "modified": "2021-09-13T19:12:05.195758Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--992d0600-0bda-4d34-8699-7aa15b6b482c", "created": "2021-09-13T19:10:25.585902Z", "modified": "2021-09-13T19:10:25.585902Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c7d4f437-4f92-4462-bb62-c72500ab9096", "created": "2021-09-13T19:12:05.195758Z", "modified": "2021-09-13T19:12:05.195758Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2d6fd7b7-f49e-4187-bd6b-bbd448541537", "created": "2021-09-13T19:11:01.107932Z", "modified": "2021-09-13T19:11:01.107932Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c7d4f437-4f92-4462-bb62-c72500ab9096", "created": "2021-09-13T19:12:05.195758Z", "modified": "2021-09-13T19:12:05.195758Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3684c491-d5ce-4329-a653-56d58e7a8223", "created": "2021-09-13T19:12:16.833014Z", "modified": "2021-09-13T19:12:16.833014Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--848136e3-a25b-4e97-8cb1-e379b7ac86cd", "created": "2021-09-13T19:12:05.196424Z", "modified": "2021-09-13T19:12:05.196424Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7ae260dd-d802-481b-82c6-a48eff5f2001", "created": "2021-09-13T19:10:43.546125Z", "modified": "2021-09-13T19:10:43.546125Z", "name": "Command and Scripting Interpreter MITRE T1059", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1059/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb5d9b90-f8cc-4681-896b-9033d46a748e", "created": "2021-09-13T19:12:05.197109Z", "modified": "2021-09-13T19:12:05.197109Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c5afed9-0d37-4e97-93ba-cab32785765d", "created": "2021-09-13T19:10:19.45105Z", "modified": "2021-09-13T19:10:19.45105Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb5d9b90-f8cc-4681-896b-9033d46a748e", "created": "2021-09-13T19:12:05.197109Z", "modified": "2021-09-13T19:12:05.197109Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8267f93a-3e14-495f-9c12-95c3d0ccd60a", "created": "2021-09-13T19:10:25.584235Z", "modified": "2021-09-13T19:10:25.584235Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb5d9b90-f8cc-4681-896b-9033d46a748e", "created": "2021-09-13T19:12:05.197109Z", "modified": "2021-09-13T19:12:05.197109Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9082d5bc-b783-41b4-91d6-039c0a9f3d40", "created": "2021-09-13T19:11:01.103009Z", "modified": "2021-09-13T19:11:01.103009Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb5d9b90-f8cc-4681-896b-9033d46a748e", "created": "2021-09-13T19:12:05.197109Z", "modified": "2021-09-13T19:12:05.197109Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99269419-b354-4bfd-b12e-fd19eb829111", "created": "2021-09-13T19:11:13.15867Z", "modified": "2021-09-13T19:11:13.15867Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb5d9b90-f8cc-4681-896b-9033d46a748e", "created": "2021-09-13T19:12:05.197109Z", "modified": "2021-09-13T19:12:05.197109Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9d88813-b5c9-4959-adfc-ccbf4ba2752e", "created": "2021-09-13T19:12:16.832363Z", "modified": "2021-09-13T19:12:16.832363Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c11c50c-2f7f-4164-b992-d773e542b838", "created": "2021-09-13T19:10:25.587026Z", "modified": "2021-09-13T19:10:25.587026Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--647b9a10-bf02-4911-aaec-da0253518674", "created": "2021-09-13T19:10:43.547482Z", "modified": "2021-09-13T19:10:43.547482Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c32b588-9c78-4ae2-9cd3-7ba8a28e4c70", "created": "2021-09-13T19:11:21.195324Z", "modified": "2021-09-13T19:11:21.195324Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--49182e25-650a-47c4-a5b7-bc24857d436f", "created": "2021-09-13T19:11:51.952786Z", "modified": "2021-09-13T19:11:51.952786Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9f2eb5f3-d006-412d-85ce-02f571d104e9", "created": "2021-09-13T19:12:16.833334Z", "modified": "2021-09-13T19:12:16.833334Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
85
83
82
86
93
92
81
80
91
90
97
79
78
