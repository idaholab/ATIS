{'--help': False,
 '--version': False,
 '<campaign_name>': None,
 '<file_hash>': None,
 '<json_path>': 'analysis/comparison_results/updatedSeptember/stix_no_MA_DarksideVSstix_no_MA_REVIL.json',
 '<json_path_1>': None,
 '<json_path_2>': None,
 '<output_directory>': None,
 '<report_file>': None,
 '<title>': None,
 'campaign': False,
 'clean': True,
 'compare': False,
 'generate': False,
 'heatmap': False,
 'many': False,
 'noYara': False,
 'single': False,
 'weights': False,
 'yara': False}
100
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5d413626-b1ad-4d9e-b21a-5ee14293c547", "created": "2021-09-13T19:07:23.602962Z", "modified": "2021-09-13T19:07:23.602962Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af2a16fa-b27e-4bd8-9b0f-45f20dd5659a", "created": "2021-09-13T19:08:33.6967Z", "modified": "2021-09-13T19:08:33.6967Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc349977-07d4-44e5-9749-19ae7874876f", "created": "2021-09-13T19:09:00.917458Z", "modified": "2021-09-13T19:09:00.917458Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e827ed2-c30b-4237-a9a5-afcc95369b99", "created": "2021-09-13T19:09:55.476718Z", "modified": "2021-09-13T19:09:55.476718Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f498f010-4365-415b-90cd-9674d78dd84c", "created": "2021-09-13T19:10:15.046247Z", "modified": "2021-09-13T19:10:15.046247Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--184887a0-e3c5-47d5-b529-b4fd5de5bc57", "created": "2021-09-13T19:10:19.705048Z", "modified": "2021-09-13T19:10:19.705048Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--155c54cf-02b2-4a4e-9373-baa55daa74dd", "created": "2021-09-13T19:10:23.792796Z", "modified": "2021-09-13T19:10:23.792796Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--940b8e2e-55ac-4836-8535-3340c054af8b", "created": "2021-09-13T19:10:28.640982Z", "modified": "2021-09-13T19:10:28.640982Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d6fa3dff-f36f-416e-a952-3e8090af4f1e", "created": "2021-09-13T19:10:32.45156Z", "modified": "2021-09-13T19:10:32.45156Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c385635-c828-471d-a38b-3c01810a7946", "created": "2021-09-13T19:10:36.622231Z", "modified": "2021-09-13T19:10:36.622231Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--85eeb0df-b52c-4b68-984b-a0f773f4d289", "created": "2021-09-13T19:10:41.342294Z", "modified": "2021-09-13T19:10:41.342294Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc0814a-6210-4b0f-8de8-bd50ab34b52f", "created": "2021-09-13T19:10:45.419878Z", "modified": "2021-09-13T19:10:45.419878Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06dc0fa1-f353-4a5f-95b8-d4f50668cf76", "created": "2021-09-13T19:10:56.453091Z", "modified": "2021-09-13T19:10:56.453091Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd503c79-8af4-42c3-9930-44e075d3e7c1", "created": "2021-09-13T19:11:10.028227Z", "modified": "2021-09-13T19:11:10.028227Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a303a87b-a4c7-41e8-a4c6-1531c7b52326", "created": "2021-09-13T19:07:23.603985Z", "modified": "2021-09-13T19:07:23.603985Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--82522607-6ec0-4620-886e-4f4b3fc38aa0", "created": "2021-09-13T19:11:14.211673Z", "modified": "2021-09-13T19:11:14.211673Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8a424ba3-cbd6-48e5-b535-975f2e2a7683", "created": "2021-09-13T19:07:23.604772Z", "modified": "2021-09-13T19:07:23.604772Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8a424ba3-cbd6-48e5-b535-975f2e2a7683", "created": "2021-09-13T19:07:23.604772Z", "modified": "2021-09-13T19:07:23.604772Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--049a0637-e87d-4414-abc0-190a18280e87", "created": "2021-09-13T19:07:23.605539Z", "modified": "2021-09-13T19:07:23.605539Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--049a0637-e87d-4414-abc0-190a18280e87", "created": "2021-09-13T19:07:23.605539Z", "modified": "2021-09-13T19:07:23.605539Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78d06e61-83b7-41e8-9983-6dd2bd756d62", "created": "2021-09-13T19:07:23.607077Z", "modified": "2021-09-13T19:07:23.607077Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78d06e61-83b7-41e8-9983-6dd2bd756d62", "created": "2021-09-13T19:07:23.607077Z", "modified": "2021-09-13T19:07:23.607077Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--110d1cf8-b75d-4db8-a7a0-4ae32e911952", "created": "2021-09-13T19:07:23.610107Z", "modified": "2021-09-13T19:07:23.610107Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--110d1cf8-b75d-4db8-a7a0-4ae32e911952", "created": "2021-09-13T19:07:23.610107Z", "modified": "2021-09-13T19:07:23.610107Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a4c40e6b-831d-422d-a653-71896dbfabfb", "created": "2021-09-13T19:07:29.775027Z", "modified": "2021-09-13T19:07:29.775027Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--def67f95-2330-48a3-ac5e-808f22836da1", "created": "2021-09-13T19:07:29.776205Z", "modified": "2021-09-13T19:07:29.776205Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--def67f95-2330-48a3-ac5e-808f22836da1", "created": "2021-09-13T19:07:29.776205Z", "modified": "2021-09-13T19:07:29.776205Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd04a694-bec8-446f-86fc-cdffc754dc15", "created": "2021-09-13T19:07:29.777161Z", "modified": "2021-09-13T19:07:29.777161Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd04a694-bec8-446f-86fc-cdffc754dc15", "created": "2021-09-13T19:07:29.777161Z", "modified": "2021-09-13T19:07:29.777161Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e5f15dd-f3d5-439d-acbe-5c2cbd815061", "created": "2021-09-13T19:07:29.778098Z", "modified": "2021-09-13T19:07:29.778098Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e5f15dd-f3d5-439d-acbe-5c2cbd815061", "created": "2021-09-13T19:07:29.778098Z", "modified": "2021-09-13T19:07:29.778098Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2a1674f1-bd7a-4b03-be85-d4018f39afa7", "created": "2021-09-13T19:07:29.779382Z", "modified": "2021-09-13T19:07:29.779382Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2a1674f1-bd7a-4b03-be85-d4018f39afa7", "created": "2021-09-13T19:07:29.779382Z", "modified": "2021-09-13T19:07:29.779382Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cde8ae8e-0307-43b5-9c96-0272b2b059b5", "created": "2021-09-13T19:07:29.780267Z", "modified": "2021-09-13T19:07:29.780267Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cde8ae8e-0307-43b5-9c96-0272b2b059b5", "created": "2021-09-13T19:07:29.780267Z", "modified": "2021-09-13T19:07:29.780267Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ec283edb-e66c-4ef8-a13b-40f98ce74481", "created": "2021-09-13T19:07:29.781132Z", "modified": "2021-09-13T19:07:29.781132Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e644d2be-cbea-4643-b933-9d38d94be3c8", "created": "2021-09-13T19:07:35.728314Z", "modified": "2021-09-13T19:07:35.728314Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9e2d1a05-5f55-405d-8efd-25a63e8adb58", "created": "2021-09-13T19:07:35.729439Z", "modified": "2021-09-13T19:07:35.729439Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9e2d1a05-5f55-405d-8efd-25a63e8adb58", "created": "2021-09-13T19:07:35.729439Z", "modified": "2021-09-13T19:07:35.729439Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb8d955b-7924-4a6a-89cd-16a9523a0fcb", "created": "2021-09-13T19:07:35.730332Z", "modified": "2021-09-13T19:07:35.730332Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb8d955b-7924-4a6a-89cd-16a9523a0fcb", "created": "2021-09-13T19:07:35.730332Z", "modified": "2021-09-13T19:07:35.730332Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65f163ab-b54b-4418-83bd-0dcf9f7d41b4", "created": "2021-09-13T19:07:35.731228Z", "modified": "2021-09-13T19:07:35.731228Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65f163ab-b54b-4418-83bd-0dcf9f7d41b4", "created": "2021-09-13T19:07:35.731228Z", "modified": "2021-09-13T19:07:35.731228Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e130ea-5235-4b5f-8d27-1473b4a86823", "created": "2021-09-13T19:07:35.732966Z", "modified": "2021-09-13T19:07:35.732966Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e130ea-5235-4b5f-8d27-1473b4a86823", "created": "2021-09-13T19:07:35.732966Z", "modified": "2021-09-13T19:07:35.732966Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98261d78-1ea6-4a24-a1ed-0d17523feb0f", "created": "2021-09-13T19:07:35.734837Z", "modified": "2021-09-13T19:07:35.734837Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--98261d78-1ea6-4a24-a1ed-0d17523feb0f", "created": "2021-09-13T19:07:35.734837Z", "modified": "2021-09-13T19:07:35.734837Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9c04f4af-efba-42e6-90dd-d30d4b1c1c5f", "created": "2021-09-13T19:07:35.735579Z", "modified": "2021-09-13T19:07:35.735579Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--ca4cce4e-29c8-5b5b-9ead-a0e41a9c70d5", "value": "20.190.155.65"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--ca4cce4e-29c8-5b5b-9ead-a0e41a9c70d5", "value": "20.190.155.65"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--2d4cf0c1-f3e0-5bd2-97af-0a4989427aca", "value": "www.tm.a.prd.aadg.akadns.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--2d4cf0c1-f3e0-5bd2-97af-0a4989427aca", "value": "www.tm.a.prd.aadg.akadns.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--561821b9-5ff7-5927-9059-b042da528100", "value": "20.190.155.16"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--561821b9-5ff7-5927-9059-b042da528100", "value": "20.190.155.16"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--15a1261e-eb7f-5717-a972-eaea9e2d9747", "value": "20.190.155.3"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--15a1261e-eb7f-5717-a972-eaea9e2d9747", "value": "20.190.155.3"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--e4210030-6c2b-57c0-b644-0d65604fa0ba", "value": "20.190.155.131"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--e4210030-6c2b-57c0-b644-0d65604fa0ba", "value": "20.190.155.131"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--acea9017-ef5c-5061-a756-edccbc28e079", "value": "20.190.155.67"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--acea9017-ef5c-5061-a756-edccbc28e079", "value": "20.190.155.67"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--776db78c-9b4c-5a90-89ba-938b5117224d", "value": "20.190.155.1"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--776db78c-9b4c-5a90-89ba-938b5117224d", "value": "20.190.155.1"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--4f04d589-5116-595b-bf7e-6fb68c4dd098", "value": "20.190.155.66"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--4f04d589-5116-595b-bf7e-6fb68c4dd098", "value": "20.190.155.66"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--1040a7f5-7b98-58ed-9d34-1cb15457cb87", "value": "20.190.155.132"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--1040a7f5-7b98-58ed-9d34-1cb15457cb87", "value": "20.190.155.132"}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b053bf23-9448-4bc8-acf3-cd10b8c32c48", "created": "2021-09-13T19:07:39.337684Z", "modified": "2021-09-13T19:07:39.337684Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af2a16fa-b27e-4bd8-9b0f-45f20dd5659a", "created": "2021-09-13T19:08:33.6967Z", "modified": "2021-09-13T19:08:33.6967Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc349977-07d4-44e5-9749-19ae7874876f", "created": "2021-09-13T19:09:00.917458Z", "modified": "2021-09-13T19:09:00.917458Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e827ed2-c30b-4237-a9a5-afcc95369b99", "created": "2021-09-13T19:09:55.476718Z", "modified": "2021-09-13T19:09:55.476718Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f498f010-4365-415b-90cd-9674d78dd84c", "created": "2021-09-13T19:10:15.046247Z", "modified": "2021-09-13T19:10:15.046247Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--184887a0-e3c5-47d5-b529-b4fd5de5bc57", "created": "2021-09-13T19:10:19.705048Z", "modified": "2021-09-13T19:10:19.705048Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--155c54cf-02b2-4a4e-9373-baa55daa74dd", "created": "2021-09-13T19:10:23.792796Z", "modified": "2021-09-13T19:10:23.792796Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--940b8e2e-55ac-4836-8535-3340c054af8b", "created": "2021-09-13T19:10:28.640982Z", "modified": "2021-09-13T19:10:28.640982Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d6fa3dff-f36f-416e-a952-3e8090af4f1e", "created": "2021-09-13T19:10:32.45156Z", "modified": "2021-09-13T19:10:32.45156Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c385635-c828-471d-a38b-3c01810a7946", "created": "2021-09-13T19:10:36.622231Z", "modified": "2021-09-13T19:10:36.622231Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--85eeb0df-b52c-4b68-984b-a0f773f4d289", "created": "2021-09-13T19:10:41.342294Z", "modified": "2021-09-13T19:10:41.342294Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc0814a-6210-4b0f-8de8-bd50ab34b52f", "created": "2021-09-13T19:10:45.419878Z", "modified": "2021-09-13T19:10:45.419878Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06dc0fa1-f353-4a5f-95b8-d4f50668cf76", "created": "2021-09-13T19:10:56.453091Z", "modified": "2021-09-13T19:10:56.453091Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd503c79-8af4-42c3-9930-44e075d3e7c1", "created": "2021-09-13T19:11:10.028227Z", "modified": "2021-09-13T19:11:10.028227Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5554284b-d64b-4bff-a1bc-3cea0b3e9e26", "created": "2021-09-13T19:07:39.3392Z", "modified": "2021-09-13T19:07:39.3392Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--82522607-6ec0-4620-886e-4f4b3fc38aa0", "created": "2021-09-13T19:11:14.211673Z", "modified": "2021-09-13T19:11:14.211673Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--525d0f63-1edb-45f5-8e8d-0c94f0c6c61a", "created": "2021-09-13T19:07:39.340411Z", "modified": "2021-09-13T19:07:39.340411Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--525d0f63-1edb-45f5-8e8d-0c94f0c6c61a", "created": "2021-09-13T19:07:39.340411Z", "modified": "2021-09-13T19:07:39.340411Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--057e80ff-a440-42a5-8b1a-6c3592994fd5", "created": "2021-09-13T19:07:39.3416Z", "modified": "2021-09-13T19:07:39.3416Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2f3880d-b06b-488b-ad5e-04ef3a870e42", "created": "2021-09-13T19:09:00.918279Z", "modified": "2021-09-13T19:09:00.918279Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--057e80ff-a440-42a5-8b1a-6c3592994fd5", "created": "2021-09-13T19:07:39.3416Z", "modified": "2021-09-13T19:07:39.3416Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf4373e1-3ee3-4f95-ba9e-45aa4af00b87", "created": "2021-09-13T19:10:15.045406Z", "modified": "2021-09-13T19:10:15.045406Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--057e80ff-a440-42a5-8b1a-6c3592994fd5", "created": "2021-09-13T19:07:39.3416Z", "modified": "2021-09-13T19:07:39.3416Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78a103fc-8d18-46b3-a337-50dc311ef827", "created": "2021-09-13T19:10:19.704672Z", "modified": "2021-09-13T19:10:19.704672Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--057e80ff-a440-42a5-8b1a-6c3592994fd5", "created": "2021-09-13T19:07:39.3416Z", "modified": "2021-09-13T19:07:39.3416Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1f580be2-bc31-45b2-a22a-2d60b1547477", "created": "2021-09-13T19:10:56.4524Z", "modified": "2021-09-13T19:10:56.4524Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--10df6427-a862-470e-8e78-8dd37e8eeb9f", "created": "2021-09-13T19:07:39.342811Z", "modified": "2021-09-13T19:07:39.342811Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--10df6427-a862-470e-8e78-8dd37e8eeb9f", "created": "2021-09-13T19:07:39.342811Z", "modified": "2021-09-13T19:07:39.342811Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2300638-021a-4335-bc36-e24f53c16c8c", "created": "2021-09-13T19:07:39.343193Z", "modified": "2021-09-13T19:07:39.343193Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2300638-021a-4335-bc36-e24f53c16c8c", "created": "2021-09-13T19:07:39.343193Z", "modified": "2021-09-13T19:07:39.343193Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--20f55612-1965-46f3-aaf4-6f288fddfe3d", "created": "2021-09-13T19:07:39.343977Z", "modified": "2021-09-13T19:07:39.343977Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--20f55612-1965-46f3-aaf4-6f288fddfe3d", "created": "2021-09-13T19:07:39.343977Z", "modified": "2021-09-13T19:07:39.343977Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a0a252aa-18fe-4a96-a6f3-a85d67ecc59e", "created": "2021-09-13T19:07:39.344365Z", "modified": "2021-09-13T19:07:39.344365Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d452ac50-67e4-4eee-aa04-fdd4a699c941", "created": "2021-09-13T19:09:15.275686Z", "modified": "2021-09-13T19:09:15.275686Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae5392e1-4cf8-4a2f-a9e0-8952619cdf76", "created": "2021-09-13T19:07:39.344755Z", "modified": "2021-09-13T19:07:39.344755Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--927b724a-796e-416a-8611-d46fb2578b12", "created": "2021-09-13T19:07:44.564569Z", "modified": "2021-09-13T19:07:44.564569Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af2a16fa-b27e-4bd8-9b0f-45f20dd5659a", "created": "2021-09-13T19:08:33.6967Z", "modified": "2021-09-13T19:08:33.6967Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc349977-07d4-44e5-9749-19ae7874876f", "created": "2021-09-13T19:09:00.917458Z", "modified": "2021-09-13T19:09:00.917458Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e827ed2-c30b-4237-a9a5-afcc95369b99", "created": "2021-09-13T19:09:55.476718Z", "modified": "2021-09-13T19:09:55.476718Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f498f010-4365-415b-90cd-9674d78dd84c", "created": "2021-09-13T19:10:15.046247Z", "modified": "2021-09-13T19:10:15.046247Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--184887a0-e3c5-47d5-b529-b4fd5de5bc57", "created": "2021-09-13T19:10:19.705048Z", "modified": "2021-09-13T19:10:19.705048Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--155c54cf-02b2-4a4e-9373-baa55daa74dd", "created": "2021-09-13T19:10:23.792796Z", "modified": "2021-09-13T19:10:23.792796Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--940b8e2e-55ac-4836-8535-3340c054af8b", "created": "2021-09-13T19:10:28.640982Z", "modified": "2021-09-13T19:10:28.640982Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d6fa3dff-f36f-416e-a952-3e8090af4f1e", "created": "2021-09-13T19:10:32.45156Z", "modified": "2021-09-13T19:10:32.45156Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c385635-c828-471d-a38b-3c01810a7946", "created": "2021-09-13T19:10:36.622231Z", "modified": "2021-09-13T19:10:36.622231Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--85eeb0df-b52c-4b68-984b-a0f773f4d289", "created": "2021-09-13T19:10:41.342294Z", "modified": "2021-09-13T19:10:41.342294Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc0814a-6210-4b0f-8de8-bd50ab34b52f", "created": "2021-09-13T19:10:45.419878Z", "modified": "2021-09-13T19:10:45.419878Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06dc0fa1-f353-4a5f-95b8-d4f50668cf76", "created": "2021-09-13T19:10:56.453091Z", "modified": "2021-09-13T19:10:56.453091Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd503c79-8af4-42c3-9930-44e075d3e7c1", "created": "2021-09-13T19:11:10.028227Z", "modified": "2021-09-13T19:11:10.028227Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--50146a35-fb18-4651-b7f8-fe64f08eff78", "created": "2021-09-13T19:07:44.565748Z", "modified": "2021-09-13T19:07:44.565748Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--82522607-6ec0-4620-886e-4f4b3fc38aa0", "created": "2021-09-13T19:11:14.211673Z", "modified": "2021-09-13T19:11:14.211673Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bbadc0d5-65b1-4ad7-9f98-7a30082c642d", "created": "2021-09-13T19:07:44.566688Z", "modified": "2021-09-13T19:07:44.566688Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bbadc0d5-65b1-4ad7-9f98-7a30082c642d", "created": "2021-09-13T19:07:44.566688Z", "modified": "2021-09-13T19:07:44.566688Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--724abd2c-c213-4ed1-8fb6-9a1ea39c76c4", "created": "2021-09-13T19:07:44.567265Z", "modified": "2021-09-13T19:07:44.567265Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--724abd2c-c213-4ed1-8fb6-9a1ea39c76c4", "created": "2021-09-13T19:07:44.567265Z", "modified": "2021-09-13T19:07:44.567265Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf764686-2b28-4314-ac41-23f62c690384", "created": "2021-09-13T19:07:44.567745Z", "modified": "2021-09-13T19:07:44.567745Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf764686-2b28-4314-ac41-23f62c690384", "created": "2021-09-13T19:07:44.567745Z", "modified": "2021-09-13T19:07:44.567745Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eeec47eb-7a65-48a0-b5ce-e6e2502fa041", "created": "2021-09-13T19:07:44.568704Z", "modified": "2021-09-13T19:07:44.568704Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--517b997b-d73d-4775-9314-c54230729c10", "created": "2021-09-13T19:07:49.922521Z", "modified": "2021-09-13T19:07:49.922521Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b7543f77-5f92-4b96-8eda-cb6f15e84a88", "created": "2021-09-13T19:07:49.923067Z", "modified": "2021-09-13T19:07:49.923067Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b7543f77-5f92-4b96-8eda-cb6f15e84a88", "created": "2021-09-13T19:07:49.923067Z", "modified": "2021-09-13T19:07:49.923067Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eb403b27-89ea-4a9a-a50b-66cec4738dbb", "created": "2021-09-13T19:07:49.923402Z", "modified": "2021-09-13T19:07:49.923402Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eb403b27-89ea-4a9a-a50b-66cec4738dbb", "created": "2021-09-13T19:07:49.923402Z", "modified": "2021-09-13T19:07:49.923402Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0118aaa8-01b3-436b-99b1-8270f01cd24d", "created": "2021-09-13T19:07:49.923729Z", "modified": "2021-09-13T19:07:49.923729Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0118aaa8-01b3-436b-99b1-8270f01cd24d", "created": "2021-09-13T19:07:49.923729Z", "modified": "2021-09-13T19:07:49.923729Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4950fd4e-0924-46d4-b3f2-07ef1456985a", "created": "2021-09-13T19:07:49.924385Z", "modified": "2021-09-13T19:07:49.924385Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4950fd4e-0924-46d4-b3f2-07ef1456985a", "created": "2021-09-13T19:07:49.924385Z", "modified": "2021-09-13T19:07:49.924385Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd08392d-b9e6-4e21-a8c0-1985c1a8cd59", "created": "2021-09-13T19:07:49.92536Z", "modified": "2021-09-13T19:07:49.92536Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd08392d-b9e6-4e21-a8c0-1985c1a8cd59", "created": "2021-09-13T19:07:49.92536Z", "modified": "2021-09-13T19:07:49.92536Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7b9d57fd-99e6-47af-a3f8-90a504da108e", "created": "2021-09-13T19:07:57.169791Z", "modified": "2021-09-13T19:07:57.169791Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--aac1ffbc-8a28-4868-afb8-3f701ab808d5", "created": "2021-09-13T19:07:57.170994Z", "modified": "2021-09-13T19:07:57.170994Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--aac1ffbc-8a28-4868-afb8-3f701ab808d5", "created": "2021-09-13T19:07:57.170994Z", "modified": "2021-09-13T19:07:57.170994Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--856d33d4-8f84-4c7a-95be-023061e5fd8e", "created": "2021-09-13T19:07:57.171935Z", "modified": "2021-09-13T19:07:57.171935Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--856d33d4-8f84-4c7a-95be-023061e5fd8e", "created": "2021-09-13T19:07:57.171935Z", "modified": "2021-09-13T19:07:57.171935Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc4b727f-7ba8-4331-9dda-3a1b20a5d7bb", "created": "2021-09-13T19:07:57.172858Z", "modified": "2021-09-13T19:07:57.172858Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc4b727f-7ba8-4331-9dda-3a1b20a5d7bb", "created": "2021-09-13T19:07:57.172858Z", "modified": "2021-09-13T19:07:57.172858Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73db72f3-24aa-4121-a46c-9ff3fb01d7f5", "created": "2021-09-13T19:07:57.175641Z", "modified": "2021-09-13T19:07:57.175641Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73db72f3-24aa-4121-a46c-9ff3fb01d7f5", "created": "2021-09-13T19:07:57.175641Z", "modified": "2021-09-13T19:07:57.175641Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--589002b3-76e4-4bd2-a656-633fa5779cc5", "created": "2021-09-13T19:07:57.178391Z", "modified": "2021-09-13T19:07:57.178391Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--589002b3-76e4-4bd2-a656-633fa5779cc5", "created": "2021-09-13T19:07:57.178391Z", "modified": "2021-09-13T19:07:57.178391Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9ac54d46-f414-4a3c-8fb4-60ad3784c527", "created": "2021-09-13T19:08:01.953936Z", "modified": "2021-09-13T19:08:01.953936Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4d8805a7-8ae6-48be-8654-bf24b0c4452a", "created": "2021-09-13T19:08:01.959745Z", "modified": "2021-09-13T19:08:01.959745Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c94ae8e-1a4f-4951-9651-185322fb6ad3", "created": "2021-09-13T19:08:01.960154Z", "modified": "2021-09-13T19:08:01.960154Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2ba7dbf-3771-4cb5-9652-6052b086dc0b", "created": "2021-09-13T19:08:01.960558Z", "modified": "2021-09-13T19:08:01.960558Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2f3880d-b06b-488b-ad5e-04ef3a870e42", "created": "2021-09-13T19:09:00.918279Z", "modified": "2021-09-13T19:09:00.918279Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2ba7dbf-3771-4cb5-9652-6052b086dc0b", "created": "2021-09-13T19:08:01.960558Z", "modified": "2021-09-13T19:08:01.960558Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf4373e1-3ee3-4f95-ba9e-45aa4af00b87", "created": "2021-09-13T19:10:15.045406Z", "modified": "2021-09-13T19:10:15.045406Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2ba7dbf-3771-4cb5-9652-6052b086dc0b", "created": "2021-09-13T19:08:01.960558Z", "modified": "2021-09-13T19:08:01.960558Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78a103fc-8d18-46b3-a337-50dc311ef827", "created": "2021-09-13T19:10:19.704672Z", "modified": "2021-09-13T19:10:19.704672Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2ba7dbf-3771-4cb5-9652-6052b086dc0b", "created": "2021-09-13T19:08:01.960558Z", "modified": "2021-09-13T19:08:01.960558Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1f580be2-bc31-45b2-a22a-2d60b1547477", "created": "2021-09-13T19:10:56.4524Z", "modified": "2021-09-13T19:10:56.4524Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e79cebcd-9dee-49bd-9a0e-35c480794c2e", "created": "2021-09-13T19:08:01.960965Z", "modified": "2021-09-13T19:08:01.960965Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae448ed9-0995-4625-9f42-946dea7cb57b", "created": "2021-09-13T19:09:20.881078Z", "modified": "2021-09-13T19:09:20.881078Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e325fe2-a1f2-4192-8150-40acc0839a4a", "created": "2021-09-13T19:08:14.463236Z", "modified": "2021-09-13T19:08:14.463236Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26126d3b-ebb3-4e30-93be-738e7b5a8364", "created": "2021-09-13T19:08:14.465885Z", "modified": "2021-09-13T19:08:14.465885Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26126d3b-ebb3-4e30-93be-738e7b5a8364", "created": "2021-09-13T19:08:14.465885Z", "modified": "2021-09-13T19:08:14.465885Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38d81ed8-795c-49de-ae91-1bfc79b710a0", "created": "2021-09-13T19:08:14.466926Z", "modified": "2021-09-13T19:08:14.466926Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38d81ed8-795c-49de-ae91-1bfc79b710a0", "created": "2021-09-13T19:08:14.466926Z", "modified": "2021-09-13T19:08:14.466926Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113e4879-b4b3-45f9-91c8-1470d0483f99", "created": "2021-09-13T19:08:14.467345Z", "modified": "2021-09-13T19:08:14.467345Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113e4879-b4b3-45f9-91c8-1470d0483f99", "created": "2021-09-13T19:08:14.467345Z", "modified": "2021-09-13T19:08:14.467345Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d88eea3-1beb-479f-8af8-9c38178ece97", "created": "2021-09-13T19:08:14.468178Z", "modified": "2021-09-13T19:08:14.468178Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d88eea3-1beb-479f-8af8-9c38178ece97", "created": "2021-09-13T19:08:14.468178Z", "modified": "2021-09-13T19:08:14.468178Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e0671f24-fa23-4227-b8a3-890aac681652", "created": "2021-09-13T19:08:14.468993Z", "modified": "2021-09-13T19:08:14.468993Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db84a632-b2c7-46fc-8cbf-9dd5fb6e6d44", "created": "2021-09-13T19:08:14.469401Z", "modified": "2021-09-13T19:08:14.469401Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--00917614-1d08-49a9-a305-5d07d71f45d1", "created": "2021-09-13T19:08:23.400744Z", "modified": "2021-09-13T19:08:23.400744Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7a79ebaa-8661-4633-a11f-faac51dab4e7", "created": "2021-09-13T19:08:23.402535Z", "modified": "2021-09-13T19:08:23.402535Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7a79ebaa-8661-4633-a11f-faac51dab4e7", "created": "2021-09-13T19:08:23.402535Z", "modified": "2021-09-13T19:08:23.402535Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc1d2162-fe15-42cd-8ca0-b17e3e291ec7", "created": "2021-09-13T19:08:23.40402Z", "modified": "2021-09-13T19:08:23.40402Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc1d2162-fe15-42cd-8ca0-b17e3e291ec7", "created": "2021-09-13T19:08:23.40402Z", "modified": "2021-09-13T19:08:23.40402Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8eb5772d-5da9-4634-8698-a11c5107eb6e", "created": "2021-09-13T19:08:23.405444Z", "modified": "2021-09-13T19:08:23.405444Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2f3880d-b06b-488b-ad5e-04ef3a870e42", "created": "2021-09-13T19:09:00.918279Z", "modified": "2021-09-13T19:09:00.918279Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8eb5772d-5da9-4634-8698-a11c5107eb6e", "created": "2021-09-13T19:08:23.405444Z", "modified": "2021-09-13T19:08:23.405444Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf4373e1-3ee3-4f95-ba9e-45aa4af00b87", "created": "2021-09-13T19:10:15.045406Z", "modified": "2021-09-13T19:10:15.045406Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8eb5772d-5da9-4634-8698-a11c5107eb6e", "created": "2021-09-13T19:08:23.405444Z", "modified": "2021-09-13T19:08:23.405444Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78a103fc-8d18-46b3-a337-50dc311ef827", "created": "2021-09-13T19:10:19.704672Z", "modified": "2021-09-13T19:10:19.704672Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8eb5772d-5da9-4634-8698-a11c5107eb6e", "created": "2021-09-13T19:08:23.405444Z", "modified": "2021-09-13T19:08:23.405444Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1f580be2-bc31-45b2-a22a-2d60b1547477", "created": "2021-09-13T19:10:56.4524Z", "modified": "2021-09-13T19:10:56.4524Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e797c5e5-0de6-42d0-98ae-83fb4f62ba2d", "created": "2021-09-13T19:08:23.406847Z", "modified": "2021-09-13T19:08:23.406847Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e797c5e5-0de6-42d0-98ae-83fb4f62ba2d", "created": "2021-09-13T19:08:23.406847Z", "modified": "2021-09-13T19:08:23.406847Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--45101d48-c90e-4f40-8307-56d751bee847", "created": "2021-09-13T19:08:23.407929Z", "modified": "2021-09-13T19:08:23.407929Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d452ac50-67e4-4eee-aa04-fdd4a699c941", "created": "2021-09-13T19:09:15.275686Z", "modified": "2021-09-13T19:09:15.275686Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--07cf003c-af6e-48db-acbc-f7cf0c4349b6", "created": "2021-09-13T19:08:23.408282Z", "modified": "2021-09-13T19:08:23.408282Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3e75d898-ec63-4737-b9e2-c2b1078fb06e", "created": "2021-09-13T19:08:23.408641Z", "modified": "2021-09-13T19:08:23.408641Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d406dd18-70eb-498d-84e5-52b0c7748f85", "created": "2021-09-13T19:08:28.399038Z", "modified": "2021-09-13T19:08:28.399038Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7985154d-b259-488b-b446-1f988d4f90ad", "created": "2021-09-13T19:08:28.400135Z", "modified": "2021-09-13T19:08:28.400135Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7985154d-b259-488b-b446-1f988d4f90ad", "created": "2021-09-13T19:08:28.400135Z", "modified": "2021-09-13T19:08:28.400135Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5c92f132-7368-4b4b-aeef-7b9fd63bb936", "created": "2021-09-13T19:08:28.401003Z", "modified": "2021-09-13T19:08:28.401003Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5c92f132-7368-4b4b-aeef-7b9fd63bb936", "created": "2021-09-13T19:08:28.401003Z", "modified": "2021-09-13T19:08:28.401003Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8a299fc6-00c1-43fa-99aa-17a00b55e5a6", "created": "2021-09-13T19:08:28.401851Z", "modified": "2021-09-13T19:08:28.401851Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8a299fc6-00c1-43fa-99aa-17a00b55e5a6", "created": "2021-09-13T19:08:28.401851Z", "modified": "2021-09-13T19:08:28.401851Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113ff33d-6916-4f76-b57b-0d4035145366", "created": "2021-09-13T19:08:28.402704Z", "modified": "2021-09-13T19:08:28.402704Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--113ff33d-6916-4f76-b57b-0d4035145366", "created": "2021-09-13T19:08:28.402704Z", "modified": "2021-09-13T19:08:28.402704Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a3387a01-a871-492c-bf9c-3220ead49cef", "created": "2021-09-13T19:08:28.403581Z", "modified": "2021-09-13T19:08:28.403581Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d452ac50-67e4-4eee-aa04-fdd4a699c941", "created": "2021-09-13T19:09:15.275686Z", "modified": "2021-09-13T19:09:15.275686Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38505283-9864-4341-a218-d7c2297d7390", "created": "2021-09-13T19:08:28.40443Z", "modified": "2021-09-13T19:08:28.40443Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af2a16fa-b27e-4bd8-9b0f-45f20dd5659a", "created": "2021-09-13T19:08:33.6967Z", "modified": "2021-09-13T19:08:33.6967Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc349977-07d4-44e5-9749-19ae7874876f", "created": "2021-09-13T19:09:00.917458Z", "modified": "2021-09-13T19:09:00.917458Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e827ed2-c30b-4237-a9a5-afcc95369b99", "created": "2021-09-13T19:09:55.476718Z", "modified": "2021-09-13T19:09:55.476718Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f498f010-4365-415b-90cd-9674d78dd84c", "created": "2021-09-13T19:10:15.046247Z", "modified": "2021-09-13T19:10:15.046247Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--184887a0-e3c5-47d5-b529-b4fd5de5bc57", "created": "2021-09-13T19:10:19.705048Z", "modified": "2021-09-13T19:10:19.705048Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--155c54cf-02b2-4a4e-9373-baa55daa74dd", "created": "2021-09-13T19:10:23.792796Z", "modified": "2021-09-13T19:10:23.792796Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--940b8e2e-55ac-4836-8535-3340c054af8b", "created": "2021-09-13T19:10:28.640982Z", "modified": "2021-09-13T19:10:28.640982Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d6fa3dff-f36f-416e-a952-3e8090af4f1e", "created": "2021-09-13T19:10:32.45156Z", "modified": "2021-09-13T19:10:32.45156Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c385635-c828-471d-a38b-3c01810a7946", "created": "2021-09-13T19:10:36.622231Z", "modified": "2021-09-13T19:10:36.622231Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--85eeb0df-b52c-4b68-984b-a0f773f4d289", "created": "2021-09-13T19:10:41.342294Z", "modified": "2021-09-13T19:10:41.342294Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc0814a-6210-4b0f-8de8-bd50ab34b52f", "created": "2021-09-13T19:10:45.419878Z", "modified": "2021-09-13T19:10:45.419878Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06dc0fa1-f353-4a5f-95b8-d4f50668cf76", "created": "2021-09-13T19:10:56.453091Z", "modified": "2021-09-13T19:10:56.453091Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd503c79-8af4-42c3-9930-44e075d3e7c1", "created": "2021-09-13T19:11:10.028227Z", "modified": "2021-09-13T19:11:10.028227Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5bbb55d6-8927-4fa5-adb4-fa6641a0bacf", "created": "2021-09-13T19:08:28.406111Z", "modified": "2021-09-13T19:08:28.406111Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--82522607-6ec0-4620-886e-4f4b3fc38aa0", "created": "2021-09-13T19:11:14.211673Z", "modified": "2021-09-13T19:11:14.211673Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--68761126-dabc-4b84-ac4d-418fb8c0d07f", "created": "2021-09-13T19:08:38.333034Z", "modified": "2021-09-13T19:08:38.333034Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01e3e575-d0a6-4e29-82da-5ef91ea91ecd", "created": "2021-09-13T19:08:38.33434Z", "modified": "2021-09-13T19:08:38.33434Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01e3e575-d0a6-4e29-82da-5ef91ea91ecd", "created": "2021-09-13T19:08:38.33434Z", "modified": "2021-09-13T19:08:38.33434Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cdffc863-44b1-4c07-b117-cb3418e393bb", "created": "2021-09-13T19:08:38.335214Z", "modified": "2021-09-13T19:08:38.335214Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cdffc863-44b1-4c07-b117-cb3418e393bb", "created": "2021-09-13T19:08:38.335214Z", "modified": "2021-09-13T19:08:38.335214Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1c517c9c-d4bc-4b83-ab92-5ef33037b01b", "created": "2021-09-13T19:08:38.335664Z", "modified": "2021-09-13T19:08:38.335664Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1c517c9c-d4bc-4b83-ab92-5ef33037b01b", "created": "2021-09-13T19:08:38.335664Z", "modified": "2021-09-13T19:08:38.335664Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a48434d1-92c5-4258-89b3-30acc44b4596", "created": "2021-09-13T19:08:38.336553Z", "modified": "2021-09-13T19:08:38.336553Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a48434d1-92c5-4258-89b3-30acc44b4596", "created": "2021-09-13T19:08:38.336553Z", "modified": "2021-09-13T19:08:38.336553Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0891af88-8b2b-4c86-8bce-d456536e0ca4", "created": "2021-09-13T19:08:38.337868Z", "modified": "2021-09-13T19:08:38.337868Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0891af88-8b2b-4c86-8bce-d456536e0ca4", "created": "2021-09-13T19:08:38.337868Z", "modified": "2021-09-13T19:08:38.337868Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d04c816-67da-45f7-a47a-b085586dcede", "created": "2021-09-13T19:08:52.561544Z", "modified": "2021-09-13T19:08:52.561544Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af2a16fa-b27e-4bd8-9b0f-45f20dd5659a", "created": "2021-09-13T19:08:33.6967Z", "modified": "2021-09-13T19:08:33.6967Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc349977-07d4-44e5-9749-19ae7874876f", "created": "2021-09-13T19:09:00.917458Z", "modified": "2021-09-13T19:09:00.917458Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e827ed2-c30b-4237-a9a5-afcc95369b99", "created": "2021-09-13T19:09:55.476718Z", "modified": "2021-09-13T19:09:55.476718Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f498f010-4365-415b-90cd-9674d78dd84c", "created": "2021-09-13T19:10:15.046247Z", "modified": "2021-09-13T19:10:15.046247Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--184887a0-e3c5-47d5-b529-b4fd5de5bc57", "created": "2021-09-13T19:10:19.705048Z", "modified": "2021-09-13T19:10:19.705048Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--155c54cf-02b2-4a4e-9373-baa55daa74dd", "created": "2021-09-13T19:10:23.792796Z", "modified": "2021-09-13T19:10:23.792796Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--940b8e2e-55ac-4836-8535-3340c054af8b", "created": "2021-09-13T19:10:28.640982Z", "modified": "2021-09-13T19:10:28.640982Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d6fa3dff-f36f-416e-a952-3e8090af4f1e", "created": "2021-09-13T19:10:32.45156Z", "modified": "2021-09-13T19:10:32.45156Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c385635-c828-471d-a38b-3c01810a7946", "created": "2021-09-13T19:10:36.622231Z", "modified": "2021-09-13T19:10:36.622231Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--85eeb0df-b52c-4b68-984b-a0f773f4d289", "created": "2021-09-13T19:10:41.342294Z", "modified": "2021-09-13T19:10:41.342294Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc0814a-6210-4b0f-8de8-bd50ab34b52f", "created": "2021-09-13T19:10:45.419878Z", "modified": "2021-09-13T19:10:45.419878Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06dc0fa1-f353-4a5f-95b8-d4f50668cf76", "created": "2021-09-13T19:10:56.453091Z", "modified": "2021-09-13T19:10:56.453091Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd503c79-8af4-42c3-9930-44e075d3e7c1", "created": "2021-09-13T19:11:10.028227Z", "modified": "2021-09-13T19:11:10.028227Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1d53f378-d4bc-4c24-b0b0-3c4963a5aced", "created": "2021-09-13T19:08:52.562841Z", "modified": "2021-09-13T19:08:52.562841Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--82522607-6ec0-4620-886e-4f4b3fc38aa0", "created": "2021-09-13T19:11:14.211673Z", "modified": "2021-09-13T19:11:14.211673Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--868f9bc4-b886-48b4-b260-c30d5cdbbfd3", "created": "2021-09-13T19:08:52.563342Z", "modified": "2021-09-13T19:08:52.563342Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--868f9bc4-b886-48b4-b260-c30d5cdbbfd3", "created": "2021-09-13T19:08:52.563342Z", "modified": "2021-09-13T19:08:52.563342Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d0765eb8-1829-42b3-902b-c83366539cc8", "created": "2021-09-13T19:08:52.563819Z", "modified": "2021-09-13T19:08:52.563819Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d0765eb8-1829-42b3-902b-c83366539cc8", "created": "2021-09-13T19:08:52.563819Z", "modified": "2021-09-13T19:08:52.563819Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6dc595f4-4ee5-4e11-8c2b-ddfa4547693e", "created": "2021-09-13T19:08:52.56429Z", "modified": "2021-09-13T19:08:52.56429Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6dc595f4-4ee5-4e11-8c2b-ddfa4547693e", "created": "2021-09-13T19:08:52.56429Z", "modified": "2021-09-13T19:08:52.56429Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70876506-e7e2-4146-8d12-347c90d76a76", "created": "2021-09-13T19:08:52.56523Z", "modified": "2021-09-13T19:08:52.56523Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--33971eaf-7557-4dd2-bc09-1973129a3e93", "created": "2021-09-13T19:09:00.311765Z", "modified": "2021-09-13T19:09:00.311765Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb7cb295-7d91-4475-85a4-88a81c38d4f8", "created": "2021-09-13T19:09:00.312715Z", "modified": "2021-09-13T19:09:00.312715Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb7cb295-7d91-4475-85a4-88a81c38d4f8", "created": "2021-09-13T19:09:00.312715Z", "modified": "2021-09-13T19:09:00.312715Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01f1f5fa-3583-41d8-b354-aca67807f9a8", "created": "2021-09-13T19:09:00.313475Z", "modified": "2021-09-13T19:09:00.313475Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--01f1f5fa-3583-41d8-b354-aca67807f9a8", "created": "2021-09-13T19:09:00.313475Z", "modified": "2021-09-13T19:09:00.313475Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4f569471-9b97-41ba-89df-20b478bfc88d", "created": "2021-09-13T19:09:00.314227Z", "modified": "2021-09-13T19:09:00.314227Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4f569471-9b97-41ba-89df-20b478bfc88d", "created": "2021-09-13T19:09:00.314227Z", "modified": "2021-09-13T19:09:00.314227Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bfa49353-6d38-42dc-9be3-2a484f79c15e", "created": "2021-09-13T19:09:00.315739Z", "modified": "2021-09-13T19:09:00.315739Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bfa49353-6d38-42dc-9be3-2a484f79c15e", "created": "2021-09-13T19:09:00.315739Z", "modified": "2021-09-13T19:09:00.315739Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2958546-1554-4ac4-b473-3c6b929e14b2", "created": "2021-09-13T19:09:00.317249Z", "modified": "2021-09-13T19:09:00.317249Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b2958546-1554-4ac4-b473-3c6b929e14b2", "created": "2021-09-13T19:09:00.317249Z", "modified": "2021-09-13T19:09:00.317249Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--77fb5a28-d915-450d-8324-e01c7bf206a5", "created": "2021-09-13T19:09:00.318736Z", "modified": "2021-09-13T19:09:00.318736Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--12095550-5df7-4602-ac05-0e62caa6eed5", "created": "2021-09-13T19:09:06.58835Z", "modified": "2021-09-13T19:09:06.58835Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af2a16fa-b27e-4bd8-9b0f-45f20dd5659a", "created": "2021-09-13T19:08:33.6967Z", "modified": "2021-09-13T19:08:33.6967Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc349977-07d4-44e5-9749-19ae7874876f", "created": "2021-09-13T19:09:00.917458Z", "modified": "2021-09-13T19:09:00.917458Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e827ed2-c30b-4237-a9a5-afcc95369b99", "created": "2021-09-13T19:09:55.476718Z", "modified": "2021-09-13T19:09:55.476718Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f498f010-4365-415b-90cd-9674d78dd84c", "created": "2021-09-13T19:10:15.046247Z", "modified": "2021-09-13T19:10:15.046247Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--184887a0-e3c5-47d5-b529-b4fd5de5bc57", "created": "2021-09-13T19:10:19.705048Z", "modified": "2021-09-13T19:10:19.705048Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--155c54cf-02b2-4a4e-9373-baa55daa74dd", "created": "2021-09-13T19:10:23.792796Z", "modified": "2021-09-13T19:10:23.792796Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--940b8e2e-55ac-4836-8535-3340c054af8b", "created": "2021-09-13T19:10:28.640982Z", "modified": "2021-09-13T19:10:28.640982Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d6fa3dff-f36f-416e-a952-3e8090af4f1e", "created": "2021-09-13T19:10:32.45156Z", "modified": "2021-09-13T19:10:32.45156Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c385635-c828-471d-a38b-3c01810a7946", "created": "2021-09-13T19:10:36.622231Z", "modified": "2021-09-13T19:10:36.622231Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--85eeb0df-b52c-4b68-984b-a0f773f4d289", "created": "2021-09-13T19:10:41.342294Z", "modified": "2021-09-13T19:10:41.342294Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc0814a-6210-4b0f-8de8-bd50ab34b52f", "created": "2021-09-13T19:10:45.419878Z", "modified": "2021-09-13T19:10:45.419878Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06dc0fa1-f353-4a5f-95b8-d4f50668cf76", "created": "2021-09-13T19:10:56.453091Z", "modified": "2021-09-13T19:10:56.453091Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd503c79-8af4-42c3-9930-44e075d3e7c1", "created": "2021-09-13T19:11:10.028227Z", "modified": "2021-09-13T19:11:10.028227Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--83fa41f9-32ab-479f-a344-13868589489c", "created": "2021-09-13T19:09:06.58944Z", "modified": "2021-09-13T19:09:06.58944Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--82522607-6ec0-4620-886e-4f4b3fc38aa0", "created": "2021-09-13T19:11:14.211673Z", "modified": "2021-09-13T19:11:14.211673Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ef36e32a-5206-45a2-9b3d-81e573c2638e", "created": "2021-09-13T19:09:06.590302Z", "modified": "2021-09-13T19:09:06.590302Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ef36e32a-5206-45a2-9b3d-81e573c2638e", "created": "2021-09-13T19:09:06.590302Z", "modified": "2021-09-13T19:09:06.590302Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c12dc720-d8d5-4f4c-9dff-31fe56b86556", "created": "2021-09-13T19:09:06.591178Z", "modified": "2021-09-13T19:09:06.591178Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c12dc720-d8d5-4f4c-9dff-31fe56b86556", "created": "2021-09-13T19:09:06.591178Z", "modified": "2021-09-13T19:09:06.591178Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3ca54ad4-a013-4062-85c2-b6c84315a3ad", "created": "2021-09-13T19:09:06.59203Z", "modified": "2021-09-13T19:09:06.59203Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3ca54ad4-a013-4062-85c2-b6c84315a3ad", "created": "2021-09-13T19:09:06.59203Z", "modified": "2021-09-13T19:09:06.59203Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d8a3ab60-6af9-45d8-a57d-3be1f082a10c", "created": "2021-09-13T19:09:06.593717Z", "modified": "2021-09-13T19:09:06.593717Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d8a3ab60-6af9-45d8-a57d-3be1f082a10c", "created": "2021-09-13T19:09:06.593717Z", "modified": "2021-09-13T19:09:06.593717Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--94fb899e-3636-45dd-a21d-4ac93acc6a82", "created": "2021-09-13T19:09:06.59456Z", "modified": "2021-09-13T19:09:06.59456Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d452ac50-67e4-4eee-aa04-fdd4a699c941", "created": "2021-09-13T19:09:15.275686Z", "modified": "2021-09-13T19:09:15.275686Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204913d-feec-47b3-9224-0a8106d4bcac", "created": "2021-09-13T19:09:06.595079Z", "modified": "2021-09-13T19:09:06.595079Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e4b10f67-3fb9-4662-8a37-c56c70016b30", "created": "2021-09-13T19:09:06.595433Z", "modified": "2021-09-13T19:09:06.595433Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fb96b08e-446a-4beb-aa50-94df92e9e72b", "created": "2021-09-13T19:09:16.436057Z", "modified": "2021-09-13T19:09:16.436057Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--93d09ad7-8941-486c-b793-ba2c98c9d7d9", "created": "2021-09-13T19:09:16.437226Z", "modified": "2021-09-13T19:09:16.437226Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--93d09ad7-8941-486c-b793-ba2c98c9d7d9", "created": "2021-09-13T19:09:16.437226Z", "modified": "2021-09-13T19:09:16.437226Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--94fd8628-dd1d-46d0-abb8-ee96e1dce333", "created": "2021-09-13T19:09:16.438152Z", "modified": "2021-09-13T19:09:16.438152Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--94fd8628-dd1d-46d0-abb8-ee96e1dce333", "created": "2021-09-13T19:09:16.438152Z", "modified": "2021-09-13T19:09:16.438152Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--59dcc2ed-d3ef-4c7a-a6fa-05ac8222600f", "created": "2021-09-13T19:09:16.43911Z", "modified": "2021-09-13T19:09:16.43911Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--59dcc2ed-d3ef-4c7a-a6fa-05ac8222600f", "created": "2021-09-13T19:09:16.43911Z", "modified": "2021-09-13T19:09:16.43911Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7369be-238b-4bd0-a236-ef13debc377d", "created": "2021-09-13T19:09:16.440922Z", "modified": "2021-09-13T19:09:16.440922Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7369be-238b-4bd0-a236-ef13debc377d", "created": "2021-09-13T19:09:16.440922Z", "modified": "2021-09-13T19:09:16.440922Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f259026b-0c07-441c-b766-12ab109688ae", "created": "2021-09-13T19:09:16.442994Z", "modified": "2021-09-13T19:09:16.442994Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f259026b-0c07-441c-b766-12ab109688ae", "created": "2021-09-13T19:09:16.442994Z", "modified": "2021-09-13T19:09:16.442994Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--69534cce-d0bf-4494-b050-86adab692fda", "created": "2021-09-13T19:09:16.444074Z", "modified": "2021-09-13T19:09:16.444074Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--137e3021-e69c-4f9a-9de2-3f51c8187b75", "created": "2021-09-13T19:09:23.821804Z", "modified": "2021-09-13T19:09:23.821804Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0bd3cd61-a704-4204-aaeb-d49abab0b70b", "created": "2021-09-13T19:09:23.823314Z", "modified": "2021-09-13T19:09:23.823314Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e4aa4c9-8cfa-4d5a-98d9-e22c09cbf2db", "created": "2021-09-13T19:09:23.824484Z", "modified": "2021-09-13T19:09:23.824484Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e4aa4c9-8cfa-4d5a-98d9-e22c09cbf2db", "created": "2021-09-13T19:09:23.824484Z", "modified": "2021-09-13T19:09:23.824484Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0db0ccbf-285c-430d-949a-e1281af71085", "created": "2021-09-13T19:09:23.82564Z", "modified": "2021-09-13T19:09:23.82564Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d452ac50-67e4-4eee-aa04-fdd4a699c941", "created": "2021-09-13T19:09:15.275686Z", "modified": "2021-09-13T19:09:15.275686Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af2a16fa-b27e-4bd8-9b0f-45f20dd5659a", "created": "2021-09-13T19:08:33.6967Z", "modified": "2021-09-13T19:08:33.6967Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc349977-07d4-44e5-9749-19ae7874876f", "created": "2021-09-13T19:09:00.917458Z", "modified": "2021-09-13T19:09:00.917458Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e827ed2-c30b-4237-a9a5-afcc95369b99", "created": "2021-09-13T19:09:55.476718Z", "modified": "2021-09-13T19:09:55.476718Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f498f010-4365-415b-90cd-9674d78dd84c", "created": "2021-09-13T19:10:15.046247Z", "modified": "2021-09-13T19:10:15.046247Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--184887a0-e3c5-47d5-b529-b4fd5de5bc57", "created": "2021-09-13T19:10:19.705048Z", "modified": "2021-09-13T19:10:19.705048Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--155c54cf-02b2-4a4e-9373-baa55daa74dd", "created": "2021-09-13T19:10:23.792796Z", "modified": "2021-09-13T19:10:23.792796Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--940b8e2e-55ac-4836-8535-3340c054af8b", "created": "2021-09-13T19:10:28.640982Z", "modified": "2021-09-13T19:10:28.640982Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d6fa3dff-f36f-416e-a952-3e8090af4f1e", "created": "2021-09-13T19:10:32.45156Z", "modified": "2021-09-13T19:10:32.45156Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c385635-c828-471d-a38b-3c01810a7946", "created": "2021-09-13T19:10:36.622231Z", "modified": "2021-09-13T19:10:36.622231Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--85eeb0df-b52c-4b68-984b-a0f773f4d289", "created": "2021-09-13T19:10:41.342294Z", "modified": "2021-09-13T19:10:41.342294Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc0814a-6210-4b0f-8de8-bd50ab34b52f", "created": "2021-09-13T19:10:45.419878Z", "modified": "2021-09-13T19:10:45.419878Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06dc0fa1-f353-4a5f-95b8-d4f50668cf76", "created": "2021-09-13T19:10:56.453091Z", "modified": "2021-09-13T19:10:56.453091Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd503c79-8af4-42c3-9930-44e075d3e7c1", "created": "2021-09-13T19:11:10.028227Z", "modified": "2021-09-13T19:11:10.028227Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2088963d-54f3-4552-ae6b-fbbb9c2d79b8", "created": "2021-09-13T19:09:23.826817Z", "modified": "2021-09-13T19:09:23.826817Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--82522607-6ec0-4620-886e-4f4b3fc38aa0", "created": "2021-09-13T19:11:14.211673Z", "modified": "2021-09-13T19:11:14.211673Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--877e9446-55c9-4e18-a1db-29c7c4e095b3", "created": "2021-09-13T19:09:42.433117Z", "modified": "2021-09-13T19:09:42.433117Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce8401b4-f22f-4626-a03a-78d91e631371", "created": "2021-09-13T19:09:42.43447Z", "modified": "2021-09-13T19:09:42.43447Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce8401b4-f22f-4626-a03a-78d91e631371", "created": "2021-09-13T19:09:42.43447Z", "modified": "2021-09-13T19:09:42.43447Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--da7f13f6-2558-4730-ad6a-f5a5cbf29483", "created": "2021-09-13T19:09:42.435226Z", "modified": "2021-09-13T19:09:42.435226Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--da7f13f6-2558-4730-ad6a-f5a5cbf29483", "created": "2021-09-13T19:09:42.435226Z", "modified": "2021-09-13T19:09:42.435226Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38844c67-a88b-4561-ae2a-5428eeb2fc6a", "created": "2021-09-13T19:09:42.435765Z", "modified": "2021-09-13T19:09:42.435765Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--38844c67-a88b-4561-ae2a-5428eeb2fc6a", "created": "2021-09-13T19:09:42.435765Z", "modified": "2021-09-13T19:09:42.435765Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--660732fd-a574-4067-ab23-29b37677247b", "created": "2021-09-13T19:09:42.436828Z", "modified": "2021-09-13T19:09:42.436828Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--660732fd-a574-4067-ab23-29b37677247b", "created": "2021-09-13T19:09:42.436828Z", "modified": "2021-09-13T19:09:42.436828Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4add5053-6c4d-4185-b26a-9ad2c81ac096", "created": "2021-09-13T19:09:42.437362Z", "modified": "2021-09-13T19:09:42.437362Z", "name": "Query Registry MITRE T1012", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1012/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204cd1c-f176-4c71-adb1-30b3ed168f77", "created": "2021-09-13T19:09:20.879047Z", "modified": "2021-09-13T19:09:20.879047Z", "name": "Query Registry MITRE T1012", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1012/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0da11244-67dc-4657-8058-275649096dd7", "created": "2021-09-13T19:09:42.438415Z", "modified": "2021-09-13T19:09:42.438415Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0da11244-67dc-4657-8058-275649096dd7", "created": "2021-09-13T19:09:42.438415Z", "modified": "2021-09-13T19:09:42.438415Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a9181952-fec2-4ad3-9b58-916056e0d922", "created": "2021-09-13T19:09:47.573023Z", "modified": "2021-09-13T19:09:47.573023Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5053d4aa-202f-4eb6-8af0-b298a0980ef7", "created": "2021-09-13T19:09:47.574784Z", "modified": "2021-09-13T19:09:47.574784Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5053d4aa-202f-4eb6-8af0-b298a0980ef7", "created": "2021-09-13T19:09:47.574784Z", "modified": "2021-09-13T19:09:47.574784Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0fbca480-c8cd-425f-801a-e140b7774288", "created": "2021-09-13T19:09:47.575565Z", "modified": "2021-09-13T19:09:47.575565Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0fbca480-c8cd-425f-801a-e140b7774288", "created": "2021-09-13T19:09:47.575565Z", "modified": "2021-09-13T19:09:47.575565Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cd9aeca7-7542-4037-8d2f-70fac601e56f", "created": "2021-09-13T19:09:47.576336Z", "modified": "2021-09-13T19:09:47.576336Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae448ed9-0995-4625-9f42-946dea7cb57b", "created": "2021-09-13T19:09:20.881078Z", "modified": "2021-09-13T19:09:20.881078Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb86393f-0689-4e87-a0e3-3c5129133757", "created": "2021-09-13T19:09:47.578637Z", "modified": "2021-09-13T19:09:47.578637Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e230473b-ad32-4659-9f32-01db3cddfb3e", "created": "2021-09-13T19:09:47.579167Z", "modified": "2021-09-13T19:09:47.579167Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0f237b5d-0000-4f64-b90c-e9a78b3f952a", "created": "2021-09-13T19:09:47.579592Z", "modified": "2021-09-13T19:09:47.579592Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2f3880d-b06b-488b-ad5e-04ef3a870e42", "created": "2021-09-13T19:09:00.918279Z", "modified": "2021-09-13T19:09:00.918279Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0f237b5d-0000-4f64-b90c-e9a78b3f952a", "created": "2021-09-13T19:09:47.579592Z", "modified": "2021-09-13T19:09:47.579592Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf4373e1-3ee3-4f95-ba9e-45aa4af00b87", "created": "2021-09-13T19:10:15.045406Z", "modified": "2021-09-13T19:10:15.045406Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0f237b5d-0000-4f64-b90c-e9a78b3f952a", "created": "2021-09-13T19:09:47.579592Z", "modified": "2021-09-13T19:09:47.579592Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78a103fc-8d18-46b3-a337-50dc311ef827", "created": "2021-09-13T19:10:19.704672Z", "modified": "2021-09-13T19:10:19.704672Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0f237b5d-0000-4f64-b90c-e9a78b3f952a", "created": "2021-09-13T19:09:47.579592Z", "modified": "2021-09-13T19:09:47.579592Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1f580be2-bc31-45b2-a22a-2d60b1547477", "created": "2021-09-13T19:10:56.4524Z", "modified": "2021-09-13T19:10:56.4524Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9aa72357-d235-4fea-9edb-dd341d214fa4", "created": "2021-09-13T19:09:58.589579Z", "modified": "2021-09-13T19:09:58.589579Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--42f7db48-a652-4818-975b-1478e10ff2ab", "created": "2021-09-13T19:09:58.591585Z", "modified": "2021-09-13T19:09:58.591585Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--42f7db48-a652-4818-975b-1478e10ff2ab", "created": "2021-09-13T19:09:58.591585Z", "modified": "2021-09-13T19:09:58.591585Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2edffffd-4fbd-4d03-97ff-80450a0e533d", "created": "2021-09-13T19:09:58.59244Z", "modified": "2021-09-13T19:09:58.59244Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2edffffd-4fbd-4d03-97ff-80450a0e533d", "created": "2021-09-13T19:09:58.59244Z", "modified": "2021-09-13T19:09:58.59244Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--31365cfd-97d2-4bb9-90dd-bf6f96fb2e29", "created": "2021-09-13T19:09:58.59491Z", "modified": "2021-09-13T19:09:58.59491Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2fafed9-1661-4e0e-80df-9e771903f859", "created": "2021-09-13T19:09:58.595302Z", "modified": "2021-09-13T19:09:58.595302Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af2a16fa-b27e-4bd8-9b0f-45f20dd5659a", "created": "2021-09-13T19:08:33.6967Z", "modified": "2021-09-13T19:08:33.6967Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc349977-07d4-44e5-9749-19ae7874876f", "created": "2021-09-13T19:09:00.917458Z", "modified": "2021-09-13T19:09:00.917458Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e827ed2-c30b-4237-a9a5-afcc95369b99", "created": "2021-09-13T19:09:55.476718Z", "modified": "2021-09-13T19:09:55.476718Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f498f010-4365-415b-90cd-9674d78dd84c", "created": "2021-09-13T19:10:15.046247Z", "modified": "2021-09-13T19:10:15.046247Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--184887a0-e3c5-47d5-b529-b4fd5de5bc57", "created": "2021-09-13T19:10:19.705048Z", "modified": "2021-09-13T19:10:19.705048Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--155c54cf-02b2-4a4e-9373-baa55daa74dd", "created": "2021-09-13T19:10:23.792796Z", "modified": "2021-09-13T19:10:23.792796Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--940b8e2e-55ac-4836-8535-3340c054af8b", "created": "2021-09-13T19:10:28.640982Z", "modified": "2021-09-13T19:10:28.640982Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d6fa3dff-f36f-416e-a952-3e8090af4f1e", "created": "2021-09-13T19:10:32.45156Z", "modified": "2021-09-13T19:10:32.45156Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c385635-c828-471d-a38b-3c01810a7946", "created": "2021-09-13T19:10:36.622231Z", "modified": "2021-09-13T19:10:36.622231Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--85eeb0df-b52c-4b68-984b-a0f773f4d289", "created": "2021-09-13T19:10:41.342294Z", "modified": "2021-09-13T19:10:41.342294Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc0814a-6210-4b0f-8de8-bd50ab34b52f", "created": "2021-09-13T19:10:45.419878Z", "modified": "2021-09-13T19:10:45.419878Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06dc0fa1-f353-4a5f-95b8-d4f50668cf76", "created": "2021-09-13T19:10:56.453091Z", "modified": "2021-09-13T19:10:56.453091Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd503c79-8af4-42c3-9930-44e075d3e7c1", "created": "2021-09-13T19:11:10.028227Z", "modified": "2021-09-13T19:11:10.028227Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6fc09ab8-1e2a-4a63-9f5c-6f6eb6339d9f", "created": "2021-09-13T19:09:58.596069Z", "modified": "2021-09-13T19:09:58.596069Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--82522607-6ec0-4620-886e-4f4b3fc38aa0", "created": "2021-09-13T19:11:14.211673Z", "modified": "2021-09-13T19:11:14.211673Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--48bf38d6-2e1f-40d8-863e-461373aaf472", "created": "2021-09-13T19:10:04.580993Z", "modified": "2021-09-13T19:10:04.580993Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--41219661-ebbb-4886-abd0-015fef830133", "created": "2021-09-13T19:10:04.581522Z", "modified": "2021-09-13T19:10:04.581522Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--41219661-ebbb-4886-abd0-015fef830133", "created": "2021-09-13T19:10:04.581522Z", "modified": "2021-09-13T19:10:04.581522Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ef8c092a-2b34-4902-a7b1-8406067d809c", "created": "2021-09-13T19:10:04.581894Z", "modified": "2021-09-13T19:10:04.581894Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ef8c092a-2b34-4902-a7b1-8406067d809c", "created": "2021-09-13T19:10:04.581894Z", "modified": "2021-09-13T19:10:04.581894Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0219cf57-594f-44dc-ba37-2e45cc648852", "created": "2021-09-13T19:10:04.582264Z", "modified": "2021-09-13T19:10:04.582264Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0219cf57-594f-44dc-ba37-2e45cc648852", "created": "2021-09-13T19:10:04.582264Z", "modified": "2021-09-13T19:10:04.582264Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db0bef71-aa24-4688-b448-9e3c3910b850", "created": "2021-09-13T19:10:04.583036Z", "modified": "2021-09-13T19:10:04.583036Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--db0bef71-aa24-4688-b448-9e3c3910b850", "created": "2021-09-13T19:10:04.583036Z", "modified": "2021-09-13T19:10:04.583036Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2db03ef-9c1b-4f74-b301-90f3020d732c", "created": "2021-09-13T19:10:04.583776Z", "modified": "2021-09-13T19:10:04.583776Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e2db03ef-9c1b-4f74-b301-90f3020d732c", "created": "2021-09-13T19:10:04.583776Z", "modified": "2021-09-13T19:10:04.583776Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--275ff07f-3814-45f8-9ccd-2765f7851e88", "created": "2021-09-13T19:10:04.584503Z", "modified": "2021-09-13T19:10:04.584503Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--e3c8eaa6-c204-5d98-8242-f819c7212c84", "value": "global.in.ai.monitor.azure.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--e3c8eaa6-c204-5d98-8242-f819c7212c84", "value": "global.in.ai.monitor.azure.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--9609ac3b-5c06-5bbc-8ac0-6328552c021f", "value": "global.in.ai.privatelink.monitor.azure.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--9609ac3b-5c06-5bbc-8ac0-6328552c021f", "value": "global.in.ai.privatelink.monitor.azure.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--56070a29-e224-5158-bf57-a7de57051350", "value": "eus014-breeziest-in.cloudapp.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--56070a29-e224-5158-bf57-a7de57051350", "value": "eus014-breeziest-in.cloudapp.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--9d32338d-2c93-5e24-8fa0-478104dc4966", "value": "dc.applicationinsights.azure.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--9d32338d-2c93-5e24-8fa0-478104dc4966", "value": "dc.applicationinsights.azure.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--ec8b804b-6533-5153-a011-82046543c2c1", "value": "dc.applicationinsights.microsoft.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--ec8b804b-6533-5153-a011-82046543c2c1", "value": "dc.applicationinsights.microsoft.com"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--09f59674-5a4e-5584-97de-f1be60e3e110", "value": "dc.trafficmanager.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--09f59674-5a4e-5584-97de-f1be60e3e110", "value": "dc.trafficmanager.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--48b183b4-3cd8-5190-a9f4-d7cf122bf1cb", "value": "40.78.253.204"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--48b183b4-3cd8-5190-a9f4-d7cf122bf1cb", "value": "40.78.253.204"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--787e1b66-2920-54c3-860f-607ca7f93b28", "value": "wus205-breeziest-in.cloudapp.net"}
{"type": "domain-name", "spec_version": "2.1", "id": "domain-name--787e1b66-2920-54c3-860f-607ca7f93b28", "value": "wus205-breeziest-in.cloudapp.net"}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8cf92f80-c91f-4e51-8cea-14a2f1dc9f87", "created": "2021-09-13T19:10:19.853164Z", "modified": "2021-09-13T19:10:19.853164Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--437dca17-3e4f-431f-81fe-f915ef256d95", "created": "2021-09-13T19:10:19.854599Z", "modified": "2021-09-13T19:10:19.854599Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--437dca17-3e4f-431f-81fe-f915ef256d95", "created": "2021-09-13T19:10:19.854599Z", "modified": "2021-09-13T19:10:19.854599Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d436cdf7-2dec-4679-994f-c62011100f72", "created": "2021-09-13T19:10:19.85525Z", "modified": "2021-09-13T19:10:19.85525Z", "name": "Query Registry MITRE T1012", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1012/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a204cd1c-f176-4c71-adb1-30b3ed168f77", "created": "2021-09-13T19:09:20.879047Z", "modified": "2021-09-13T19:09:20.879047Z", "name": "Query Registry MITRE T1012", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1012/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--05493dfd-5182-43de-871d-8407999b7d9f", "created": "2021-09-13T19:10:19.855807Z", "modified": "2021-09-13T19:10:19.855807Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--05493dfd-5182-43de-871d-8407999b7d9f", "created": "2021-09-13T19:10:19.855807Z", "modified": "2021-09-13T19:10:19.855807Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8195cfd9-aec6-4a6f-b66e-7423f71f52f2", "created": "2021-09-13T19:10:19.856377Z", "modified": "2021-09-13T19:10:19.856377Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae448ed9-0995-4625-9f42-946dea7cb57b", "created": "2021-09-13T19:09:20.881078Z", "modified": "2021-09-13T19:09:20.881078Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--89d62873-b291-45e7-b222-22b57c2a7cab", "created": "2021-09-13T19:10:19.858088Z", "modified": "2021-09-13T19:10:19.858088Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a93e873e-dd4a-4d62-aa50-44795274118b", "created": "2021-09-13T19:10:19.858649Z", "modified": "2021-09-13T19:10:19.858649Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0534a590-dcbb-45ab-b6d1-202e4491d0b5", "created": "2021-09-13T19:10:24.987036Z", "modified": "2021-09-13T19:10:24.987036Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af2a16fa-b27e-4bd8-9b0f-45f20dd5659a", "created": "2021-09-13T19:08:33.6967Z", "modified": "2021-09-13T19:08:33.6967Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc349977-07d4-44e5-9749-19ae7874876f", "created": "2021-09-13T19:09:00.917458Z", "modified": "2021-09-13T19:09:00.917458Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e827ed2-c30b-4237-a9a5-afcc95369b99", "created": "2021-09-13T19:09:55.476718Z", "modified": "2021-09-13T19:09:55.476718Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f498f010-4365-415b-90cd-9674d78dd84c", "created": "2021-09-13T19:10:15.046247Z", "modified": "2021-09-13T19:10:15.046247Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--184887a0-e3c5-47d5-b529-b4fd5de5bc57", "created": "2021-09-13T19:10:19.705048Z", "modified": "2021-09-13T19:10:19.705048Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--155c54cf-02b2-4a4e-9373-baa55daa74dd", "created": "2021-09-13T19:10:23.792796Z", "modified": "2021-09-13T19:10:23.792796Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--940b8e2e-55ac-4836-8535-3340c054af8b", "created": "2021-09-13T19:10:28.640982Z", "modified": "2021-09-13T19:10:28.640982Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d6fa3dff-f36f-416e-a952-3e8090af4f1e", "created": "2021-09-13T19:10:32.45156Z", "modified": "2021-09-13T19:10:32.45156Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c385635-c828-471d-a38b-3c01810a7946", "created": "2021-09-13T19:10:36.622231Z", "modified": "2021-09-13T19:10:36.622231Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--85eeb0df-b52c-4b68-984b-a0f773f4d289", "created": "2021-09-13T19:10:41.342294Z", "modified": "2021-09-13T19:10:41.342294Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc0814a-6210-4b0f-8de8-bd50ab34b52f", "created": "2021-09-13T19:10:45.419878Z", "modified": "2021-09-13T19:10:45.419878Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06dc0fa1-f353-4a5f-95b8-d4f50668cf76", "created": "2021-09-13T19:10:56.453091Z", "modified": "2021-09-13T19:10:56.453091Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd503c79-8af4-42c3-9930-44e075d3e7c1", "created": "2021-09-13T19:11:10.028227Z", "modified": "2021-09-13T19:11:10.028227Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--510087dc-1778-4a7c-b9bb-292544a64014", "created": "2021-09-13T19:10:24.988514Z", "modified": "2021-09-13T19:10:24.988514Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--82522607-6ec0-4620-886e-4f4b3fc38aa0", "created": "2021-09-13T19:11:14.211673Z", "modified": "2021-09-13T19:11:14.211673Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d9cfbace-a76a-4980-ab0e-65cf09212a42", "created": "2021-09-13T19:10:24.989706Z", "modified": "2021-09-13T19:10:24.989706Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d9cfbace-a76a-4980-ab0e-65cf09212a42", "created": "2021-09-13T19:10:24.989706Z", "modified": "2021-09-13T19:10:24.989706Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c79803fa-9e63-434a-83b9-bfae1d0df723", "created": "2021-09-13T19:10:24.990873Z", "modified": "2021-09-13T19:10:24.990873Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c79803fa-9e63-434a-83b9-bfae1d0df723", "created": "2021-09-13T19:10:24.990873Z", "modified": "2021-09-13T19:10:24.990873Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eafcb35d-3ba2-4c1c-bd5b-a25f70749c7a", "created": "2021-09-13T19:10:24.991343Z", "modified": "2021-09-13T19:10:24.991343Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--eafcb35d-3ba2-4c1c-bd5b-a25f70749c7a", "created": "2021-09-13T19:10:24.991343Z", "modified": "2021-09-13T19:10:24.991343Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b6e68c8b-f4f3-42b3-901d-ce095124fd4b", "created": "2021-09-13T19:10:24.992263Z", "modified": "2021-09-13T19:10:24.992263Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--208e3f21-d9df-41f9-b3e6-23414f3f1a50", "created": "2021-09-13T19:10:37.647976Z", "modified": "2021-09-13T19:10:37.647976Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--972c97d5-1edb-451d-a3c8-00179d2bd192", "created": "2021-09-13T19:10:37.649321Z", "modified": "2021-09-13T19:10:37.649321Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--972c97d5-1edb-451d-a3c8-00179d2bd192", "created": "2021-09-13T19:10:37.649321Z", "modified": "2021-09-13T19:10:37.649321Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--44bba2a7-1386-4932-abfd-8b2239e0bf46", "created": "2021-09-13T19:10:37.650396Z", "modified": "2021-09-13T19:10:37.650396Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--44bba2a7-1386-4932-abfd-8b2239e0bf46", "created": "2021-09-13T19:10:37.650396Z", "modified": "2021-09-13T19:10:37.650396Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fe92155-4f76-4890-9760-57103ca8a4a4", "created": "2021-09-13T19:10:37.6515Z", "modified": "2021-09-13T19:10:37.6515Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fe92155-4f76-4890-9760-57103ca8a4a4", "created": "2021-09-13T19:10:37.6515Z", "modified": "2021-09-13T19:10:37.6515Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6a302786-8888-4a81-b606-708dd048c338", "created": "2021-09-13T19:10:37.653623Z", "modified": "2021-09-13T19:10:37.653623Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6a302786-8888-4a81-b606-708dd048c338", "created": "2021-09-13T19:10:37.653623Z", "modified": "2021-09-13T19:10:37.653623Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6ee93bb4-db09-4503-80ec-89329cbe2010", "created": "2021-09-13T19:10:37.655759Z", "modified": "2021-09-13T19:10:37.655759Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6ee93bb4-db09-4503-80ec-89329cbe2010", "created": "2021-09-13T19:10:37.655759Z", "modified": "2021-09-13T19:10:37.655759Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--08ce0dc8-aa13-490c-873e-eef98a522951", "created": "2021-09-13T19:10:37.657861Z", "modified": "2021-09-13T19:10:37.657861Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--71a369e6-8f6f-42a2-848c-df9f814d28a1", "created": "2021-09-13T19:10:43.9084Z", "modified": "2021-09-13T19:10:43.9084Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce141119-e708-4dae-b306-a1a3e6a8e295", "created": "2021-09-13T19:10:43.909727Z", "modified": "2021-09-13T19:10:43.909727Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce141119-e708-4dae-b306-a1a3e6a8e295", "created": "2021-09-13T19:10:43.909727Z", "modified": "2021-09-13T19:10:43.909727Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--95fc55f8-4e26-460c-85b5-77db30d27a83", "created": "2021-09-13T19:10:43.910834Z", "modified": "2021-09-13T19:10:43.910834Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--95fc55f8-4e26-460c-85b5-77db30d27a83", "created": "2021-09-13T19:10:43.910834Z", "modified": "2021-09-13T19:10:43.910834Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--829849f3-55d5-4e79-a291-a5d3487ac86a", "created": "2021-09-13T19:10:43.911287Z", "modified": "2021-09-13T19:10:43.911287Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--829849f3-55d5-4e79-a291-a5d3487ac86a", "created": "2021-09-13T19:10:43.911287Z", "modified": "2021-09-13T19:10:43.911287Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2e8c7524-7ba4-49ac-9acc-b62b7abe5fe0", "created": "2021-09-13T19:10:43.912179Z", "modified": "2021-09-13T19:10:43.912179Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2e8c7524-7ba4-49ac-9acc-b62b7abe5fe0", "created": "2021-09-13T19:10:43.912179Z", "modified": "2021-09-13T19:10:43.912179Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fb295c4-8db2-488d-9f73-ade064386eca", "created": "2021-09-13T19:10:43.913485Z", "modified": "2021-09-13T19:10:43.913485Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8fb295c4-8db2-488d-9f73-ade064386eca", "created": "2021-09-13T19:10:43.913485Z", "modified": "2021-09-13T19:10:43.913485Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c70ac789-782d-4be2-871f-dd716470939b", "created": "2021-09-13T19:10:49.825884Z", "modified": "2021-09-13T19:10:49.825884Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af2a16fa-b27e-4bd8-9b0f-45f20dd5659a", "created": "2021-09-13T19:08:33.6967Z", "modified": "2021-09-13T19:08:33.6967Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc349977-07d4-44e5-9749-19ae7874876f", "created": "2021-09-13T19:09:00.917458Z", "modified": "2021-09-13T19:09:00.917458Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e827ed2-c30b-4237-a9a5-afcc95369b99", "created": "2021-09-13T19:09:55.476718Z", "modified": "2021-09-13T19:09:55.476718Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f498f010-4365-415b-90cd-9674d78dd84c", "created": "2021-09-13T19:10:15.046247Z", "modified": "2021-09-13T19:10:15.046247Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--184887a0-e3c5-47d5-b529-b4fd5de5bc57", "created": "2021-09-13T19:10:19.705048Z", "modified": "2021-09-13T19:10:19.705048Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--155c54cf-02b2-4a4e-9373-baa55daa74dd", "created": "2021-09-13T19:10:23.792796Z", "modified": "2021-09-13T19:10:23.792796Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--940b8e2e-55ac-4836-8535-3340c054af8b", "created": "2021-09-13T19:10:28.640982Z", "modified": "2021-09-13T19:10:28.640982Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d6fa3dff-f36f-416e-a952-3e8090af4f1e", "created": "2021-09-13T19:10:32.45156Z", "modified": "2021-09-13T19:10:32.45156Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c385635-c828-471d-a38b-3c01810a7946", "created": "2021-09-13T19:10:36.622231Z", "modified": "2021-09-13T19:10:36.622231Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--85eeb0df-b52c-4b68-984b-a0f773f4d289", "created": "2021-09-13T19:10:41.342294Z", "modified": "2021-09-13T19:10:41.342294Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc0814a-6210-4b0f-8de8-bd50ab34b52f", "created": "2021-09-13T19:10:45.419878Z", "modified": "2021-09-13T19:10:45.419878Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06dc0fa1-f353-4a5f-95b8-d4f50668cf76", "created": "2021-09-13T19:10:56.453091Z", "modified": "2021-09-13T19:10:56.453091Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd503c79-8af4-42c3-9930-44e075d3e7c1", "created": "2021-09-13T19:11:10.028227Z", "modified": "2021-09-13T19:11:10.028227Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--17302d59-ee8d-4f1a-8aa2-d7679325d32b", "created": "2021-09-13T19:10:49.826626Z", "modified": "2021-09-13T19:10:49.826626Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--82522607-6ec0-4620-886e-4f4b3fc38aa0", "created": "2021-09-13T19:11:14.211673Z", "modified": "2021-09-13T19:11:14.211673Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc8026b-4be6-4a86-b75e-0f9bbe63f54b", "created": "2021-09-13T19:10:49.827216Z", "modified": "2021-09-13T19:10:49.827216Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc8026b-4be6-4a86-b75e-0f9bbe63f54b", "created": "2021-09-13T19:10:49.827216Z", "modified": "2021-09-13T19:10:49.827216Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e7812ee9-03f5-451c-ad62-5f45ccd6edfd", "created": "2021-09-13T19:10:49.827769Z", "modified": "2021-09-13T19:10:49.827769Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e7812ee9-03f5-451c-ad62-5f45ccd6edfd", "created": "2021-09-13T19:10:49.827769Z", "modified": "2021-09-13T19:10:49.827769Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--81936f9f-a174-435c-9d29-c93945c8c7b5", "created": "2021-09-13T19:10:49.828323Z", "modified": "2021-09-13T19:10:49.828323Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0ca8d70a-e5f4-4d9e-a312-f3c7eff86627", "created": "2021-09-13T19:10:49.829432Z", "modified": "2021-09-13T19:10:49.829432Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0ca8d70a-e5f4-4d9e-a312-f3c7eff86627", "created": "2021-09-13T19:10:49.829432Z", "modified": "2021-09-13T19:10:49.829432Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--574aedcd-ea20-46ad-ab47-e9f5936fe2d2", "created": "2021-09-13T19:10:49.829992Z", "modified": "2021-09-13T19:10:49.829992Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d452ac50-67e4-4eee-aa04-fdd4a699c941", "created": "2021-09-13T19:09:15.275686Z", "modified": "2021-09-13T19:09:15.275686Z", "name": "Data Encrypted for Impact MITRE T1486", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1486/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--668dd096-ab6d-4364-8fb2-4c8c6095f470", "created": "2021-09-13T19:10:49.831111Z", "modified": "2021-09-13T19:10:49.831111Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70877c23-3574-42c8-9fde-4154f873e000", "created": "2021-09-13T19:10:59.736881Z", "modified": "2021-09-13T19:10:59.736881Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8dac9bd3-257e-449d-80a3-4fe86f5c02df", "created": "2021-09-13T19:10:59.738462Z", "modified": "2021-09-13T19:10:59.738462Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8dac9bd3-257e-449d-80a3-4fe86f5c02df", "created": "2021-09-13T19:10:59.738462Z", "modified": "2021-09-13T19:10:59.738462Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cdd438ce-c272-4023-8b09-b91b43b5f5ef", "created": "2021-09-13T19:10:59.739846Z", "modified": "2021-09-13T19:10:59.739846Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cdd438ce-c272-4023-8b09-b91b43b5f5ef", "created": "2021-09-13T19:10:59.739846Z", "modified": "2021-09-13T19:10:59.739846Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c7593e7-e8b5-436a-816a-7352a711c915", "created": "2021-09-13T19:10:59.740516Z", "modified": "2021-09-13T19:10:59.740516Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0c7593e7-e8b5-436a-816a-7352a711c915", "created": "2021-09-13T19:10:59.740516Z", "modified": "2021-09-13T19:10:59.740516Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9cb73ddf-1392-47d4-8053-a0b3816c3e91", "created": "2021-09-13T19:10:59.74186Z", "modified": "2021-09-13T19:10:59.74186Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae448ed9-0995-4625-9f42-946dea7cb57b", "created": "2021-09-13T19:09:20.881078Z", "modified": "2021-09-13T19:09:20.881078Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7ff041-038b-4641-8b4e-3a63d9cb2073", "created": "2021-09-13T19:10:59.743204Z", "modified": "2021-09-13T19:10:59.743204Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be7ff041-038b-4641-8b4e-3a63d9cb2073", "created": "2021-09-13T19:10:59.743204Z", "modified": "2021-09-13T19:10:59.743204Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--acf39832-a13c-4383-bfa6-af7cbdf99ff0", "created": "2021-09-13T19:11:11.639978Z", "modified": "2021-09-13T19:11:11.639978Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3223c5df-40c6-4b23-bb6a-c12d134a3b8f", "created": "2021-09-13T19:11:11.641195Z", "modified": "2021-09-13T19:11:11.641195Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3223c5df-40c6-4b23-bb6a-c12d134a3b8f", "created": "2021-09-13T19:11:11.641195Z", "modified": "2021-09-13T19:11:11.641195Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a1b70e98-c137-4ed7-8ddc-7873cd285690", "created": "2021-09-13T19:11:11.641706Z", "modified": "2021-09-13T19:11:11.641706Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a1b70e98-c137-4ed7-8ddc-7873cd285690", "created": "2021-09-13T19:11:11.641706Z", "modified": "2021-09-13T19:11:11.641706Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d75af25c-2cb9-4917-befb-ed9235a3e339", "created": "2021-09-13T19:11:11.642214Z", "modified": "2021-09-13T19:11:11.642214Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d75af25c-2cb9-4917-befb-ed9235a3e339", "created": "2021-09-13T19:11:11.642214Z", "modified": "2021-09-13T19:11:11.642214Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9849861-de92-43f1-9d1d-50d6c4d656d0", "created": "2021-09-13T19:11:11.642719Z", "modified": "2021-09-13T19:11:11.642719Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9849861-de92-43f1-9d1d-50d6c4d656d0", "created": "2021-09-13T19:11:11.642719Z", "modified": "2021-09-13T19:11:11.642719Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1bf3ae9e-471e-4702-8cc9-478364f796d6", "created": "2021-09-13T19:11:11.643237Z", "modified": "2021-09-13T19:11:11.643237Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1dacbb43-3498-4269-817f-505de0f96d39", "created": "2021-09-13T19:11:11.643742Z", "modified": "2021-09-13T19:11:11.643742Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2f3880d-b06b-488b-ad5e-04ef3a870e42", "created": "2021-09-13T19:09:00.918279Z", "modified": "2021-09-13T19:09:00.918279Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1dacbb43-3498-4269-817f-505de0f96d39", "created": "2021-09-13T19:11:11.643742Z", "modified": "2021-09-13T19:11:11.643742Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf4373e1-3ee3-4f95-ba9e-45aa4af00b87", "created": "2021-09-13T19:10:15.045406Z", "modified": "2021-09-13T19:10:15.045406Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1dacbb43-3498-4269-817f-505de0f96d39", "created": "2021-09-13T19:11:11.643742Z", "modified": "2021-09-13T19:11:11.643742Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78a103fc-8d18-46b3-a337-50dc311ef827", "created": "2021-09-13T19:10:19.704672Z", "modified": "2021-09-13T19:10:19.704672Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1dacbb43-3498-4269-817f-505de0f96d39", "created": "2021-09-13T19:11:11.643742Z", "modified": "2021-09-13T19:11:11.643742Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1f580be2-bc31-45b2-a22a-2d60b1547477", "created": "2021-09-13T19:10:56.4524Z", "modified": "2021-09-13T19:10:56.4524Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--022282b3-b804-4660-b468-00a02cdf4925", "created": "2021-09-13T19:11:11.644747Z", "modified": "2021-09-13T19:11:11.644747Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae448ed9-0995-4625-9f42-946dea7cb57b", "created": "2021-09-13T19:09:20.881078Z", "modified": "2021-09-13T19:09:20.881078Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--70b536e3-2e1a-4c87-91e2-331ceb1ffeeb", "created": "2021-09-13T19:11:26.456388Z", "modified": "2021-09-13T19:11:26.456388Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce6e8d2d-1ca3-4935-a9fb-939d39ae3e85", "created": "2021-09-13T19:11:26.458233Z", "modified": "2021-09-13T19:11:26.458233Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce6e8d2d-1ca3-4935-a9fb-939d39ae3e85", "created": "2021-09-13T19:11:26.458233Z", "modified": "2021-09-13T19:11:26.458233Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2ed71cc6-84e0-4d6e-88fe-fd5fb320044f", "created": "2021-09-13T19:11:26.459053Z", "modified": "2021-09-13T19:11:26.459053Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--2ed71cc6-84e0-4d6e-88fe-fd5fb320044f", "created": "2021-09-13T19:11:26.459053Z", "modified": "2021-09-13T19:11:26.459053Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be0c2805-cbeb-42b9-b6c7-a868cb8ef93b", "created": "2021-09-13T19:11:26.459854Z", "modified": "2021-09-13T19:11:26.459854Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--be0c2805-cbeb-42b9-b6c7-a868cb8ef93b", "created": "2021-09-13T19:11:26.459854Z", "modified": "2021-09-13T19:11:26.459854Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--006c23ec-0a0c-4e8b-a15f-af633f5332da", "created": "2021-09-13T19:11:26.461459Z", "modified": "2021-09-13T19:11:26.461459Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--006c23ec-0a0c-4e8b-a15f-af633f5332da", "created": "2021-09-13T19:11:26.461459Z", "modified": "2021-09-13T19:11:26.461459Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bd0d500d-b296-4995-a592-ca9829db25cb", "created": "2021-09-13T19:11:26.463063Z", "modified": "2021-09-13T19:11:26.463063Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6f2c5800-9091-4591-9db6-cef0620a1c02", "created": "2021-09-13T19:11:26.463858Z", "modified": "2021-09-13T19:11:26.463858Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1356b081-ebf2-4cf6-b83f-4b7805e5b9cb", "created": "2021-09-13T19:11:32.517241Z", "modified": "2021-09-13T19:11:32.517241Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e27982d-6198-4048-816e-7fd127c9cb04", "created": "2021-09-13T19:11:32.518528Z", "modified": "2021-09-13T19:11:32.518528Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e27982d-6198-4048-816e-7fd127c9cb04", "created": "2021-09-13T19:11:32.518528Z", "modified": "2021-09-13T19:11:32.518528Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9a6fc70f-a78c-4a34-8dc8-aec55040c484", "created": "2021-09-13T19:11:32.519128Z", "modified": "2021-09-13T19:11:32.519128Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9a6fc70f-a78c-4a34-8dc8-aec55040c484", "created": "2021-09-13T19:11:32.519128Z", "modified": "2021-09-13T19:11:32.519128Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3e9b5a7c-611a-4b5a-8952-564ada09e210", "created": "2021-09-13T19:11:32.519678Z", "modified": "2021-09-13T19:11:32.519678Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--3e9b5a7c-611a-4b5a-8952-564ada09e210", "created": "2021-09-13T19:11:32.519678Z", "modified": "2021-09-13T19:11:32.519678Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ada10f9c-3ed1-4967-afb4-21475547ea8e", "created": "2021-09-13T19:11:32.520779Z", "modified": "2021-09-13T19:11:32.520779Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ada10f9c-3ed1-4967-afb4-21475547ea8e", "created": "2021-09-13T19:11:32.520779Z", "modified": "2021-09-13T19:11:32.520779Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1e04272f-d975-482d-b1bb-eeee6ea532f8", "created": "2021-09-13T19:11:32.521885Z", "modified": "2021-09-13T19:11:32.521885Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8bdee5f1-1e42-4a36-aefd-6e643c92285a", "created": "2021-09-13T19:11:32.522437Z", "modified": "2021-09-13T19:11:32.522437Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6c667ffe-5b05-44c5-b425-cad1c33c0d9e", "created": "2021-09-13T19:11:42.853796Z", "modified": "2021-09-13T19:11:42.853796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5a9c9397-a2b4-4f27-a636-ea3416246ffb", "created": "2021-09-13T19:11:42.85509Z", "modified": "2021-09-13T19:11:42.85509Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5a9c9397-a2b4-4f27-a636-ea3416246ffb", "created": "2021-09-13T19:11:42.85509Z", "modified": "2021-09-13T19:11:42.85509Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03a14669-de4e-427c-9613-5de7776a336c", "created": "2021-09-13T19:11:42.85545Z", "modified": "2021-09-13T19:11:42.85545Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03a14669-de4e-427c-9613-5de7776a336c", "created": "2021-09-13T19:11:42.85545Z", "modified": "2021-09-13T19:11:42.85545Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7d86909a-46ef-4e0c-885e-dca534cce370", "created": "2021-09-13T19:11:42.855805Z", "modified": "2021-09-13T19:11:42.855805Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ae448ed9-0995-4625-9f42-946dea7cb57b", "created": "2021-09-13T19:09:20.881078Z", "modified": "2021-09-13T19:09:20.881078Z", "name": "Obfuscated Files or Information MITRE T1027", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--99ede2bf-1198-49cb-9feb-82d3c4243d1b", "created": "2021-09-13T19:11:42.856778Z", "modified": "2021-09-13T19:11:42.856778Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--abd5e992-2611-40f0-b096-2f0fb43d351a", "created": "2021-09-13T19:11:42.857093Z", "modified": "2021-09-13T19:11:42.857093Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9949b595-b4a1-41aa-9196-08bbefec64e6", "created": "2021-09-13T19:11:42.857411Z", "modified": "2021-09-13T19:11:42.857411Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2f3880d-b06b-488b-ad5e-04ef3a870e42", "created": "2021-09-13T19:09:00.918279Z", "modified": "2021-09-13T19:09:00.918279Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9949b595-b4a1-41aa-9196-08bbefec64e6", "created": "2021-09-13T19:11:42.857411Z", "modified": "2021-09-13T19:11:42.857411Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cf4373e1-3ee3-4f95-ba9e-45aa4af00b87", "created": "2021-09-13T19:10:15.045406Z", "modified": "2021-09-13T19:10:15.045406Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9949b595-b4a1-41aa-9196-08bbefec64e6", "created": "2021-09-13T19:11:42.857411Z", "modified": "2021-09-13T19:11:42.857411Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--78a103fc-8d18-46b3-a337-50dc311ef827", "created": "2021-09-13T19:10:19.704672Z", "modified": "2021-09-13T19:10:19.704672Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--9949b595-b4a1-41aa-9196-08bbefec64e6", "created": "2021-09-13T19:11:42.857411Z", "modified": "2021-09-13T19:11:42.857411Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--1f580be2-bc31-45b2-a22a-2d60b1547477", "created": "2021-09-13T19:10:56.4524Z", "modified": "2021-09-13T19:10:56.4524Z", "name": "Software Packing MITRE T1027", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1027/002/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--65c2b7c8-6de7-420c-a534-3d211a4491a1", "created": "2021-09-13T19:11:52.758807Z", "modified": "2021-09-13T19:11:52.758807Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af2a16fa-b27e-4bd8-9b0f-45f20dd5659a", "created": "2021-09-13T19:08:33.6967Z", "modified": "2021-09-13T19:08:33.6967Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fc349977-07d4-44e5-9749-19ae7874876f", "created": "2021-09-13T19:09:00.917458Z", "modified": "2021-09-13T19:09:00.917458Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e827ed2-c30b-4237-a9a5-afcc95369b99", "created": "2021-09-13T19:09:55.476718Z", "modified": "2021-09-13T19:09:55.476718Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f498f010-4365-415b-90cd-9674d78dd84c", "created": "2021-09-13T19:10:15.046247Z", "modified": "2021-09-13T19:10:15.046247Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--184887a0-e3c5-47d5-b529-b4fd5de5bc57", "created": "2021-09-13T19:10:19.705048Z", "modified": "2021-09-13T19:10:19.705048Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--155c54cf-02b2-4a4e-9373-baa55daa74dd", "created": "2021-09-13T19:10:23.792796Z", "modified": "2021-09-13T19:10:23.792796Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--940b8e2e-55ac-4836-8535-3340c054af8b", "created": "2021-09-13T19:10:28.640982Z", "modified": "2021-09-13T19:10:28.640982Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--d6fa3dff-f36f-416e-a952-3e8090af4f1e", "created": "2021-09-13T19:10:32.45156Z", "modified": "2021-09-13T19:10:32.45156Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4c385635-c828-471d-a38b-3c01810a7946", "created": "2021-09-13T19:10:36.622231Z", "modified": "2021-09-13T19:10:36.622231Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--85eeb0df-b52c-4b68-984b-a0f773f4d289", "created": "2021-09-13T19:10:41.342294Z", "modified": "2021-09-13T19:10:41.342294Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--fbc0814a-6210-4b0f-8de8-bd50ab34b52f", "created": "2021-09-13T19:10:45.419878Z", "modified": "2021-09-13T19:10:45.419878Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--06dc0fa1-f353-4a5f-95b8-d4f50668cf76", "created": "2021-09-13T19:10:56.453091Z", "modified": "2021-09-13T19:10:56.453091Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dd503c79-8af4-42c3-9930-44e075d3e7c1", "created": "2021-09-13T19:11:10.028227Z", "modified": "2021-09-13T19:11:10.028227Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--af9c7373-058e-42c5-b5ce-80c42b99c63b", "created": "2021-09-13T19:11:52.761209Z", "modified": "2021-09-13T19:11:52.761209Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--82522607-6ec0-4620-886e-4f4b3fc38aa0", "created": "2021-09-13T19:11:14.211673Z", "modified": "2021-09-13T19:11:14.211673Z", "name": "System Information Discovery MITRE T1082", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1082/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2638f0a-6616-475a-8d4a-a9da881554a1", "created": "2021-09-13T19:11:52.761863Z", "modified": "2021-09-13T19:11:52.761863Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f2638f0a-6616-475a-8d4a-a9da881554a1", "created": "2021-09-13T19:11:52.761863Z", "modified": "2021-09-13T19:11:52.761863Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e16c7e1-7f30-4359-a6f9-474fe938a0f3", "created": "2021-09-13T19:11:52.762324Z", "modified": "2021-09-13T19:11:52.762324Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7e16c7e1-7f30-4359-a6f9-474fe938a0f3", "created": "2021-09-13T19:11:52.762324Z", "modified": "2021-09-13T19:11:52.762324Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b70f14e5-9e6a-4b06-8966-cf9260a5d176", "created": "2021-09-13T19:11:52.762808Z", "modified": "2021-09-13T19:11:52.762808Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b70f14e5-9e6a-4b06-8966-cf9260a5d176", "created": "2021-09-13T19:11:52.762808Z", "modified": "2021-09-13T19:11:52.762808Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--39fd78bb-2bfd-43ba-985e-7e46da2830fd", "created": "2021-09-13T19:11:52.763597Z", "modified": "2021-09-13T19:11:52.763597Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e3287e6e-c660-47b6-8619-8dd2ed99ba11", "created": "2021-09-13T19:08:33.695542Z", "modified": "2021-09-13T19:08:33.695542Z", "name": "Virtualization/Sandbox Evasion MITRE T1497", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1497/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--f78416b3-dd4a-427f-bf79-a175fe032572", "created": "2021-09-13T19:08:33.692817Z", "modified": "2021-09-13T19:08:33.692817Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b4b24cc4-0593-4165-b81f-91ec7f672e83", "created": "2021-09-13T19:09:00.916423Z", "modified": "2021-09-13T19:09:00.916423Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4185e4f5-dd05-4c74-890c-834f4762f6ec", "created": "2021-09-13T19:09:15.2753Z", "modified": "2021-09-13T19:09:15.2753Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0e24f81a-5fca-4f4a-b76f-cc52c881a37f", "created": "2021-09-13T19:09:55.473181Z", "modified": "2021-09-13T19:09:55.473181Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--318a3d51-237e-41dd-b03f-835a6c7286ab", "created": "2021-09-13T19:10:15.043472Z", "modified": "2021-09-13T19:10:15.043472Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--dc45cdeb-624e-4c9b-be4d-9eab401d8dd3", "created": "2021-09-13T19:10:19.700882Z", "modified": "2021-09-13T19:10:19.700882Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cc0ad7b8-d614-430e-8782-a1d82d8cfc9e", "created": "2021-09-13T19:10:23.790368Z", "modified": "2021-09-13T19:10:23.790368Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a587d433-b1bf-466a-9c10-da646d611c95", "created": "2021-09-13T19:10:28.638553Z", "modified": "2021-09-13T19:10:28.638553Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--03e986ae-d141-4ba7-91e8-5375ac744e6c", "created": "2021-09-13T19:10:32.450095Z", "modified": "2021-09-13T19:10:32.450095Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--5104e8ea-8e86-4e4c-ac5d-840e493607ce", "created": "2021-09-13T19:10:36.620438Z", "modified": "2021-09-13T19:10:36.620438Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8f97aaf2-4914-427c-b17c-3718138ecd20", "created": "2021-09-13T19:10:41.340501Z", "modified": "2021-09-13T19:10:41.340501Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ea9e4525-dd58-4544-b25e-2fb1dcd0e200", "created": "2021-09-13T19:10:45.418214Z", "modified": "2021-09-13T19:10:45.418214Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4e794f85-8623-4487-8bd2-16c4cd0b698c", "created": "2021-09-13T19:10:56.450796Z", "modified": "2021-09-13T19:10:56.450796Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b23f01ed-a895-43c3-beac-6dcdc95ceefa", "created": "2021-09-13T19:11:10.027437Z", "modified": "2021-09-13T19:11:10.027437Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--738c9724-451a-4742-8cbb-4b2a16a31c8b", "created": "2021-09-13T19:12:05.192156Z", "modified": "2021-09-13T19:12:05.192156Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e8cab273-8879-4ccb-8b84-f62eb6379e6e", "created": "2021-09-13T19:11:14.210052Z", "modified": "2021-09-13T19:11:14.210052Z", "name": "Process Injection MITRE T1055", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1055/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c371746b-4578-4d92-b4ff-914199c6307d", "created": "2021-09-13T19:12:05.193035Z", "modified": "2021-09-13T19:12:05.193035Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--22b586a3-8d60-41e2-86c5-e85199a5a55e", "created": "2021-09-13T19:09:15.273139Z", "modified": "2021-09-13T19:09:15.273139Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c371746b-4578-4d92-b4ff-914199c6307d", "created": "2021-09-13T19:12:05.193035Z", "modified": "2021-09-13T19:12:05.193035Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a5e6fb6b-a7bf-4ea1-9e36-c60562186d5e", "created": "2021-09-13T19:09:20.880267Z", "modified": "2021-09-13T19:09:20.880267Z", "name": "Remote System Discovery MITRE T1018", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1018/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8afb02dd-33fe-4ede-8b44-ec8e74ecbf3b", "created": "2021-09-13T19:12:05.193719Z", "modified": "2021-09-13T19:12:05.193719Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8811a6ba-606d-4fd5-b244-3dfa18b91ce2", "created": "2021-09-13T19:09:15.270438Z", "modified": "2021-09-13T19:09:15.270438Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8afb02dd-33fe-4ede-8b44-ec8e74ecbf3b", "created": "2021-09-13T19:12:05.193719Z", "modified": "2021-09-13T19:12:05.193719Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--227cc25e-fd2f-40ea-b3e9-d1b018ba9277", "created": "2021-09-13T19:09:20.878633Z", "modified": "2021-09-13T19:09:20.878633Z", "name": "Process Discovery MITRE T1057", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1057/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9c0450d-1082-4276-ab04-05f692047b04", "created": "2021-09-13T19:12:05.194398Z", "modified": "2021-09-13T19:12:05.194398Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--bab3559b-c65f-4123-a057-bd7fb0606e42", "created": "2021-09-13T19:09:15.271327Z", "modified": "2021-09-13T19:09:15.271327Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b9c0450d-1082-4276-ab04-05f692047b04", "created": "2021-09-13T19:12:05.194398Z", "modified": "2021-09-13T19:12:05.194398Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--477b0660-735d-4eea-863f-978880c3edff", "created": "2021-09-13T19:09:20.879455Z", "modified": "2021-09-13T19:09:20.879455Z", "name": "Non-Application Layer Protocol MITRE T1095", "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1095/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c7d4f437-4f92-4462-bb62-c72500ab9096", "created": "2021-09-13T19:12:05.195758Z", "modified": "2021-09-13T19:12:05.195758Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--73919cc0-5dc9-4d63-a04d-480dab537e4b", "created": "2021-09-13T19:09:15.274052Z", "modified": "2021-09-13T19:09:15.274052Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c7d4f437-4f92-4462-bb62-c72500ab9096", "created": "2021-09-13T19:12:05.195758Z", "modified": "2021-09-13T19:12:05.195758Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac9d5fda-30e2-4ddf-b86c-167cfd7eb6fe", "created": "2021-09-13T19:09:20.880669Z", "modified": "2021-09-13T19:09:20.880669Z", "name": "Application Window Discovery MITRE T1010", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1010/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb5d9b90-f8cc-4681-896b-9033d46a748e", "created": "2021-09-13T19:12:05.197109Z", "modified": "2021-09-13T19:12:05.197109Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a2b51ad5-7591-446e-a8cc-27119750c3f3", "created": "2021-09-13T19:09:15.274895Z", "modified": "2021-09-13T19:09:15.274895Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--cb5d9b90-f8cc-4681-896b-9033d46a748e", "created": "2021-09-13T19:12:05.197109Z", "modified": "2021-09-13T19:12:05.197109Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--53961cd2-570c-4eba-a97a-c041f4be3d6d", "created": "2021-09-13T19:09:20.881488Z", "modified": "2021-09-13T19:09:20.881488Z", "name": "Application Layer Protocol MITRE T1071", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1071/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--6e6520fd-6994-4710-9732-9cb478dbeb64", "created": "2021-09-13T19:08:33.69433Z", "modified": "2021-09-13T19:08:33.69433Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--84974311-d171-48a2-b959-5bafb810b86a", "created": "2021-09-13T19:09:55.475134Z", "modified": "2021-09-13T19:09:55.475134Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--11e6dbb1-9c1f-40e1-b7df-a630560e95a5", "created": "2021-09-13T19:10:15.04455Z", "modified": "2021-09-13T19:10:15.04455Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7c7237c8-fd8e-4735-bc77-aa98e93fbbeb", "created": "2021-09-13T19:10:19.704047Z", "modified": "2021-09-13T19:10:19.704047Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--c44f305b-38ce-4df7-a056-4f36f14386c4", "created": "2021-09-13T19:10:23.791729Z", "modified": "2021-09-13T19:10:23.791729Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--26eef934-27cb-4c21-a028-498cf1b8c04c", "created": "2021-09-13T19:10:28.639924Z", "modified": "2021-09-13T19:10:28.639924Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--29f155a7-84bd-4d83-bb1c-32f64c9dc364", "created": "2021-09-13T19:10:32.451155Z", "modified": "2021-09-13T19:10:32.451155Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--801e5262-8a49-4120-8356-d290b2cbb2e7", "created": "2021-09-13T19:10:36.621438Z", "modified": "2021-09-13T19:10:36.621438Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--722de7ff-c3f9-414c-8517-6eeefb4a8cf5", "created": "2021-09-13T19:10:41.341501Z", "modified": "2021-09-13T19:10:41.341501Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ac0da494-8586-4c93-b07f-78396aa238cf", "created": "2021-09-13T19:10:45.419164Z", "modified": "2021-09-13T19:10:45.419164Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--371b3939-9e9c-408e-94e9-586579700fa3", "created": "2021-09-13T19:10:56.451695Z", "modified": "2021-09-13T19:10:56.451695Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--babdb6f5-2125-4dd3-80a2-0bb9a110bea2", "created": "2021-09-13T19:11:10.027895Z", "modified": "2021-09-13T19:11:10.027895Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--0d15baac-ea05-4c52-b167-6dda835bcf7b", "created": "2021-09-13T19:12:05.198428Z", "modified": "2021-09-13T19:12:05.198428Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--4ea62d76-88d4-4db6-a946-7f77239f7e5d", "created": "2021-09-13T19:11:14.210987Z", "modified": "2021-09-13T19:11:14.210987Z", "name": "Masquerading MITRE T1036", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "external_references": [{"source_name": "MITRE ATT&CK", "url": "https://attack.mitre.org/techniques/T1036/"}]}
85
83
87
84
93
89
86
88
82
81
92
91
90
97
80
79
